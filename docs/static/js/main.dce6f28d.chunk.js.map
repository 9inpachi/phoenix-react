{"version":3,"sources":["../../../src/three/controls-manager.ts","../../../src/three/renderer-manager.ts","../../../src/three/export-manager.ts","../../../src/three/import-manager.ts","../../../src/three/selection-manager.ts","../../../src/three/scene-manager.ts","../../../src/three/animations-manager.ts","../../../src/three/effects-manager.ts","../../../src/three/vr-manager.ts","../../../src/three/index.ts","../../../src/ui/index.ts","../../src/info-logger.ts","../../src/event-display.ts","../../../src/extras/cut.model.ts","../../../../src/ui/phoenix-menu/phoenix-menu-node.ts","../../../src/helpers/runge-kutta.ts","../../../src/helpers/rk-helper.ts","../../../../src/loaders/objects/phoenix-objects.ts","../../../src/loaders/phoenix-loader.ts","../../../src/extras/configuration.model.ts","../../../../src/loaders/objects/cms-objects.ts","../../../src/extras/preset-view.model.ts","../../../src/loaders/cms-loader.ts","../../../src/loaders/jivexml-loader.ts","../../../src/loaders/jsroot-event-loader.ts","../../../src/loaders/lhcb-loader.ts","../../../src/loaders/script-loader.ts","../../../src/loaders/trackml-loader.ts","App.js","index.js"],"names":["this","ControlsManager","prototype","position","RendererManager","document","InfoLogger","add","Cut","PhoenixMenuNode","i","_a","_i","Configuration","param","backs","push","box","faces","eventData","objectParams","innerHTML","replace","trim","split","map","Number","trackColl","getElementsByTagName","pos","hit","eventNumber","runNumber","Hits","Tracks","numParticleStubs","App","eventDisplay","EventDisplay","useEffect","configuration","init","fetch","then","res","json","parsePhoenixEvents","loadOBJGeometry","initEventDisplay","clipping","id","onClick","uiManager","getUIManager","setClipping","rotateClipping","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dce6f28d.chunk.js","sourcesContent":["import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\nimport { PerspectiveCamera, OrthographicCamera, Vector3, Group } from 'three';\r\nimport * as TWEEN from '@tweenjs/tween.js';\r\n/**\r\n * Manager for managing event display controls.\r\n */\r\nvar ControlsManager = /** @class */ (function () {\r\n    /**\r\n     * Constructor for setting up all the controls.\r\n     * @param rendererManager The renderer manager to get the main renderer.\r\n     */\r\n    function ControlsManager(rendererManager) {\r\n        var _this = this;\r\n        this.controls = [];\r\n        this.mainControls = null;\r\n        this.overlayControls = null;\r\n        // Arguments: FOV, aspect ratio, near and far distances\r\n        var perspectiveCamera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 10, 100000);\r\n        // Arguments: left, right, top, bottom, near and far distances\r\n        var orthographicCamera = new OrthographicCamera(-window.innerWidth / 2, window.innerWidth / 2, window.innerHeight / 2, -window.innerHeight / 2, 10, 100000);\r\n        // Orbit controls allow to move around\r\n        this.perspectiveControls = this.setOrbitControls(perspectiveCamera, rendererManager.getMainRenderer().domElement);\r\n        this.orthographicControls = this.setOrbitControls(orthographicCamera, rendererManager.getMainRenderer().domElement);\r\n        perspectiveCamera.position.z = orthographicCamera.position.z = 200;\r\n        // Set active orbit controls\r\n        this.addControls(this.perspectiveControls);\r\n        this.addControls(this.orthographicControls);\r\n        this.setActiveControls(this.perspectiveControls);\r\n        this.setMainControls(this.perspectiveControls);\r\n        this.setOverlayControls(this.orthographicControls);\r\n        // Add listener\r\n        this.getActiveControls().addEventListener('change', function () {\r\n            _this.transformSync();\r\n            _this.updateSync();\r\n        });\r\n        // Initialize the zoom controls\r\n        this.initializeZoomControls();\r\n    }\r\n    /**\r\n     * Set orbit controls for the camera.\r\n     * @param camera The camera with which to create the orbit controls.\r\n     * @param domElement DOM element of the renderer to associate the orbit controls with.\r\n     * @returns Configured orbit controls.\r\n     */\r\n    ControlsManager.prototype.setOrbitControls = function (camera, domElement) {\r\n        var controls = new OrbitControls(camera, domElement);\r\n        controls.enableDamping = true;\r\n        controls.dampingFactor = 0.25;\r\n        controls.enableZoom = true;\r\n        controls.autoRotate = false;\r\n        return controls;\r\n    };\r\n    // SET/GET\r\n    /**\r\n     * Set the currently active orbit controls.\r\n     * @param controls Orbit controls to be set as active.\r\n     */\r\n    ControlsManager.prototype.setActiveControls = function (controls) {\r\n        this.activeControls = controls;\r\n    };\r\n    /**\r\n     * Set the main orbit controls.\r\n     * @param controls Orbit controls to be set as main.\r\n     */\r\n    ControlsManager.prototype.setMainControls = function (controls) {\r\n        this.mainControls = controls;\r\n    };\r\n    /**\r\n     * Set orbit controls for overlay.\r\n     * @param controls Orbit controls to be set for overlay.\r\n     */\r\n    ControlsManager.prototype.setOverlayControls = function (controls) {\r\n        this.overlayControls = controls;\r\n    };\r\n    /**\r\n     * Get currently active orbit controls.\r\n     * @returns Currently active orbit controls.\r\n     */\r\n    ControlsManager.prototype.getActiveControls = function () {\r\n        return this.activeControls;\r\n    };\r\n    /**\r\n     * Get the main orbit controls.\r\n     * @returns Main orbit controls.\r\n     */\r\n    ControlsManager.prototype.getMainControls = function () {\r\n        return this.mainControls;\r\n    };\r\n    /**\r\n     * Get orbit controls for overlay.\r\n     * @returns Orbit controls for overlay.\r\n     */\r\n    ControlsManager.prototype.getOverlayControls = function () {\r\n        return this.overlayControls;\r\n    };\r\n    /**\r\n     * Get the currently active camera.\r\n     * @returns Currently active camera.\r\n     */\r\n    ControlsManager.prototype.getActiveCamera = function () {\r\n        return this.activeControls.object;\r\n    };\r\n    /**\r\n     * Get the main camera.\r\n     * @returns Main camera.\r\n     */\r\n    ControlsManager.prototype.getMainCamera = function () {\r\n        return this.mainControls.object;\r\n    };\r\n    /**\r\n     * Get the camera for overlay.\r\n     * @returns The camera for overlay.\r\n     */\r\n    ControlsManager.prototype.getOverlayCamera = function () {\r\n        return this.overlayControls.object;\r\n    };\r\n    /**\r\n     * Get the main and overlay cameras.\r\n     * @returns An array containing the main and overlay cameras.\r\n     */\r\n    ControlsManager.prototype.getAllCameras = function () {\r\n        return [this.getMainCamera(), this.getOverlayCamera()];\r\n    };\r\n    // FUNCTIONS\r\n    /**\r\n     * Add orbit controls to the controls list.\r\n     * @param controls Orbit controls to be added.\r\n     */\r\n    ControlsManager.prototype.addControls = function (controls) {\r\n        if (!this.containsObject(controls, this.controls)) {\r\n            this.controls.push(controls);\r\n        }\r\n    };\r\n    /**\r\n     * Remove orbit controls from the controls list.\r\n     * @param controls Orbit controls to be removed.\r\n     */\r\n    ControlsManager.prototype.removeControls = function (controls) {\r\n        var index = this.controls.indexOf(controls);\r\n        if (index > -1) {\r\n            this.controls.splice(index, 1);\r\n        }\r\n    };\r\n    /**\r\n     * Swap the main and overlay orbit controls.\r\n     */\r\n    ControlsManager.prototype.swapControls = function () {\r\n        var temp = this.mainControls;\r\n        this.mainControls = this.overlayControls;\r\n        // this._mainControls.autoRotate = temp.autoRotate;\r\n        this.overlayControls = temp;\r\n    };\r\n    /**\r\n     * Synchronously update all controls.\r\n     */\r\n    ControlsManager.prototype.updateSync = function () {\r\n        for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\r\n            var control = _a[_i];\r\n            if (control === this.activeControls) {\r\n                continue;\r\n            }\r\n            this.update(control);\r\n        }\r\n    };\r\n    /**\r\n     * Update orbit controls.\r\n     * @param controls Orbit controls to be updated.\r\n     */\r\n    ControlsManager.prototype.update = function (controls) {\r\n        controls.update();\r\n    };\r\n    /**\r\n     * Synchronously transform the controls by updating the position and rotation.\r\n     */\r\n    ControlsManager.prototype.transformSync = function () {\r\n        for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\r\n            var control = _a[_i];\r\n            if (control === this.activeControls) {\r\n                continue;\r\n            }\r\n            this.positionSync(control);\r\n            this.rotationSync(control);\r\n        }\r\n    };\r\n    /**\r\n     * Zoom all the cameras by a specific zoom factor.\r\n     * The factor may either be greater or smaller.\r\n     * @param zoomFactor The factor to zoom by.\r\n     * @param zoomTime The time it takes for a zoom animation to complete.\r\n     */\r\n    ControlsManager.prototype.zoomTo = function (zoomFactor, zoomTime) {\r\n        for (var _i = 0, _a = this.zoomCameraAnimPairs; _i < _a.length; _i++) {\r\n            var zoomCameraAnimPair = _a[_i];\r\n            var camera = zoomCameraAnimPair.camera;\r\n            var anim = zoomCameraAnimPair.anim;\r\n            if (camera.isOrthographicCamera) {\r\n                anim.to({\r\n                    zoom: camera.zoom * (1 / zoomFactor)\r\n                }, zoomTime);\r\n                camera.updateProjectionMatrix();\r\n            }\r\n            else {\r\n                var cameraPosition = camera.position;\r\n                anim.to({\r\n                    x: cameraPosition.x * zoomFactor,\r\n                    y: cameraPosition.y * zoomFactor,\r\n                    z: cameraPosition.z * zoomFactor\r\n                }, zoomTime);\r\n            }\r\n            anim.start();\r\n        }\r\n    };\r\n    /**\r\n     * Move the camera to look at the object with the given uuid.\r\n     * @param uuid uuid of the object.\r\n     * @param objectsGroup Group of objects to be traversed for finding the object\r\n     * with the given uuid.\r\n     */\r\n    ControlsManager.prototype.lookAtObject = function (uuid, objectsGroup) {\r\n        var _this = this;\r\n        var origin = new Vector3(0, 0, 0);\r\n        objectsGroup.traverse(function (object) {\r\n            if (object.uuid === uuid) {\r\n                var objectPosition_1 = new Vector3();\r\n                if (object instanceof Group) {\r\n                    // If it is a group of other event data we traverse through it\r\n                    object.traverse(function (childObject) {\r\n                        // Make sure the child is not a group (e.g Track is a group)\r\n                        if (childObject.children.length === 0) {\r\n                            if (childObject.position.equals(origin)) {\r\n                                // Get the max vector from the bounding box to accumulate with the clusters\r\n                                objectPosition_1.add(childObject.geometry.boundingSphere.getBoundingBox().max);\r\n                            }\r\n                            else {\r\n                                objectPosition_1.add(childObject.position);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                else if (object.position.equals(origin)) {\r\n                    // Get the center of bounding sphere of objects with no position\r\n                    objectPosition_1 = object.geometry.boundingSphere.center;\r\n                }\r\n                else {\r\n                    // Get the object position for all other elements\r\n                    objectPosition_1 = object.position;\r\n                }\r\n                // Check if the object is away from the origin\r\n                if (objectPosition_1.distanceTo(origin) > 1) {\r\n                    for (var _i = 0, _a = _this.getAllCameras(); _i < _a.length; _i++) {\r\n                        var camera = _a[_i];\r\n                        // Moving the camera to the object's position and then zooming out\r\n                        new TWEEN.Tween(camera.position).to({\r\n                            x: objectPosition_1.x * 1.1,\r\n                            y: objectPosition_1.y * 1.1,\r\n                            z: objectPosition_1.z * 1.1\r\n                        }, 200).start();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Initialize the zoom controls by setting up the camera and their animations as pairs.\r\n     */\r\n    ControlsManager.prototype.initializeZoomControls = function () {\r\n        var allCameras = this.getAllCameras();\r\n        this.zoomCameraAnimPairs = [];\r\n        for (var _i = 0, allCameras_1 = allCameras; _i < allCameras_1.length; _i++) {\r\n            var camera = allCameras_1[_i];\r\n            var animation = camera.isOrthographicCamera\r\n                ? new TWEEN.Tween(camera)\r\n                : new TWEEN.Tween(camera.position);\r\n            this.zoomCameraAnimPairs.push({\r\n                camera: camera,\r\n                anim: animation\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Synchronously update position of the orbit controls.\r\n     * @param controls Orbit controls whose position is to be updated.\r\n     */\r\n    ControlsManager.prototype.positionSync = function (controls) {\r\n        controls.object.position.set(this.activeControls.object.position.x, this.activeControls.object.position.y, this.activeControls.object.position.z);\r\n        // controls.update();\r\n    };\r\n    /**\r\n     * Synchronously update rotation of the orbit controls.\r\n     * @param controls Controls whose rotation is to be updated.\r\n     */\r\n    ControlsManager.prototype.rotationSync = function (controls) {\r\n        controls.target = this.activeControls.target;\r\n        // controls.update();\r\n    };\r\n    /**\r\n     * Check if the list of orbit controls contains a specific orbit controls.\r\n     * @param obj Orbit controls to be checked for containment.\r\n     * @param list List of orbit controls.\r\n     * @returns If the list contains the orbit controls.\r\n     */\r\n    ControlsManager.prototype.containsObject = function (obj, list) {\r\n        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {\r\n            var object = list_1[_i];\r\n            if (object === obj) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Get the index of orbit controls from a list of orbit controls.\r\n     * @param obj Orbit controls whose index is to be obtained.\r\n     * @param list List of orbit controls.\r\n     * @returns Index of the orbit controls in the given list. Returns -1 if not found.\r\n     */\r\n    ControlsManager.prototype.objectIndex = function (obj, list) {\r\n        for (var i = 0; i < list.length; i++) {\r\n            if (list[i] === obj) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n    return ControlsManager;\r\n}());\r\nexport { ControlsManager };\r\n//# sourceMappingURL=controls-manager.js.map","import { WebGLRenderer } from 'three';\r\n/**\r\n * Manager for managing event display's renderer related functions.\r\n */\r\nvar RendererManager = /** @class */ (function () {\r\n    /**\r\n     * Instantiate the renderer manager by setting up the main renderer.\r\n     * @param elementId ID of the wrapper element.\r\n     */\r\n    function RendererManager(elementId) {\r\n        /** Main renderer to be used by the event display. */\r\n        this.mainRenderer = null;\r\n        /** Overlay renderer for rendering a secondary overlay canvas. */\r\n        this.overlayRenderer = null;\r\n        /** A list of all available/created renderers. */\r\n        this.renderers = [];\r\n        // Main renderer for current browsers\r\n        this.setRenderer(elementId);\r\n    }\r\n    /**\r\n     * Render the overlay.\r\n     * @param scene The event display scene.\r\n     * @param controlsManager Manager for managing controls.\r\n     */\r\n    RendererManager.prototype.render = function (scene, controlsManager) {\r\n        if (this.getOverlayRenderer()) {\r\n            if (!this.getOverlayRenderer().domElement.hidden) {\r\n                var sceneColor = scene.background;\r\n                scene.background = null;\r\n                if (!this.isFixedOverlay()) {\r\n                    this.getOverlayRenderer().render(scene, controlsManager.getOverlayCamera());\r\n                }\r\n                scene.background = sceneColor;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Set the initial renderer.\r\n     * @param elementId ID of the wrapper element.\r\n     */\r\n    RendererManager.prototype.setRenderer = function (elementId) {\r\n        var renderer = new WebGLRenderer();\r\n        this.addRenderer(renderer);\r\n        this.setMainRenderer(renderer);\r\n        this.getMainRenderer().setSize(window.innerWidth, window.innerHeight, false);\r\n        this.getMainRenderer().setPixelRatio(window.devicePixelRatio);\r\n        this.getMainRenderer().domElement.className = 'ui-element';\r\n        this.getMainRenderer().domElement.id = 'three-canvas';\r\n        var canvas = document.getElementById(elementId);\r\n        if (canvas == null) {\r\n            canvas = document.body;\r\n        }\r\n        canvas.appendChild(this.getMainRenderer().domElement);\r\n    };\r\n    // SET/GET\r\n    /**\r\n     * Set the main renderer.\r\n     * @param renderer Three.js WebGLRenderer.\r\n     */\r\n    RendererManager.prototype.setMainRenderer = function (renderer) {\r\n        this.mainRenderer = renderer;\r\n    };\r\n    /**\r\n     * Set the renderer for overlay event display view.\r\n     * @param overlayCanvas Canvas on which the overlay is to be rendered.\r\n     */\r\n    RendererManager.prototype.setOverlayRenderer = function (overlayCanvas) {\r\n        var parameters = {\r\n            canvas: overlayCanvas,\r\n            antialias: false,\r\n            alpha: true\r\n        };\r\n        var overlayRenderer = new WebGLRenderer(parameters);\r\n        this.addRenderer(overlayRenderer);\r\n        this.overlayRenderer = overlayRenderer;\r\n    };\r\n    /**\r\n     * Set the available renderers.\r\n     * @param renderers List of three.js WebGLRenderers.\r\n     */\r\n    RendererManager.prototype.setRenderers = function (renderers) {\r\n        this.renderers = renderers;\r\n    };\r\n    /**\r\n     * Get the main renderer.\r\n     * @returns The main renderer.\r\n     */\r\n    RendererManager.prototype.getMainRenderer = function () {\r\n        return this.mainRenderer;\r\n    };\r\n    /**\r\n     * Get the renderer used for overlay.\r\n     * @returns The overlay renderer.\r\n     */\r\n    RendererManager.prototype.getOverlayRenderer = function () {\r\n        return this.overlayRenderer;\r\n    };\r\n    /**\r\n     * Get all the available renderers.\r\n     * @returns A list of three.js WebGLRenderers\r\n     */\r\n    RendererManager.prototype.getRenderers = function () {\r\n        return this.renderers;\r\n    };\r\n    // FUNCTIONS\r\n    /**\r\n     * Add a renderer to the available renderers list.\r\n     * @param renderer Three.js WebGLRenderer to be added.\r\n     */\r\n    RendererManager.prototype.addRenderer = function (renderer) {\r\n        if (!this.containsObject(renderer, this.renderers)) {\r\n            this.renderers.push(renderer);\r\n        }\r\n    };\r\n    /**\r\n     * Remove a renderer from the available renderers list.\r\n     * @param renderer Three,js WebGLRenderer to be removed.\r\n     */\r\n    RendererManager.prototype.removeControls = function (renderer) {\r\n        var index = this.renderers.indexOf(renderer);\r\n        if (index > -1) {\r\n            this.renderers.splice(index, 1);\r\n        }\r\n    };\r\n    /**\r\n     * Swap any two renderers.\r\n     * @param rendererA Renderer A to be swapped with renderer B.\r\n     * @param rendererB Renderer B to be swapped with renderer A.\r\n     */\r\n    RendererManager.prototype.swapRenderers = function (rendererA, rendererB) {\r\n        var temp = rendererA;\r\n        rendererA = rendererB;\r\n        rendererB = temp;\r\n    };\r\n    /**\r\n     * Check if the list of available renderers contains a renderer.\r\n     * @param obj The renderer to be checked for containment.\r\n     * @param list List of available renderers.\r\n     * @returns If the list contains the renderer or not.\r\n     */\r\n    RendererManager.prototype.containsObject = function (obj, list) {\r\n        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {\r\n            var object = list_1[_i];\r\n            if (object === obj) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Set if local clipping is to be enabled or disabled for all the available renderers.\r\n     * @param value If the local clipping is to be enabled or disabled.\r\n     */\r\n    RendererManager.prototype.setLocalClippingEnabled = function (value) {\r\n        for (var _i = 0, _a = this.renderers; _i < _a.length; _i++) {\r\n            var renderer = _a[_i];\r\n            renderer.localClippingEnabled = value;\r\n        }\r\n    };\r\n    /**\r\n     * Get if the local clipping for the first renderer is enabled or disabled.\r\n     * @returns If the renderer local clipping is enabled or disabled.\r\n     */\r\n    RendererManager.prototype.getLocalClipping = function () {\r\n        if (this.renderers.length > 0) {\r\n            return this.renderers[0].localClippingEnabled;\r\n        }\r\n    };\r\n    /**\r\n     * Check if the overlay is fixed or not.\r\n     * @returns If the overlay is fixed or not.\r\n     */\r\n    RendererManager.prototype.isFixedOverlay = function () {\r\n        return this.fixedOverlay;\r\n    };\r\n    /**\r\n     * Set if the overlay is to be fixed or not.\r\n     * @param value If the overlay is to be fixed or not.\r\n     */\r\n    RendererManager.prototype.setFixOverlay = function (value) {\r\n        this.fixedOverlay = value;\r\n    };\r\n    return RendererManager;\r\n}());\r\nexport { RendererManager };\r\n//# sourceMappingURL=renderer-manager.js.map","import { OBJExporter } from 'three/examples/jsm/exporters/OBJExporter';\r\nimport { GLTFExporter } from 'three/examples/jsm/exporters/GLTFExporter';\r\n/**\r\n * Manager for managing event display's export related functionality.\r\n */\r\nvar ExportManager = /** @class */ (function () {\r\n    /**\r\n     * Constructor for the export manager.\r\n     */\r\n    function ExportManager() {\r\n    }\r\n    /**\r\n     * Exports scene to OBJ file format.\r\n     * @param scene The scene to be exported.\r\n     */\r\n    ExportManager.prototype.exportSceneToOBJ = function (scene) {\r\n        // Instantiate a exporter\r\n        var exporter = new OBJExporter();\r\n        var result = exporter.parse(scene);\r\n        this.saveString(result, 'phoenix-obj.obj');\r\n    };\r\n    /**\r\n     * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\r\n     * @param scene The scene to be exported.\r\n     * @param eventData Currently loaded event data.\r\n     * @param geometries Currently loaded geometries.\r\n     */\r\n    ExportManager.prototype.exportPhoenixScene = function (scene, eventData, geometries) {\r\n        var _this = this;\r\n        var exporter = new GLTFExporter();\r\n        var sceneConfig = this.saveSceneConfig(eventData, geometries);\r\n        // Parse the input and generate the glTF output\r\n        exporter.parse(scene, function (result) {\r\n            var jsonResult = { sceneConfiguration: sceneConfig, scene: result };\r\n            var output = JSON.stringify(jsonResult, null, 2);\r\n            _this.saveString(output, 'phoenix-scene.phnx');\r\n        }, null);\r\n    };\r\n    /**\r\n     * Save the configuration of the currently loaded scene including event data and geometries.\r\n     * @param eventData Curently loaded event data.\r\n     * @param geometries Currently loaded geometries.\r\n     */\r\n    ExportManager.prototype.saveSceneConfig = function (eventData, geometries) {\r\n        var eventDataConfig = this.saveEventDataConfiguration(eventData);\r\n        var geometriesConfig = this.saveGeometriesConfiguration(geometries);\r\n        var sceneConfig = { eventData: eventDataConfig, geometries: geometriesConfig };\r\n        return sceneConfig;\r\n    };\r\n    /**\r\n     * Save the configuration of the currently loaded event data.\r\n     * @param eventData Currently loaded event data.\r\n     */\r\n    ExportManager.prototype.saveEventDataConfiguration = function (eventData) {\r\n        var eventDataConfig = {};\r\n        for (var _i = 0, _a = eventData.children; _i < _a.length; _i++) {\r\n            var objectType = _a[_i];\r\n            if (objectType.name) {\r\n                eventDataConfig[objectType.name] = [];\r\n                for (var _b = 0, _c = objectType.children; _b < _c.length; _b++) {\r\n                    var collection = _c[_b];\r\n                    if (collection.name) {\r\n                        eventDataConfig[objectType.name].push(collection.name);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return eventDataConfig;\r\n    };\r\n    /**\r\n     * Save the configuration of the currently loaded geometries.\r\n     * @param geometries Currently loaded geometries.\r\n     */\r\n    ExportManager.prototype.saveGeometriesConfiguration = function (geometries) {\r\n        var geometriesConfig = [];\r\n        geometries.children.forEach(function (object) {\r\n            if (object.name !== 'EventData') {\r\n                geometriesConfig.push(object.name);\r\n            }\r\n        });\r\n        return geometriesConfig;\r\n    };\r\n    /**\r\n     * Save string in the file and download it.\r\n     * @param text Text to be stored.\r\n     * @param filename Name of the file.\r\n     */\r\n    ExportManager.prototype.saveString = function (text, filename) {\r\n        this.save(new Blob([text], { type: 'text/plain' }), filename);\r\n    };\r\n    /**\r\n     * Create a temporary link and download/save the data (blob) in a file.\r\n     * @param blob Blob containing exported data.\r\n     * @param filename Name of the export file.\r\n     */\r\n    ExportManager.prototype.save = function (blob, filename) {\r\n        var link = document.createElement('a');\r\n        link.style.display = 'none';\r\n        document.body.appendChild(link);\r\n        link.href = URL.createObjectURL(blob);\r\n        link.download = filename;\r\n        link.click();\r\n    };\r\n    return ExportManager;\r\n}());\r\nexport { ExportManager };\r\n//# sourceMappingURL=export-manager.js.map","import { DoubleSide, Mesh, LineSegments, LineBasicMaterial, MeshPhongMaterial, Material, ObjectLoader, FrontSide } from 'three';\r\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\n/**\r\n * Manager for managing event display's import related functionality.\r\n */\r\nvar ImportManager = /** @class */ (function () {\r\n    /**\r\n     * Constructor for the import manager.\r\n     * @param clipPlanes Planes for clipping geometry.\r\n     * @param EVENT_DATA_ID Object group ID containing event data.\r\n     * @param GEOMETRIES_ID Object group ID containing detector geometries.\r\n     */\r\n    function ImportManager(clipPlanes, EVENT_DATA_ID, GEOMETRIES_ID) {\r\n        this.clipPlanes = clipPlanes;\r\n        this.EVENT_DATA_ID = EVENT_DATA_ID;\r\n        this.GEOMETRIES_ID = GEOMETRIES_ID;\r\n    }\r\n    /**\r\n     * Loads an OBJ (.obj) geometry from the given filename.\r\n     * @param callback Callback when geometry is processed.\r\n     * @param filename Path to the geometry.\r\n     * @param name Name given to the geometry.\r\n     * @param color Color to initialize the geometry.\r\n     * @param doubleSided Renders both sides of the material.\r\n     */\r\n    ImportManager.prototype.loadOBJGeometry = function (callback, filename, name, color, doubleSided) {\r\n        var _this = this;\r\n        if (color == null) {\r\n            color = 0x41a6f4;\r\n        }\r\n        var objLoader = new OBJLoader();\r\n        objLoader.load(filename, function (object) {\r\n            var processed = _this.processOBJ(object, name, color, doubleSided, 'OBJ file');\r\n            callback(processed);\r\n        });\r\n    };\r\n    /**\r\n     * Parses and loads a geometry in OBJ (.obj) format.\r\n     * @param geometry Geometry in OBJ (.obj) format.\r\n     * @param name Name given to the geometry.\r\n     * @returns The processed object.\r\n     */\r\n    ImportManager.prototype.parseOBJGeometry = function (geometry, name) {\r\n        var objLoader = new OBJLoader();\r\n        var object = objLoader.parse(geometry);\r\n        return this.processOBJ(object, name, 0x41a6f4, false, 'OBJ file loaded from the client.');\r\n    };\r\n    /**\r\n     * Process the geometry object being loaded from OBJ (.obj) format.\r\n     * @param object 3D object.\r\n     * @param name Name of the object.\r\n     * @param color Color of the object.\r\n     * @param doubleSided Renders both sides of the material.\r\n     * @param data Data/description to be associated with the object.\r\n     */\r\n    ImportManager.prototype.processOBJ = function (object, name, color, doubleSided, data) {\r\n        object.name = name;\r\n        object.userData = { info: data };\r\n        return this.setObjFlat(object, color, doubleSided);\r\n    };\r\n    /**\r\n     * Process the 3D object and flatten it.\r\n     * @param object3d Group of geometries that make up the object.\r\n     * @param color Color of the object.\r\n     * @param doubleSided Renders both sides of the material.\r\n     * @returns The processed object.\r\n     */\r\n    ImportManager.prototype.setObjFlat = function (object3d, color, doubleSided) {\r\n        var material2 = new MeshPhongMaterial({\r\n            color: color,\r\n            shininess: 0,\r\n            wireframe: false,\r\n            clippingPlanes: this.clipPlanes,\r\n            clipIntersection: true,\r\n            clipShadows: false,\r\n            side: doubleSided ? DoubleSide : FrontSide\r\n        });\r\n        object3d.traverse(function (child) {\r\n            if (child instanceof Mesh) {\r\n                child.name = object3d.name;\r\n                child.userData = object3d.userData;\r\n                // Use the new material\r\n                if (child.material instanceof Material) {\r\n                    child.material.dispose();\r\n                    child.material = material2;\r\n                }\r\n                // enable casting shadows\r\n                child.castShadow = false;\r\n                child.receiveShadow = false;\r\n            }\r\n            else {\r\n                if (child instanceof LineSegments &&\r\n                    child.material instanceof LineBasicMaterial) {\r\n                    child.material.color.set(color);\r\n                }\r\n            }\r\n        });\r\n        return object3d;\r\n    };\r\n    /**\r\n     * Parses and loads a geometry in GLTF (.gltf) format.\r\n     * @param geometry Geometry in GLTF (.gltf) format.\r\n     * @param callback Callback called after the geometry is loaded.\r\n     */\r\n    ImportManager.prototype.parseGLTFGeometry = function (geometry, callback) {\r\n        var _this = this;\r\n        var loader = new GLTFLoader();\r\n        var sceneString = JSON.stringify(geometry, null, 2);\r\n        loader.parse(sceneString, '', function (gltf) {\r\n            var eventData = gltf.scene.getObjectByName(_this.EVENT_DATA_ID);\r\n            var geometries = gltf.scene.getObjectByName(_this.GEOMETRIES_ID);\r\n            callback(eventData, geometries);\r\n        });\r\n    };\r\n    /**\r\n     * Loads a GLTF (.gltf) scene/geometry from the given URL.\r\n     * @param sceneUrl URL to the GLTF (.gltf) file.\r\n     * @param name Name of the loaded scene/geometry.\r\n     * @param callback Callback called after the scene/geometry is loaded.\r\n     * @param scale Scale of the geometry.\r\n     */\r\n    ImportManager.prototype.loadGLTFGeometry = function (sceneUrl, name, callback, scale) {\r\n        var _this = this;\r\n        var loader = new GLTFLoader();\r\n        loader.load(sceneUrl, function (gltf) {\r\n            var geometry = gltf.scene;\r\n            _this.processGeometry(geometry, name, scale);\r\n            callback(geometry);\r\n        });\r\n    };\r\n    /**\r\n     * Loads geometries from JSON.\r\n     * @param json JSON or URL to JSON file of the geometry.\r\n     * @param name Name of the geometry or group of geometries.\r\n     * @param callback Callback called after the geometries are processed and loaded.\r\n     * @param scale Scale of the geometry.\r\n     * @param doubleSided Renders both sides of the material.\r\n     */\r\n    ImportManager.prototype.loadJSONGeometry = function (json, name, callback, scale, doubleSided) {\r\n        var _this = this;\r\n        var loader = new ObjectLoader();\r\n        if (typeof json === 'string') {\r\n            loader.load(json, function (geometry) {\r\n                _this.processGeometry(geometry, name, scale, doubleSided);\r\n                callback(geometry);\r\n            });\r\n        }\r\n        else if (typeof json === 'object') {\r\n            var geometry = loader.parse(json);\r\n            this.processGeometry(geometry, name, scale, doubleSided);\r\n            callback(geometry);\r\n        }\r\n    };\r\n    /**\r\n     * Process the geometry by setting up material and clipping attributes.\r\n     * @param geometry Geometry to be processed.\r\n     * @param name Name of the geometry.\r\n     * @param scale Scale of the geometry.\r\n     * @param doubleSided Renders both sides of the material.\r\n     */\r\n    ImportManager.prototype.processGeometry = function (geometry, name, scale, doubleSided) {\r\n        var _this = this;\r\n        geometry.name = name;\r\n        // Set a custom scale if provided\r\n        if (scale) {\r\n            geometry.scale.set(scale, scale, scale);\r\n        }\r\n        geometry.traverse(function (child) {\r\n            if (child instanceof Mesh) {\r\n                child.name ? child.userData.name = child.name : child.name = child.userData.name = name;\r\n                if (child.material instanceof Material) {\r\n                    var color = child.material['color'] ? child.material['color'] : 0x2fd691;\r\n                    var side = doubleSided ? DoubleSide : child.material['side'];\r\n                    // Disposing of the default material\r\n                    child.material.dispose();\r\n                    // Changing to a material with 0 shininess\r\n                    child.material = new MeshPhongMaterial({\r\n                        color: color,\r\n                        shininess: 0,\r\n                        side: side\r\n                    });\r\n                    // Setting up the clipping planes\r\n                    child.material.clippingPlanes = _this.clipPlanes;\r\n                    child.material.clipIntersection = true;\r\n                    child.material.clipShadows = false;\r\n                }\r\n            }\r\n        });\r\n    };\r\n    return ImportManager;\r\n}());\r\nexport { ImportManager };\r\n//# sourceMappingURL=import-manager.js.map","import { Vector2, Raycaster, DirectionalLight, AmbientLight, AxesHelper } from 'three';\r\nimport { BehaviorSubject } from 'rxjs';\r\n/**\r\n * Manager for managing event display's selection related functions.\r\n */\r\nvar SelectionManager = /** @class */ (function () {\r\n    /**\r\n     * Constructor for the selection manager.\r\n     */\r\n    function SelectionManager() {\r\n        var _this = this;\r\n        /** BehaviorSubject for the currently selected object. */\r\n        this.activeObject = new BehaviorSubject('');\r\n        /**\r\n         * Function to call on mouse move when object selection is enabled.\r\n         */\r\n        this.onTouchMove = function (event) {\r\n            var intersectedObject = _this.intersectObject(event);\r\n            if (intersectedObject) {\r\n                if (_this.ignoreList.includes(intersectedObject.type)) {\r\n                    return;\r\n                }\r\n                _this.outlinePass.selectedObjects = [intersectedObject];\r\n            }\r\n        };\r\n        /**\r\n         * Function to call on mouse click when object selection is enabled.\r\n         */\r\n        this.onDocumentMouseDown = function () {\r\n            var intersectedObject = _this.outlinePass.selectedObjects[0];\r\n            if (intersectedObject) {\r\n                _this.selectedObject.name = intersectedObject.name;\r\n                _this.selectedObject.attributes.splice(0, _this.selectedObject.attributes.length);\r\n                _this.activeObject.next(intersectedObject.uuid);\r\n                for (var _i = 0, _a = Object.keys(intersectedObject.userData); _i < _a.length; _i++) {\r\n                    var key = _a[_i];\r\n                    _this.selectedObject.attributes.push({\r\n                        attributeName: key,\r\n                        attributeValue: intersectedObject.userData[key]\r\n                    });\r\n                }\r\n                // Process properties of the selected object\r\n                var props = Object.keys(intersectedObject.userData).map(function (key) {\r\n                    // Only take properties that are a string or number (no arrays or objects)\r\n                    if (['string', 'number'].includes(typeof (intersectedObject.userData[key]))) {\r\n                        return key + '=' + intersectedObject.userData[key];\r\n                    }\r\n                }).filter(function (val) { return val; });\r\n                // Build the log text and add to the logger\r\n                var log = intersectedObject.name + (props.length > 0 ? ' with ' + props.join(', ') : '');\r\n                if (log) {\r\n                    _this.infoLogger.add(log, 'Clicked');\r\n                }\r\n            }\r\n        };\r\n        /**\r\n         * Function to call on touch when object selection is enabled.\r\n         * @param event Event containing touch data.\r\n         */\r\n        this.onTouchDown = function (event) {\r\n            event.preventDefault();\r\n            _this.onTouchMove(event.targetTouches[0]);\r\n            _this.onDocumentMouseDown();\r\n        };\r\n        this.isInit = false;\r\n        this.ignoreList = [\r\n            new AmbientLight().type,\r\n            new DirectionalLight().type,\r\n            new AxesHelper().type\r\n        ];\r\n    }\r\n    /**\r\n     * Initialize the selection manager.\r\n     * @param camera The camera inside the scene.\r\n     * @param scene The scene used for event display.\r\n     * @param effectsManager Manager for managing three.js event display effects\r\n     * like outline pass and unreal bloom.\r\n     * @param infoLogger Service for logging data to the information panel.\r\n     */\r\n    SelectionManager.prototype.init = function (camera, scene, effectsManager, infoLogger) {\r\n        this.camera = camera;\r\n        this.scene = scene;\r\n        this.isInit = true;\r\n        this.infoLogger = infoLogger;\r\n        this.effectsManager = effectsManager;\r\n        this.outlinePass = this.effectsManager.addOutlinePassForSelection();\r\n    };\r\n    /**\r\n     * Set the currently selected object.\r\n     * @param selectedObject The currently selected object.\r\n     */\r\n    SelectionManager.prototype.setSelectedObject = function (selectedObject) {\r\n        this.selectedObject = selectedObject;\r\n    };\r\n    /**\r\n     * Get the uuid of the currently selected object.\r\n     * @returns uuid of the currently selected object.\r\n     */\r\n    SelectionManager.prototype.getActiveObjectId = function () {\r\n        return this.activeObject;\r\n    };\r\n    /**\r\n     * Set if selecting is to be enabled or disabled.\r\n     * @param enable If selecting is to be enabled or disabled.\r\n     */\r\n    SelectionManager.prototype.setSelecting = function (enable) {\r\n        if (this.isInit) {\r\n            if (enable) {\r\n                this.enableSelecting();\r\n            }\r\n            else {\r\n                this.disableSelecting();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Enable selecting of event display elements and set mouse move and click events.\r\n     */\r\n    SelectionManager.prototype.enableSelecting = function () {\r\n        document.getElementById('three-canvas').addEventListener('mousemove', this.onTouchMove, true);\r\n        document.getElementById('three-canvas').addEventListener('click', this.onDocumentMouseDown, true);\r\n        document.getElementById('three-canvas').addEventListener('touchstart', this.onTouchDown);\r\n    };\r\n    /**\r\n     * Disable selecting of event display elements and remove mouse move and click events.\r\n     */\r\n    SelectionManager.prototype.disableSelecting = function () {\r\n        document.getElementById('three-canvas').removeEventListener('mousemove', this.onTouchMove, true);\r\n        document.getElementById('three-canvas').removeEventListener('click', this.onDocumentMouseDown, true);\r\n        document.getElementById('three-canvas').removeEventListener('touchstart', this.onTouchDown);\r\n        this.outlinePass.selectedObjects = [];\r\n    };\r\n    /**\r\n     * Check if any object intersects on mouse move.\r\n     * @param event Event containing data of the mouse move.\r\n     * @returns Intersected or hovered over object.\r\n     */\r\n    SelectionManager.prototype.intersectObject = function (event) {\r\n        var _a;\r\n        (_a = event.preventDefault) === null || _a === void 0 ? void 0 : _a.call(event);\r\n        var mouse = new Vector2();\r\n        var rendererElement = this.effectsManager.composer.renderer.domElement;\r\n        mouse.x = (event.clientX / rendererElement.clientWidth) * 2 - 1;\r\n        mouse.y = -(event.clientY / rendererElement.clientHeight) * 2 + 1;\r\n        var raycaster = new Raycaster();\r\n        raycaster.setFromCamera(mouse, this.camera);\r\n        raycaster.params.Line.threshold = 3;\r\n        var intersects = raycaster.intersectObjects(this.scene.children, true);\r\n        if (intersects.length > 0) {\r\n            // We want the closest one\r\n            return intersects[0].object;\r\n        }\r\n    };\r\n    /**\r\n     * Highlight the object with the given uuid by giving it an outline.\r\n     * @param uuid uuid of the object.\r\n     * @param objectsGroup Group of objects to be traversed for finding the object\r\n     * with the given uuid.\r\n     */\r\n    SelectionManager.prototype.highlightObject = function (uuid, objectsGroup) {\r\n        var _this = this;\r\n        objectsGroup.traverse(function (object) {\r\n            if (object.uuid === uuid) {\r\n                _this.outlinePass.selectedObjects = [object];\r\n            }\r\n        });\r\n    };\r\n    return SelectionManager;\r\n}());\r\nexport { SelectionManager };\r\n//# sourceMappingURL=selection-manager.js.map","import { Scene, Color, LineSegments, Mesh, MeshPhongMaterial, LineBasicMaterial, Group, AxesHelper, AmbientLight, DirectionalLight, Line, MeshBasicMaterial, Material, Points, PointsMaterial, MeshToonMaterial } from 'three';\r\n/**\r\n * Manager for managing functions of the three.js scene.\r\n */\r\nvar SceneManager = /** @class */ (function () {\r\n    /**\r\n     * Create the scene manager.\r\n     * @param ignoreList List of objects to ignore for getting a clean scene.\r\n     * @param useCameraLight Whether to use directional light placed at the camera position.\r\n     */\r\n    function SceneManager(ignoreList, useCameraLight) {\r\n        if (useCameraLight === void 0) { useCameraLight = true; }\r\n        /** Whether to use directional light placed at the camera position. */\r\n        this.useCameraLight = true;\r\n        this.getScene();\r\n        this.ignoreList = ignoreList;\r\n        this.scene.background = new Color('hsl(0, 0%, 100%)');\r\n        this.axis = null;\r\n        this.setLights(useCameraLight);\r\n    }\r\n    /**\r\n     * Initializes the lights in the scene.\r\n     * @param useCameraLight Whether to use directional light placed at the camera position.\r\n     */\r\n    SceneManager.prototype.setLights = function (useCameraLight) {\r\n        var _this = this;\r\n        if (useCameraLight === void 0) { useCameraLight = true; }\r\n        this.useCameraLight = useCameraLight;\r\n        var ambientLight = new AmbientLight(0xffffff, 0.6);\r\n        this.scene.add(ambientLight);\r\n        if (this.useCameraLight) {\r\n            this.cameraLight = new DirectionalLight(0xffffff, 0.45);\r\n            this.cameraLight.position.set(0, 0, 10);\r\n            this.scene.add(this.cameraLight);\r\n        }\r\n        else {\r\n            [\r\n                [-100, -50, 100],\r\n                [100, 50, -100],\r\n                [-100, 50, -100],\r\n                [100, -50, 100] // Bottom right\r\n            ].forEach(function (position) {\r\n                var directionalLight = new DirectionalLight(0xffffff, 0.2);\r\n                directionalLight.position.set(position[0], position[1], position[2]);\r\n                _this.scene.add(directionalLight);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Update position of directional light for each frame rendered.\r\n     * @param camera Camera for setting the position of directional light.\r\n     */\r\n    SceneManager.prototype.updateLights = function (camera) {\r\n        if (this.useCameraLight) {\r\n            this.cameraLight.position.copy(camera.position);\r\n        }\r\n    };\r\n    /**\r\n     * Get the current scene and create new if it doesn't exist.\r\n     * @returns The scene.\r\n     */\r\n    SceneManager.prototype.getScene = function () {\r\n        if (!this.scene) {\r\n            this.scene = new Scene();\r\n        }\r\n        return this.scene;\r\n    };\r\n    /**\r\n     * Get a clean copy of the scene.\r\n     * @returns A clear scene with no objects from the ignoreList.\r\n     */\r\n    SceneManager.prototype.getCleanScene = function () {\r\n        var _this = this;\r\n        var clearScene = this.scene.clone();\r\n        var removeList = [];\r\n        clearScene.traverse(function (object) {\r\n            if (_this.ignoreList.includes(object.type)) {\r\n                removeList.push(object);\r\n            }\r\n        });\r\n        clearScene.remove.apply(clearScene, removeList);\r\n        return clearScene;\r\n    };\r\n    /**\r\n     * Sets the scene background to be dark or white.\r\n     * @param dark If the scene background is dark (true) or white (false).\r\n     */\r\n    SceneManager.prototype.darkBackground = function (dark) {\r\n        var background = 0xffffff;\r\n        if (dark) {\r\n            background = 0x0;\r\n        }\r\n        if (this.scene) {\r\n            this.scene.background = new Color(background);\r\n        }\r\n    };\r\n    /**\r\n     * Modifies an object's opacity.\r\n     * @param name Name of the object to change its opacity.\r\n     * @param value Value of opacity, between 0 (transparent) and 1 (opaque).\r\n     */\r\n    SceneManager.prototype.setGeometryOpacity = function (name, value) {\r\n        var object = this.scene.getObjectByName(name);\r\n        if (value) {\r\n            object.traverse(function (o) {\r\n                if (o instanceof Mesh && o.material instanceof Material) {\r\n                    o.material.transparent = true;\r\n                    o.material.opacity = value;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Changes color of an OBJ geometry.\r\n     * @param name Name of the geometry.\r\n     * @param value Value representing the color in hex format.\r\n     */\r\n    SceneManager.prototype.OBJGeometryColor = function (name, value) {\r\n        var object = this.scene.getObjectByName(name);\r\n        if (object) {\r\n            object.traverse(function (child) {\r\n                if (child instanceof Mesh || child instanceof LineSegments) {\r\n                    if (child.material instanceof MeshPhongMaterial ||\r\n                        child.material instanceof MeshBasicMaterial ||\r\n                        child.material instanceof LineBasicMaterial) {\r\n                        child.material.color.set(value);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Changes objects visibility.\r\n     * @param name Name of the object to change its visibility.\r\n     * @param visible If the object will be visible (true) or hidden (false).\r\n     * @param parentName Name of the parent object to look inside for object\r\n     * whose visibility is to be toggled.\r\n     */\r\n    SceneManager.prototype.objectVisibility = function (name, visible, parentName) {\r\n        var parent = parentName\r\n            ? this.scene.getObjectByName(parentName)\r\n            : this.scene;\r\n        var object = parent.getObjectByName(name);\r\n        if (object) {\r\n            object.traverse(function (child) {\r\n                child.visible = visible;\r\n                if (!visible) {\r\n                    child.layers.disable(0);\r\n                    child.layers.enable(1);\r\n                }\r\n                else {\r\n                    child.layers.enable(0);\r\n                    child.layers.disable(1);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Gets an object's position.\r\n     * @param name Name of the object.\r\n     * @returns Object position.\r\n     */\r\n    SceneManager.prototype.getObjectPosition = function (name) {\r\n        var object = this.scene.getObjectByName(name);\r\n        if (object) {\r\n            return object.position;\r\n        }\r\n    };\r\n    /**\r\n     * Removes an object from the scene.\r\n     * @param name Name of the object to be removed.\r\n     */\r\n    SceneManager.prototype.removeGeometry = function (name) {\r\n        var object = this.scene.getObjectByName(name);\r\n        var geometries = this.getGeometries();\r\n        geometries.remove(object);\r\n    };\r\n    /**\r\n     * Scales an object.\r\n     * @param name Name of the object to scale.\r\n     * @param value Value to scale the object by.\r\n     */\r\n    SceneManager.prototype.scaleObject = function (name, value) {\r\n        var object = this.scene.getObjectByName(name);\r\n        object.scale.set(value, value, value);\r\n    };\r\n    /**\r\n     * Adds new type of objects (Jets, Tracks...) to the event data group.\r\n     * @param objectType Name of the object type.\r\n     * @returns The new group added to the event data.\r\n     */\r\n    SceneManager.prototype.addEventDataTypeGroup = function (objectType) {\r\n        var eventData = this.getEventData();\r\n        var typeGroup = this.scene.getObjectByName(objectType);\r\n        if (!typeGroup) {\r\n            typeGroup = new Group();\r\n        }\r\n        typeGroup.name = objectType;\r\n        eventData.add(typeGroup);\r\n        return typeGroup;\r\n    };\r\n    /**\r\n     * Changes the color of all objects inside an event data collection.\r\n     * @param collectionName Name of the collection.\r\n     * @param color Hex value representing the color.\r\n     */\r\n    SceneManager.prototype.collectionColor = function (collectionName, color) {\r\n        var collection = this.getScene()\r\n            .getObjectByName(SceneManager.EVENT_DATA_ID)\r\n            .getObjectByName(collectionName);\r\n        for (var _i = 0, _a = Object.values(collection.children); _i < _a.length; _i++) {\r\n            var child = _a[_i];\r\n            child.traverse(function (object) {\r\n                // For jets and tracks\r\n                if (object instanceof Line ||\r\n                    object instanceof Mesh ||\r\n                    object instanceof Points) {\r\n                    if (object.material instanceof LineBasicMaterial ||\r\n                        object.material instanceof MeshBasicMaterial ||\r\n                        object.material instanceof MeshBasicMaterial ||\r\n                        object.material instanceof PointsMaterial ||\r\n                        object.material instanceof MeshPhongMaterial ||\r\n                        object.material instanceof MeshToonMaterial) {\r\n                        object.material.color.set(color);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Applies a cut to all objects inside a collection, filtering them given a parameter.\r\n     * @param collectionName Name of the collection.\r\n     * @param filter Cut used to filter the objects in the collection.\r\n     */\r\n    SceneManager.prototype.collectionFilter = function (collectionName, filter) {\r\n        var collection = this.getScene()\r\n            .getObjectByName(SceneManager.EVENT_DATA_ID)\r\n            .getObjectByName(collectionName);\r\n        for (var _i = 0, _a = Object.values(collection.children); _i < _a.length; _i++) {\r\n            var child = _a[_i];\r\n            if (child.userData) {\r\n                var value = child.userData[filter.field];\r\n                if (value) {\r\n                    if (value <= filter.maxValue && value >= filter.minValue) {\r\n                        child.visible = true;\r\n                    }\r\n                    else {\r\n                        child.visible = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Changes the visibility of all elements in a group.\r\n     * @param name Name of the group.\r\n     * @param visible If the group will be visible (true) or hidden (false).\r\n     * @param parentName Name of the parent object to look inside for object\r\n     * whose visibility is to be toggled.\r\n     */\r\n    SceneManager.prototype.groupVisibility = function (name, visible, parentName) {\r\n        var parent = parentName\r\n            ? this.scene.getObjectByName(parentName)\r\n            : this.scene;\r\n        var collection = parent.getObjectByName(name);\r\n        for (var _i = 0, _a = Object.values(collection.children); _i < _a.length; _i++) {\r\n            var child = _a[_i];\r\n            child.visible = visible;\r\n        }\r\n    };\r\n    /**\r\n     * Gets a group of objects from the scene.\r\n     * @param identifier String that identifies the group's name.\r\n     * @returns The object.\r\n     */\r\n    SceneManager.prototype.getObjectsGroup = function (identifier) {\r\n        var group = this.scene.getObjectByName(identifier);\r\n        if (group == null) {\r\n            group = new Group();\r\n            group.name = identifier;\r\n            this.scene.add(group);\r\n        }\r\n        return group;\r\n    };\r\n    /**\r\n     * Get event data inside the scene.\r\n     * @returns A group of objects with event data.\r\n     */\r\n    SceneManager.prototype.getEventData = function () {\r\n        return this.getObjectsGroup(SceneManager.EVENT_DATA_ID);\r\n    };\r\n    /**\r\n     * Get geometries inside the scene.\r\n     * @returns A group of objects with geometries.\r\n     */\r\n    SceneManager.prototype.getGeometries = function () {\r\n        return this.getObjectsGroup(SceneManager.GEOMETRIES_ID);\r\n    };\r\n    /**\r\n     * Clears event data of the scene.\r\n     */\r\n    SceneManager.prototype.clearEventData = function () {\r\n        var eventData = this.getEventData();\r\n        if (eventData != null) {\r\n            this.scene.remove(eventData);\r\n        }\r\n        this.getEventData();\r\n    };\r\n    /**\r\n     * Sets scene axis visibility.\r\n     * @param visible If the axes will be visible (true) or hidden (false).\r\n     */\r\n    SceneManager.prototype.setAxis = function (visible) {\r\n        if (this.axis == null) {\r\n            this.axis = new AxesHelper(2000);\r\n            this.scene.add(this.axis);\r\n        }\r\n        this.axis.visible = visible;\r\n    };\r\n    /**\r\n     * Toggle depthTest of event data by updating all children's depthTest and renderOrder.\r\n     * @param value If depthTest will be true or false.\r\n     */\r\n    SceneManager.prototype.eventDataDepthTest = function (value) {\r\n        var object = this.getEventData();\r\n        if (object !== null) {\r\n            // Traversing all event data objects to change material's depthTest\r\n            object.traverse(function (objectChild) {\r\n                if (objectChild.material) {\r\n                    // Changing renderOrder to make event data render on top of geometry\r\n                    // Arbitrarily setting a high value of 999\r\n                    value ? objectChild.renderOrder = 0 : objectChild.renderOrder = 999;\r\n                    // Applying depthTest\r\n                    objectChild.material.depthTest = value;\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Wireframe geometries and decrease their opacity.\r\n     * @param value A boolean to specify if geometries are to be wireframed\r\n     * or not.\r\n     */\r\n    SceneManager.prototype.wireframeGeometries = function (value) {\r\n        var allGeoms = this.getGeometries();\r\n        allGeoms.traverse(function (object) {\r\n            if (object.material) {\r\n                object.material.wireframe = value;\r\n                if (value) {\r\n                    object.material.transparent = true;\r\n                    object.material.opacity = 0.1;\r\n                }\r\n                else {\r\n                    // Rolling back transparency because depthTest doesn't work with it\r\n                    object.material.transparent = false;\r\n                    object.material.opacity = 1;\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Change the scale of Jets.\r\n     * @param value Percentage factor by which the Jets are to be scaled.\r\n     */\r\n    SceneManager.prototype.scaleJets = function (value) {\r\n        var jets = this.scene.getObjectByName('Jets');\r\n        value /= 100;\r\n        jets.traverse(function (objectChild) {\r\n            if (objectChild.name === 'Jet') {\r\n                var previousScale = objectChild.scale.x;\r\n                objectChild.scale.setScalar(value);\r\n                // Restoring to original position and then moving again with the current value.\r\n                objectChild.position.divideScalar(previousScale).multiplyScalar(value);\r\n            }\r\n        });\r\n    };\r\n    /** Object group ID containing event data. */\r\n    SceneManager.EVENT_DATA_ID = 'EventData';\r\n    /** Object group ID containing detector geometries. */\r\n    SceneManager.GEOMETRIES_ID = 'Geometries';\r\n    return SceneManager;\r\n}());\r\nexport { SceneManager };\r\n//# sourceMappingURL=scene-manager.js.map","import { SceneManager } from \"./scene-manager\";\r\nimport { TubeBufferGeometry, BufferGeometry, Vector3, Color, MeshBasicMaterial, Mesh, SphereBufferGeometry, Sphere, BufferAttribute, SphereGeometry, Plane, Group } from \"three\";\r\nimport * as TWEEN from \"@tweenjs/tween.js\";\r\n/**\r\n * Manager for managing animation related operations using three.js and tween.js.\r\n */\r\nvar AnimationsManager = /** @class */ (function () {\r\n    /**\r\n     * Constructor for the animation manager.\r\n     * @param scene Three.js scene containing all the objects and event data.\r\n     * @param activeCamera Currently active camera.\r\n     * @param rendererManager Manager for managing event display's renderer related functions.\r\n     */\r\n    function AnimationsManager(scene, activeCamera, rendererManager) {\r\n        this.scene = scene;\r\n        this.activeCamera = activeCamera;\r\n        this.rendererManager = rendererManager;\r\n        this.animateEvent = this.animateEvent.bind(this);\r\n        this.animateEventWithClipping = this.animateEventWithClipping.bind(this);\r\n    }\r\n    /**\r\n     * Get the camera tween for animating camera to a position.\r\n     * @param pos End position of the camera tween.\r\n     * @param duration Duration of the tween.\r\n     * @param easing Animation easing of the tween if any.\r\n     * @returns Tween object of the camera animation.\r\n     */\r\n    AnimationsManager.prototype.getCameraTween = function (pos, duration, easing) {\r\n        if (duration === void 0) { duration = 1000; }\r\n        var tween = new TWEEN.Tween(this.activeCamera.position).to({ x: pos[0], y: pos[1], z: pos[2] }, duration);\r\n        if (easing) {\r\n            tween.easing(easing);\r\n        }\r\n        return tween;\r\n    };\r\n    /**\r\n     * Animate the camera through the event scene.\r\n     * @param startPos Start position of the translation animation.\r\n     * @param tweenDuration Duration of each tween in the translation animation.\r\n     * @param onAnimationEnd Callback when the last animation ends.\r\n     */\r\n    AnimationsManager.prototype.animateThroughEvent = function (startPos, tweenDuration, onAnimationEnd) {\r\n        // Move to start\r\n        var start = this.getCameraTween(startPos, 1000, TWEEN.Easing.Cubic.Out);\r\n        // Move to position along the detector axis\r\n        var alongAxisPosition = [0, 0, startPos[2]];\r\n        var startXAxis = this.getCameraTween(alongAxisPosition, tweenDuration);\r\n        var radius = 500;\r\n        var numOfSteps = 24;\r\n        var angle = 3 * Math.PI;\r\n        var step = angle / numOfSteps;\r\n        var rotationPositions = [];\r\n        for (var i = 1; i <= numOfSteps; i++) {\r\n            rotationPositions.push([\r\n                radius * Math.sin(step * i),\r\n                0,\r\n                radius * Math.cos(step * i) // z\r\n            ]);\r\n        }\r\n        // Go to origin\r\n        var rotateStart = this.getCameraTween([0, 0, radius], tweenDuration, TWEEN.Easing.Cubic.Out);\r\n        var rotate = rotateStart;\r\n        var rotationTime = tweenDuration * 4;\r\n        var singleRotationTime = rotationTime / numOfSteps;\r\n        // Rotating around the event\r\n        for (var _i = 0, rotationPositions_1 = rotationPositions; _i < rotationPositions_1.length; _i++) {\r\n            var pos = rotationPositions_1[_i];\r\n            var animation = this.getCameraTween(pos, singleRotationTime);\r\n            rotate.chain(animation);\r\n            rotate = animation;\r\n        }\r\n        // Go to the end position and then back to the starting point\r\n        var endPos = [0, 0, -startPos[2]];\r\n        var end = this.getCameraTween(endPos, tweenDuration, TWEEN.Easing.Cubic.In);\r\n        var startClone = this.getCameraTween(startPos, tweenDuration, TWEEN.Easing.Cubic.Out);\r\n        startClone.onComplete(function () { return onAnimationEnd === null || onAnimationEnd === void 0 ? void 0 : onAnimationEnd(); });\r\n        startClone.delay(500);\r\n        start.chain(startXAxis);\r\n        startXAxis.chain(rotateStart);\r\n        rotate.chain(end);\r\n        end.chain(startClone);\r\n        start.start();\r\n    };\r\n    /**\r\n     * Animate the propagation and generation of event data.\r\n     * @param tweenDuration Duration of the animation tween.\r\n     * @param onEnd Callback when all animations have ended.\r\n     * @param onAnimationStart Callback when the first animation starts.\r\n     */\r\n    AnimationsManager.prototype.animateEvent = function (tweenDuration, onEnd, onAnimationStart) {\r\n        var _this = this;\r\n        var extraAnimationSphereDuration = tweenDuration * 0.25;\r\n        tweenDuration *= 0.75;\r\n        var eventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\r\n        var animationSphere = new Sphere(new Vector3(), 0);\r\n        var objectsToAnimateWithSphere = [];\r\n        var allTweens = [];\r\n        // Traverse over all event data\r\n        eventData.traverse(function (eventObject) {\r\n            var _a, _b, _c;\r\n            if (eventObject.geometry) {\r\n                // Animation for extrapolating tracks without changing scale\r\n                if (eventObject.name === 'Track') {\r\n                    // Check if geometry drawRange count exists\r\n                    var geometryPosCount = (_c = (_b = (_a = eventObject.geometry) === null || _a === void 0 ? void 0 : _a.attributes) === null || _b === void 0 ? void 0 : _b.position) === null || _c === void 0 ? void 0 : _c.count;\r\n                    if (geometryPosCount) {\r\n                        // WORKAROUND\r\n                        // Changing position count for TubeBufferGeometry because\r\n                        // what we get is not the actual and it has Infinity drawRange count\r\n                        if (eventObject.geometry instanceof TubeBufferGeometry) {\r\n                            geometryPosCount *= 6;\r\n                        }\r\n                        if (eventObject.geometry instanceof BufferGeometry) {\r\n                            var oldDrawRangeCount_1 = eventObject.geometry.drawRange.count;\r\n                            eventObject.geometry.setDrawRange(0, 0);\r\n                            var eventObjectTween = new TWEEN.Tween(eventObject.geometry.drawRange).to({\r\n                                count: geometryPosCount\r\n                            }, tweenDuration);\r\n                            eventObjectTween.onComplete(function () {\r\n                                eventObject.geometry.drawRange.count = oldDrawRangeCount_1;\r\n                            });\r\n                            allTweens.push(eventObjectTween);\r\n                        }\r\n                    }\r\n                }\r\n                // Animation for scaling out objects with or without position\r\n                else if (eventObject.name === 'Jet') {\r\n                    var scaleTween = new TWEEN.Tween({\r\n                        x: 0.01,\r\n                        y: 0.01,\r\n                        z: 0.01\r\n                    }).to({\r\n                        x: eventObject.scale.x,\r\n                        y: eventObject.scale.y,\r\n                        z: eventObject.scale.z\r\n                    }, tweenDuration);\r\n                    // Manually updating scale since we need to change position\r\n                    scaleTween.onUpdate(function (updatedScale) {\r\n                        var previousScale = eventObject.scale.x;\r\n                        eventObject.scale.setScalar(updatedScale.x);\r\n                        // Restoring to original position and then moving again with the current value\r\n                        eventObject.position.divideScalar(previousScale)\r\n                            .multiplyScalar(updatedScale.x);\r\n                    });\r\n                    allTweens.push(scaleTween);\r\n                }\r\n                else {\r\n                    var hasPosition = !eventObject.position.equals(new Vector3(0, 0, 0));\r\n                    var position = hasPosition\r\n                        ? eventObject.position\r\n                        : eventObject.geometry.boundingSphere.center;\r\n                    // Edit geometry for hits\r\n                    if (eventObject.name === 'Hit') {\r\n                        position = Array.from(eventObject.geometry.attributes['position'].array);\r\n                        eventObject.geometry.deleteAttribute('position');\r\n                        eventObject.geometry.computeBoundingSphere();\r\n                    }\r\n                    else {\r\n                        // Making the object invisible and will make visible\r\n                        // once the animation sphere reaches the object\r\n                        eventObject.visible = false;\r\n                    }\r\n                    objectsToAnimateWithSphere.push({\r\n                        eventObject: eventObject,\r\n                        position: position\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        // Tween for the animation sphere\r\n        var animationSphereTween = new TWEEN.Tween(animationSphere)\r\n            .to({ radius: 3000 }, tweenDuration);\r\n        var onAnimationSphereUpdate = function (updateAnimationSphere) {\r\n            objectsToAnimateWithSphere.forEach(function (obj) {\r\n                if (obj.eventObject.name === 'Hit') {\r\n                    var geometry = obj.eventObject.geometry;\r\n                    var hitsPositions = _this.getHitsPositions(obj.position);\r\n                    var reachedHits = hitsPositions\r\n                        .filter(function (hitPosition) { return updateAnimationSphere\r\n                        .containsPoint(new Vector3().fromArray(hitPosition)); });\r\n                    if (reachedHits.length > 0) {\r\n                        geometry.setAttribute('position', new BufferAttribute(new Float32Array([].concat.apply([], reachedHits)), 3));\r\n                        geometry.computeBoundingSphere();\r\n                    }\r\n                }\r\n                else if (updateAnimationSphere.containsPoint(obj.position)) {\r\n                    obj.eventObject.visible = true;\r\n                }\r\n            });\r\n        };\r\n        animationSphereTween.onUpdate(onAnimationSphereUpdate);\r\n        // Animation sphere tween after covering the tracks\r\n        var animationSphereTweenClone = new TWEEN.Tween(animationSphere)\r\n            .to({ radius: 10000 }, extraAnimationSphereDuration);\r\n        animationSphereTweenClone.onUpdate(onAnimationSphereUpdate);\r\n        animationSphereTween.chain(animationSphereTweenClone);\r\n        allTweens.push(animationSphereTween);\r\n        // Call onAnimationStart when the first tween starts\r\n        allTweens[0].onStart(function () { return onAnimationStart === null || onAnimationStart === void 0 ? void 0 : onAnimationStart(); });\r\n        // Start all tweens\r\n        for (var _i = 0, allTweens_1 = allTweens; _i < allTweens_1.length; _i++) {\r\n            var tween = allTweens_1[_i];\r\n            tween.easing(TWEEN.Easing.Quartic.Out).start();\r\n        }\r\n        // Call onEnd when the last tween completes\r\n        animationSphereTweenClone.onComplete(function () {\r\n            // Restore all remaining event data items\r\n            onAnimationSphereUpdate(new Sphere(new Vector3(), Infinity));\r\n            onEnd === null || onEnd === void 0 ? void 0 : onEnd();\r\n        });\r\n    };\r\n    /**\r\n     * Animate the propagation and generation of event data using clipping planes.\r\n     * @param tweenDuration Duration of the animation tween.\r\n     * @param onEnd Function to call when all animations have ended.\r\n     * @param onAnimationStart Callback when the first animation starts.\r\n     * @param clippingConstant Constant for the clipping planes for distance from the origin.\r\n     */\r\n    AnimationsManager.prototype.animateEventWithClipping = function (tweenDuration, onEnd, onAnimationStart, clippingConstant) {\r\n        var _this = this;\r\n        if (clippingConstant === void 0) { clippingConstant = 11000; }\r\n        var allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\r\n        // Sphere to get spherical set of clipping planes from\r\n        var sphere = new SphereGeometry(1, 8, 8);\r\n        // Clipping planes for animation\r\n        var animationClipPlanes = [];\r\n        // Get clipping planes from the verticies of sphere\r\n        for (var _i = 0, _a = sphere.vertices; _i < _a.length; _i++) {\r\n            var vertice = _a[_i];\r\n            animationClipPlanes.push(new Plane(vertice, 0));\r\n        }\r\n        // Save the previous clipping setting of the renderer\r\n        var prevLocalClipping = this.rendererManager.getMainRenderer().localClippingEnabled;\r\n        if (!prevLocalClipping) {\r\n            this.rendererManager.setLocalClippingEnabled(true);\r\n        }\r\n        // Apply clipping planes to all the event data objects' material\r\n        allEventData.traverse(function (eventObject) {\r\n            if (eventObject.geometry && eventObject.material) {\r\n                eventObject.material.clippingPlanes = animationClipPlanes;\r\n            }\r\n        });\r\n        var allTweens = [];\r\n        // Create tweens for the animation clipping planes\r\n        for (var _b = 0, animationClipPlanes_1 = animationClipPlanes; _b < animationClipPlanes_1.length; _b++) {\r\n            var animationClipPlane = animationClipPlanes_1[_b];\r\n            animationClipPlane.constant = 0;\r\n            var tween = new TWEEN.Tween(animationClipPlane)\r\n                .to({ constant: clippingConstant }, tweenDuration);\r\n            allTweens.push(tween);\r\n        }\r\n        allTweens[0].onStart(function () { return onAnimationStart === null || onAnimationStart === void 0 ? void 0 : onAnimationStart(); });\r\n        // Start all the tweens\r\n        for (var _c = 0, allTweens_2 = allTweens; _c < allTweens_2.length; _c++) {\r\n            var tween = allTweens_2[_c];\r\n            tween.start();\r\n        }\r\n        allTweens[allTweens.length - 1].onComplete(function () {\r\n            // Revert local clipping of the renderer\r\n            if (!prevLocalClipping) {\r\n                _this.rendererManager.getMainRenderer().localClippingEnabled = prevLocalClipping /* false */;\r\n            }\r\n            // Remove the applied clipping planes from the event data objects\r\n            allEventData.traverse(function (eventObject) {\r\n                if (eventObject.geometry && eventObject.material) {\r\n                    eventObject.material.clippingPlanes = null;\r\n                }\r\n            });\r\n            onEnd === null || onEnd === void 0 ? void 0 : onEnd();\r\n        });\r\n    };\r\n    /**\r\n     * Animate the collision of two particles.\r\n     * @param tweenDuration Duration of the particle collision animation tween.\r\n     * @param particleSize Size of the particles.\r\n     * @param distanceFromOrigin Distance of the particles (along z-axes) from the origin.\r\n     * @param particleColor Color of the particles.\r\n     * @param onEnd Callback to call when the particle collision ends.\r\n     */\r\n    AnimationsManager.prototype.collideParticles = function (tweenDuration, particleSize, distanceFromOrigin, particleColor, onEnd) {\r\n        var _a;\r\n        var _this = this;\r\n        if (particleSize === void 0) { particleSize = 10; }\r\n        if (distanceFromOrigin === void 0) { distanceFromOrigin = 5000; }\r\n        if (particleColor === void 0) { particleColor = new Color(0xffffff); }\r\n        var particleGeometry = new SphereBufferGeometry(particleSize, 32, 32);\r\n        var particleMaterial = new MeshBasicMaterial({\r\n            color: particleColor,\r\n            transparent: true,\r\n            opacity: 0\r\n        });\r\n        var particle1 = new Mesh(particleGeometry, particleMaterial);\r\n        var particle2 = particle1.clone();\r\n        particle1.position.setZ(distanceFromOrigin);\r\n        particle2.position.setZ(-distanceFromOrigin);\r\n        var particles = [particle1, particle2];\r\n        (_a = this.scene).add.apply(_a, particles);\r\n        var particleTweens = [];\r\n        for (var _i = 0, particles_1 = particles; _i < particles_1.length; _i++) {\r\n            var particle = particles_1[_i];\r\n            new TWEEN.Tween(particle.material).to({\r\n                opacity: 1\r\n            }, 300).start();\r\n            var particleToOrigin = new TWEEN.Tween(particle.position).to({\r\n                z: 0\r\n            }, tweenDuration).start();\r\n            particleTweens.push(particleToOrigin);\r\n        }\r\n        particleTweens[0].onComplete(function () {\r\n            var _a;\r\n            (_a = _this.scene).remove.apply(_a, particles);\r\n            onEnd === null || onEnd === void 0 ? void 0 : onEnd();\r\n        });\r\n    };\r\n    /**\r\n     * Animate the propagation and generation of event data with particle collison.\r\n     * @param animationFunction Animation function to call after collision.\r\n     * @param tweenDuration Duration of the animation tween.\r\n     * @param onEnd Function to call when all animations have ended.\r\n     */\r\n    AnimationsManager.prototype.animateWithCollision = function (animationFunction, tweenDuration, onEnd) {\r\n        var _a, _b, _c;\r\n        var allEventData = this.scene.getObjectByName(SceneManager.EVENT_DATA_ID);\r\n        // Get the color of the first track to use for colliding particles\r\n        var track = allEventData.getObjectByName('Track');\r\n        var trackColor;\r\n        if (track instanceof Group) {\r\n            trackColor = (_b = (_a = track.children[0]) === null || _a === void 0 ? void 0 : _a.material) === null || _b === void 0 ? void 0 : _b.color;\r\n        }\r\n        else {\r\n            trackColor = (_c = track) === null || _c === void 0 ? void 0 : _c.material.color;\r\n        }\r\n        // Hide event data to show particles collision\r\n        if (allEventData) {\r\n            allEventData.visible = false;\r\n        }\r\n        this.collideParticles(1500, 30, 5000, trackColor, function () {\r\n            animationFunction(tweenDuration, onEnd, function () {\r\n                if (allEventData) {\r\n                    allEventData.visible = true;\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Animate the propagation and generation of event data with particle collison.\r\n     * @param tweenDuration Duration of the animation tween.\r\n     * @param onEnd Function to call when all animations have ended.\r\n     */\r\n    AnimationsManager.prototype.animateEventWithCollision = function (tweenDuration, onEnd) {\r\n        this.animateWithCollision(this.animateEvent, tweenDuration, onEnd);\r\n    };\r\n    /**\r\n     * Animate the propagation and generation of event data\r\n     * using clipping planes after particle collison.\r\n     * @param tweenDuration Duration of the animation tween.\r\n     * @param onEnd Function to call when all animations have ended.\r\n     */\r\n    AnimationsManager.prototype.animateClippingWithCollision = function (tweenDuration, onEnd) {\r\n        this.animateWithCollision(this.animateEventWithClipping, tweenDuration, onEnd);\r\n    };\r\n    /**\r\n     * Get the positions of hits in a multidimensional array\r\n     * from a single dimensional array.\r\n     * @param positions Positions of hits in a single dimensional array.\r\n     * @returns Positions of hits in a multidimensional array.\r\n     */\r\n    AnimationsManager.prototype.getHitsPositions = function (positions) {\r\n        var hitsPositions = [];\r\n        for (var i = 0; i < positions.length; i += 3) {\r\n            hitsPositions.push(positions.slice(i, i + 3));\r\n        }\r\n        return hitsPositions;\r\n    };\r\n    return AnimationsManager;\r\n}());\r\nexport { AnimationsManager };\r\n//# sourceMappingURL=animations-manager.js.map","import { EffectComposer } from \"three/examples/jsm/postprocessing/EffectComposer\";\r\nimport { Vector2, NormalBlending } from \"three\";\r\nimport { RenderPass } from \"three/examples/jsm/postprocessing/RenderPass\";\r\nimport { OutlinePass } from \"three/examples/jsm/postprocessing/OutlinePass\";\r\n/**\r\n * Manager for managing three.js event display effects like outline pass and unreal bloom.\r\n */\r\nvar EffectsManager = /** @class */ (function () {\r\n    /**\r\n     * Constructor for the effects manager which manages effects and three.js passes.\r\n     * @param camera The camera inside the scene.\r\n     * @param scene The default scene used for event display.\r\n     * @param renderer The main renderer used by the event display.\r\n     */\r\n    function EffectsManager(camera, scene, renderer) {\r\n        this.composer = new EffectComposer(renderer);\r\n        this.camera = camera;\r\n        this.scene = scene;\r\n        this.defaultRenderPass = new RenderPass(this.scene, this.camera);\r\n        this.composer.addPass(this.defaultRenderPass);\r\n    }\r\n    /**\r\n     * Render the effects composer.\r\n     * @param camera The camera inside the scene.\r\n     * @param scene The default scene used for event display.\r\n     */\r\n    EffectsManager.prototype.render = function (camera, scene) {\r\n        if (this.composer) {\r\n            this.defaultRenderPass.camera = camera;\r\n            this.defaultRenderPass.scene = scene;\r\n            this.composer.render();\r\n        }\r\n    };\r\n    /**\r\n     * Initialize the outline pass for highlighting hovered over event display elements.\r\n     * @returns OutlinePass for highlighting hovered over event display elements.\r\n     */\r\n    EffectsManager.prototype.addOutlinePassForSelection = function () {\r\n        var outlinePass = new OutlinePass(new Vector2(window.innerWidth, window.innerHeight), this.scene, this.camera);\r\n        outlinePass.overlayMaterial.blending = NormalBlending;\r\n        outlinePass.visibleEdgeColor.set(0xffff66);\r\n        outlinePass.visibleEdgeColor.set(0xdf5330);\r\n        this.composer.addPass(outlinePass);\r\n        return outlinePass;\r\n    };\r\n    /**\r\n     * Remove a pass from the effect composer.\r\n     * @param pass Effect pass to be removed from the effect composer.\r\n     */\r\n    EffectsManager.prototype.removePass = function (pass) {\r\n        var passIndex = this.composer.passes.indexOf(pass);\r\n        this.composer.passes.splice(passIndex, 1);\r\n    };\r\n    return EffectsManager;\r\n}());\r\nexport { EffectsManager };\r\n//# sourceMappingURL=effects-manager.js.map","import { Group, Camera, Vector3 } from \"three\";\r\n// NOTE: This was created on 29/08/2020\r\n// It might get outdated given how WebXR is still a work in progress\r\n/**\r\n * VR manager for VR related operations.\r\n */\r\nvar VRManager = /** @class */ (function () {\r\n    function VRManager() {\r\n        var _this = this;\r\n        /** Currently active VR session. */\r\n        this.currentVRSession = null;\r\n        /**\r\n         * Callback for when the VR session is started.\r\n         * @param session The VR session.\r\n         */\r\n        this.onVRSessionStarted = function (session) {\r\n            session.addEventListener('end', _this.onVRSessionEnded);\r\n            _this.renderer.xr.setSession(session);\r\n            _this.currentVRSession = session;\r\n        };\r\n        /**\r\n         * Callback when the VR session ends.\r\n         */\r\n        this.onVRSessionEnded = function () {\r\n            var _a, _b;\r\n            (_a = _this.currentVRSession) === null || _a === void 0 ? void 0 : _a.removeEventListener('end', _this.onVRSessionEnded);\r\n            _this.currentVRSession = null;\r\n            (_b = _this.onSessionEnded) === null || _b === void 0 ? void 0 : _b.call(_this);\r\n        };\r\n    }\r\n    /**\r\n     * Set and configure the VR session.\r\n     * @param renderer Renderer to set the VR session for.\r\n     * @param onSessionEnded Callback to call when the VR session ends.\r\n     */\r\n    VRManager.prototype.setVRSession = function (renderer, onSessionEnded) {\r\n        var _a, _b, _c;\r\n        this.renderer = renderer;\r\n        this.onSessionEnded = onSessionEnded;\r\n        if ((_a = navigator) === null || _a === void 0 ? void 0 : _a.xr) {\r\n            var sessionInit = {\r\n                optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking']\r\n            };\r\n            (_c = (_b = navigator) === null || _b === void 0 ? void 0 : _b.xr) === null || _c === void 0 ? void 0 : _c.requestSession(VRManager.SESSION_TYPE, sessionInit).then(this.onVRSessionStarted);\r\n            this.setupVRControls();\r\n        }\r\n    };\r\n    /**\r\n     * End the current VR session.\r\n     */\r\n    VRManager.prototype.endVRSession = function () {\r\n        var _a;\r\n        (_a = this.currentVRSession) === null || _a === void 0 ? void 0 : _a.end();\r\n    };\r\n    /**\r\n     * Get the group containing the camera for VR.\r\n     * VR camera works by adding a Group with Camera to the scene.\r\n     * @param camera Camera which is to be cloned for VR use.\r\n     */\r\n    VRManager.prototype.getCameraGroup = function (camera) {\r\n        // Set up the camera position in the VR - Adding a group with camera does it\r\n        if (!this.cameraGroup) {\r\n            this.cameraGroup = new Group();\r\n        }\r\n        if (camera) {\r\n            this.vrCamera = new Camera().copy(camera);\r\n            this.vrCamera.name = 'VR_CAMERA';\r\n            this.vrCamera.far = 1000000;\r\n            this.cameraGroup.position.copy(this.vrCamera.position);\r\n            this.cameraGroup.add(this.vrCamera);\r\n        }\r\n        return this.cameraGroup;\r\n    };\r\n    /**\r\n     * Get the camera used by VR.\r\n     * @returns The camera used by VR.\r\n     */\r\n    VRManager.prototype.getVRCamera = function () {\r\n        return this.vrCamera;\r\n    };\r\n    /**\r\n     * Set up VR controls for moving around the event display.\r\n     */\r\n    VRManager.prototype.setupVRControls = function () {\r\n        var _this = this;\r\n        // Distance for a single step\r\n        var stepDistance = 30;\r\n        // Unit vector in camera direction\r\n        var direction = new Vector3();\r\n        // Interval ID for the movement interval\r\n        var intervalId;\r\n        // Get the controller\r\n        this.controller = this.renderer.xr.getController(0);\r\n        this.controller.addEventListener('selectstart', function () {\r\n            // Start movement in camera direction\r\n            intervalId = setInterval(function () {\r\n                _this.moveInDirection(direction, stepDistance);\r\n            }, 20);\r\n        });\r\n        this.controller.addEventListener('selectend', function () {\r\n            // Stop the movement\r\n            clearInterval(intervalId);\r\n        });\r\n    };\r\n    /**\r\n     * Move the camera in the given direction.\r\n     * @param direction Direction to move towards.\r\n     * @param stepDistance Distance to move by.\r\n     */\r\n    VRManager.prototype.moveInDirection = function (direction, stepDistance) {\r\n        // Get the direction the controller is facing\r\n        //! this.controller.getWorldDirection(direction);\r\n        var _a;\r\n        // Get direction the camera is facing\r\n        (_a = this.renderer.xr.getCamera(new Camera())) === null || _a === void 0 ? void 0 : _a.getWorldDirection(direction);\r\n        // Move the camera in the given direction\r\n        this.cameraGroup.position.addScaledVector(direction, stepDistance);\r\n        this.vrCamera.position.addScaledVector(direction, stepDistance);\r\n    };\r\n    /** Session type to use for VR. */\r\n    VRManager.SESSION_TYPE = 'immersive-vr';\r\n    return VRManager;\r\n}());\r\nexport { VRManager };\r\n//# sourceMappingURL=vr-manager.js.map","import * as TWEEN from '@tweenjs/tween.js';\r\nimport { Vector3, Plane, Quaternion, AmbientLight, DirectionalLight, AxesHelper } from 'three';\r\nimport { ControlsManager } from './controls-manager';\r\nimport { RendererManager } from './renderer-manager';\r\nimport { ExportManager } from './export-manager';\r\nimport { ImportManager } from './import-manager';\r\nimport { SelectionManager } from './selection-manager';\r\nimport { SceneManager } from './scene-manager';\r\nimport { AnimationsManager } from './animations-manager';\r\nimport { EffectsManager } from './effects-manager';\r\nimport { VRManager } from './vr-manager';\r\n/**\r\n * Service for all three.js related functions.\r\n */\r\nvar ThreeManager = /** @class */ (function () {\r\n    function ThreeManager() {\r\n        /** Scene export ignore list */\r\n        this.ignoreList = [\r\n            new AmbientLight().type,\r\n            new DirectionalLight().type,\r\n            new AxesHelper().type\r\n        ];\r\n        /** Clipping planes for clipping geometry */\r\n        this.clipPlanes = [\r\n            new Plane(new Vector3(0, 1, 0), 0),\r\n            new Plane(new Vector3(0, -1, 0), 0),\r\n            new Plane(new Vector3(0, 0, 1), -15000)\r\n        ];\r\n    }\r\n    /**\r\n     * Initializes the necessary three.js functionality.\r\n     * @param configuration Configuration to customize different aspects.\r\n     * @param infoLogger Service for logging data to the information panel.\r\n     */\r\n    ThreeManager.prototype.init = function (configuration, infoLogger) {\r\n        // Scene manager\r\n        this.sceneManager = new SceneManager(this.ignoreList);\r\n        // IO Managers\r\n        this.exportManager = new ExportManager();\r\n        this.importManager = new ImportManager(this.clipPlanes, SceneManager.EVENT_DATA_ID, SceneManager.GEOMETRIES_ID);\r\n        // Renderer manager\r\n        this.rendererManager = new RendererManager(configuration.elementId);\r\n        // Controls manager\r\n        this.controlsManager = new ControlsManager(this.rendererManager);\r\n        // Effects manager\r\n        this.effectsManager = new EffectsManager(this.controlsManager.getMainCamera(), this.sceneManager.getScene(), this.rendererManager.getMainRenderer());\r\n        // Animations manager\r\n        this.animationsManager = new AnimationsManager(this.sceneManager.getScene(), this.controlsManager.getActiveCamera(), this.rendererManager);\r\n        // VR manager\r\n        this.vrManager = new VRManager();\r\n        // Logger\r\n        this.infoLogger = infoLogger;\r\n        // Selection manager\r\n        this.getSelectionManager().init(this.controlsManager.getMainCamera(), this.sceneManager.getScene(), this.effectsManager, this.infoLogger);\r\n        // Customizing with configuration\r\n        this.setConfiguration(configuration);\r\n    };\r\n    /**\r\n     * Updates controls\r\n     */\r\n    ThreeManager.prototype.updateControls = function () {\r\n        this.controlsManager.getActiveControls().update();\r\n        this.controlsManager.updateSync();\r\n        TWEEN.update();\r\n    };\r\n    /**\r\n     * Render overlay renderer and effect composer, and update lights.\r\n     */\r\n    ThreeManager.prototype.render = function () {\r\n        this.rendererManager.render(this.sceneManager.getScene(), this.controlsManager);\r\n        this.effectsManager.render(this.controlsManager.getMainCamera(), this.sceneManager.getScene());\r\n        this.sceneManager.updateLights(this.controlsManager.getActiveCamera());\r\n    };\r\n    /**\r\n     * Minimally render without any post-processing.\r\n     */\r\n    ThreeManager.prototype.minimalRender = function () {\r\n        // Use the VR camera for rendering\r\n        this.rendererManager.getMainRenderer().render(this.sceneManager.getScene(), this.vrManager.getVRCamera());\r\n    };\r\n    /**\r\n     * Get the scene manager and create if it doesn't exist.\r\n     * @returns The scene manager for managing different aspects and elements of the scene.\r\n     */\r\n    ThreeManager.prototype.getSceneManager = function () {\r\n        if (!this.sceneManager) {\r\n            this.sceneManager = new SceneManager(this.ignoreList);\r\n        }\r\n        return this.sceneManager;\r\n    };\r\n    /**\r\n     * Sets controls to auto rotate.\r\n     * @param autoRotate If the controls are to be automatically rotated or not.\r\n     */\r\n    ThreeManager.prototype.autoRotate = function (autoRotate) {\r\n        this.controlsManager.getActiveControls().autoRotate = autoRotate;\r\n    };\r\n    /**\r\n     * Enables geometries to be clipped with clipping planes.\r\n     * @param clippingEnabled If the the geometry clipping is to be enabled or disabled.\r\n     */\r\n    ThreeManager.prototype.setClipping = function (clippingEnabled) {\r\n        this.rendererManager.setLocalClippingEnabled(clippingEnabled);\r\n    };\r\n    /**\r\n     * Rotates clipping planes.\r\n     * @param angle Angle to rotate the clipping planes.\r\n     */\r\n    ThreeManager.prototype.rotateClipping = function (angle) {\r\n        var q = new Quaternion();\r\n        q.setFromAxisAngle(new Vector3(0, 0, 1), (angle * Math.PI) / 180);\r\n        this.clipPlanes[0].normal.set(0, 1, 0).applyQuaternion(q);\r\n    };\r\n    /**\r\n     * Animates camera transform.\r\n     * @param cameraPosition End position.\r\n     * @param cameraTarget End target.\r\n     * @param duration Duration of an animation in seconds.\r\n     */\r\n    ThreeManager.prototype.animateCameraTransform = function (cameraPosition, cameraTarget, duration) {\r\n        this.animateCameraPosition(cameraPosition, duration);\r\n        this.animateCameraTarget(cameraTarget, duration);\r\n    };\r\n    /**\r\n     * Swaps cameras.\r\n     * @param useOrthographic Whether to use orthographic or perspective camera.\r\n     */\r\n    ThreeManager.prototype.swapCameras = function (useOrthographic) {\r\n        var cameraType;\r\n        if (useOrthographic) {\r\n            // perspective -> ortho\r\n            cameraType = 'OrthographicCamera';\r\n        }\r\n        else {\r\n            // ortho -> perspective\r\n            cameraType = 'PerspectiveCamera';\r\n        }\r\n        if (this.controlsManager.getMainCamera().type !== cameraType) {\r\n            this.controlsManager.swapControls();\r\n        }\r\n    };\r\n    // *************************************\r\n    // * Functions for loading geometries. *\r\n    // *************************************\r\n    /**\r\n     * Loads an OBJ (.obj) geometry from the given filename.\r\n     * @param filename Path to the geometry.\r\n     * @param name Name given to the geometry.\r\n     * @param color Color to initialize the geometry.\r\n     * @param doubleSided Renders both sides of the material.\r\n     * @param initiallyVisible Whether the geometry is initially visible or not.\r\n     */\r\n    ThreeManager.prototype.loadOBJGeometry = function (filename, name, color, doubleSided, initiallyVisible) {\r\n        if (initiallyVisible === void 0) { initiallyVisible = true; }\r\n        var geometries = this.sceneManager.getGeometries();\r\n        var callback = function (object) {\r\n            object.visible = initiallyVisible;\r\n            geometries.add(object);\r\n        };\r\n        this.importManager.loadOBJGeometry(callback, filename, name, color, doubleSided);\r\n    };\r\n    /**\r\n     * Loads a GLTF (.gltf) scene/geometry from the given URL.\r\n     * @param sceneUrl URL to the GLTF (.gltf) file.\r\n     * @param name Name of the loaded scene/geometry.\r\n     * @param scale Scale of the geometry.\r\n     * @param initiallyVisible Whether the geometry is initially visible or not.\r\n     */\r\n    ThreeManager.prototype.loadGLTFGeometry = function (sceneUrl, name, scale, initiallyVisible) {\r\n        if (initiallyVisible === void 0) { initiallyVisible = true; }\r\n        var geometries = this.sceneManager.getGeometries();\r\n        var callback = function (geometry) {\r\n            geometry.visible = initiallyVisible;\r\n            geometries.add(geometry);\r\n        };\r\n        this.importManager.loadGLTFGeometry(sceneUrl, name, callback, scale);\r\n    };\r\n    /**\r\n     * Parses and loads a geometry in OBJ (.obj) format.\r\n     * @param geometry Geometry in OBJ (.obj) format.\r\n     * @param name Name given to the geometry.\r\n     * @param initiallyVisible Whether the geometry is initially visible or not.\r\n     */\r\n    ThreeManager.prototype.parseOBJGeometry = function (geometry, name, initiallyVisible) {\r\n        if (initiallyVisible === void 0) { initiallyVisible = true; }\r\n        var geometries = this.sceneManager.getGeometries();\r\n        var object = this.importManager.parseOBJGeometry(geometry, name);\r\n        object.visible = initiallyVisible;\r\n        geometries.add(object);\r\n    };\r\n    /**\r\n     * Parses and loads a geometry in GLTF (.gltf) format.\r\n     * @param geometry Geometry in GLTF (.gltf) format.\r\n     */\r\n    ThreeManager.prototype.parseGLTFGeometry = function (geometry) {\r\n        var _this = this;\r\n        var callback = function (geometries, eventData) {\r\n            _this.sceneManager.getScene().add(geometries);\r\n            _this.sceneManager.getScene().add(eventData);\r\n        };\r\n        this.importManager.parseGLTFGeometry(geometry, callback);\r\n    };\r\n    /**\r\n     * Loads geometries from JSON.\r\n     * @param json JSON or URL to JSON file of the geometry.\r\n     * @param name Name of the geometry or group of geometries.\r\n     * @param scale Scale of the geometry.\r\n     * @param doubleSided Renders both sides of the material.\r\n     * @param initiallyVisible Whether the geometry is initially visible or not.\r\n     */\r\n    ThreeManager.prototype.loadJSONGeometry = function (json, name, scale, doubleSided, initiallyVisible) {\r\n        if (initiallyVisible === void 0) { initiallyVisible = true; }\r\n        var geometries = this.sceneManager.getGeometries();\r\n        var callback = function (geometry) {\r\n            geometry.visible = initiallyVisible;\r\n            geometries.add(geometry);\r\n        };\r\n        this.importManager.loadJSONGeometry(json, name, callback, scale, doubleSided);\r\n    };\r\n    /**\r\n     * Exports scene to OBJ file format.\r\n     */\r\n    ThreeManager.prototype.exportSceneToOBJ = function () {\r\n        var scene = this.sceneManager.getCleanScene();\r\n        this.exportManager.exportSceneToOBJ(scene);\r\n    };\r\n    /**\r\n     * Exports scene as phoenix format, allowing to\r\n     * load it later and recover the saved configuration.\r\n     */\r\n    ThreeManager.prototype.exportPhoenixScene = function () {\r\n        var scene = this.sceneManager.getCleanScene();\r\n        this.exportManager.exportPhoenixScene(scene, this.sceneManager.getEventData(), this.sceneManager.getGeometries());\r\n    };\r\n    /**\r\n     * Fixes the camera position of the overlay view.\r\n     * @param fixed Whether the overlay view is to be fixed or not.\r\n     */\r\n    ThreeManager.prototype.fixOverlayView = function (fixed) {\r\n        this.rendererManager.setFixOverlay(fixed);\r\n    };\r\n    /**\r\n     * Initializes the object which will show information of the selected geometry/event data.\r\n     * @param selectedObject Object to display the data.\r\n     */\r\n    ThreeManager.prototype.setSelectedObjectDisplay = function (selectedObject) {\r\n        this.getSelectionManager().setSelectedObject(selectedObject);\r\n    };\r\n    /**\r\n     * Set event data depthTest to enable or disable if event data should show on top of geometry.\r\n     * @param value A boolean to specify if depthTest is to be enabled or disabled.\r\n     */\r\n    ThreeManager.prototype.eventDataDepthTest = function (value) {\r\n        this.sceneManager.eventDataDepthTest(value);\r\n    };\r\n    /**\r\n     * Toggles the ability of selecting geometries/event data by clicking on the screen.\r\n     * @param enable Value to enable or disable the functionality.\r\n     */\r\n    ThreeManager.prototype.enableSelecting = function (enable) {\r\n        this.getSelectionManager().setSelecting(enable);\r\n    };\r\n    /**\r\n     * Clears event data of the scene.\r\n     */\r\n    ThreeManager.prototype.clearEventData = function () {\r\n        this.sceneManager.clearEventData();\r\n    };\r\n    /**\r\n     * Adds group of an event data type to the main group containing event data.\r\n     * @param typeName Type of event data.\r\n     * @returns Three.js group containing the type of event data.\r\n     */\r\n    ThreeManager.prototype.addEventDataTypeGroup = function (typeName) {\r\n        return this.sceneManager.addEventDataTypeGroup(typeName);\r\n    };\r\n    /**\r\n     * Sets the renderer to be used to render the event display on the overlayed canvas.\r\n     * @param overlayCanvas An HTML canvas on which the overlay renderer is to be set.\r\n     */\r\n    ThreeManager.prototype.setOverlayRenderer = function (overlayCanvas) {\r\n        if (this.rendererManager) {\r\n            this.rendererManager.setOverlayRenderer(overlayCanvas);\r\n        }\r\n    };\r\n    /**\r\n     * Zoom all the cameras by a specific zoom factor.\r\n     * The factor may either be greater (zoom in) or smaller (zoom out) than 1.\r\n     * @param zoomFactor The factor to zoom by.\r\n     * @param zoomTime The time it takes for a zoom animation to complete.\r\n     */\r\n    ThreeManager.prototype.zoomTo = function (zoomFactor, zoomTime) {\r\n        this.controlsManager.zoomTo(zoomFactor, zoomTime);\r\n    };\r\n    // ********************************\r\n    // * Private auxiliary functions. *\r\n    // ********************************\r\n    /**\r\n     * Sets different parameters according to the configuration.\r\n     * @param configuration Configuration object.\r\n     */\r\n    ThreeManager.prototype.setConfiguration = function (configuration) {\r\n    };\r\n    /**\r\n     * Get the selection manager.\r\n     * @returns Selection manager responsible for managing selection of 3D objects.\r\n     */\r\n    ThreeManager.prototype.getSelectionManager = function () {\r\n        if (!this.selectionManager) {\r\n            this.selectionManager = new SelectionManager();\r\n        }\r\n        return this.selectionManager;\r\n    };\r\n    /**\r\n     * Animates camera position.\r\n     * @param cameraPosition End position.\r\n     * @param duration Duration of an animation in seconds.\r\n     */\r\n    ThreeManager.prototype.animateCameraPosition = function (cameraPosition, duration) {\r\n        var posAnimation = new TWEEN.Tween(this.controlsManager.getActiveCamera().position);\r\n        posAnimation.to({\r\n            x: cameraPosition[0],\r\n            y: cameraPosition[1],\r\n            z: cameraPosition[2]\r\n        }, duration);\r\n        posAnimation.start();\r\n    };\r\n    /**\r\n     * Animates camera target.\r\n     * @param cameraTarget End target.\r\n     * @param duration Duration of an animation in seconds.\r\n     */\r\n    ThreeManager.prototype.animateCameraTarget = function (cameraTarget, duration) {\r\n        var rotAnimation = new TWEEN.Tween(this.controlsManager.getActiveControls().target);\r\n        rotAnimation.to({\r\n            x: cameraTarget[0],\r\n            y: cameraTarget[1],\r\n            z: cameraTarget[2]\r\n        }, duration);\r\n        rotAnimation.start();\r\n    };\r\n    /**\r\n     * Get the uuid of the currently selected object.\r\n     * @returns uuid of the currently selected object.\r\n     */\r\n    ThreeManager.prototype.getActiveObjectId = function () {\r\n        return this.getSelectionManager().getActiveObjectId();\r\n    };\r\n    /**\r\n     * Move the camera to look at the object with the given uuid.\r\n     * @param uuid uuid of the object.\r\n     */\r\n    ThreeManager.prototype.lookAtObject = function (uuid) {\r\n        this.controlsManager.lookAtObject(uuid, this.getSceneManager().getEventData());\r\n    };\r\n    /**\r\n     * Highlight the object with the given uuid by giving it an outline.\r\n     * @param uuid uuid of the object.\r\n     */\r\n    ThreeManager.prototype.highlightObject = function (uuid) {\r\n        this.selectionManager.highlightObject(uuid, this.getSceneManager().getEventData());\r\n    };\r\n    /**\r\n     * Enable keyboard controls for some Three service operations.\r\n     */\r\n    ThreeManager.prototype.enableKeyboardControls = function () {\r\n        var _this = this;\r\n        document.addEventListener(\"keydown\", function (e) {\r\n            if (e.shiftKey) {\r\n                switch (e.code) {\r\n                    case 'KeyR': // shift + \"r\"\r\n                        _this.autoRotate(!_this.controlsManager.getActiveControls().autoRotate);\r\n                        break;\r\n                    case 'Equal': // shift + \"+\"\r\n                        _this.zoomTo(1 / 1.2, 100);\r\n                        break;\r\n                    case 'Minus': // shift + \"-\"\r\n                        _this.zoomTo(1.2, 100);\r\n                        break;\r\n                    case 'KeyC': // shift + \"c\"\r\n                        _this.setClipping(!_this.rendererManager.getLocalClipping());\r\n                        if (_this.rendererManager.getLocalClipping()) {\r\n                            _this.rotateClipping(180);\r\n                        }\r\n                        break;\r\n                    case 'KeyV': // shift + \"v\"\r\n                        var isOrthographicView = _this.controlsManager.getMainCamera()\r\n                            .type === 'OrthographicCamera';\r\n                        _this.swapCameras(!isOrthographicView);\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Animate the camera through the event scene.\r\n     * @param startPos Start position of the translation animation.\r\n     * @param tweenDuration Duration of each tween in the translation animation.\r\n     * @param onAnimationEnd Callback when the last animation ends.\r\n     */\r\n    ThreeManager.prototype.animateThroughEvent = function (startPos, tweenDuration, onAnimationEnd) {\r\n        this.animationsManager\r\n            .animateThroughEvent(startPos, tweenDuration, onAnimationEnd);\r\n    };\r\n    /**\r\n     * Animate the propagation and generation of event data with particle collison.\r\n     * @param tweenDuration Duration of the animation tween.\r\n     * @param onEnd Function to call when all animations have ended.\r\n     */\r\n    ThreeManager.prototype.animateEventWithCollision = function (tweenDuration, onEnd) {\r\n        this.animationsManager.animateEventWithCollision(tweenDuration, onEnd);\r\n    };\r\n    /**\r\n     * Animate the propagation and generation of event data\r\n     * using clipping planes after particle collison.\r\n     * @param tweenDuration Duration of the animation tween.\r\n     * @param onEnd Function to call when all animations have ended.\r\n     */\r\n    ThreeManager.prototype.animateClippingWithCollision = function (tweenDuration, onEnd) {\r\n        this.animationsManager.animateClippingWithCollision(tweenDuration, onEnd);\r\n    };\r\n    /**\r\n     * Initialize the VR session.\r\n     * @param onSessionEnded Callback when the VR session ends.\r\n     */\r\n    ThreeManager.prototype.initVRSession = function (onSessionEnded) {\r\n        var _this = this;\r\n        // Set up the camera position in the VR - Adding a group with camera does it\r\n        var cameraGroup = this.vrManager\r\n            .getCameraGroup(this.controlsManager.getMainCamera());\r\n        this.sceneManager.getScene().add(cameraGroup);\r\n        // Set up main renderer for VR\r\n        var mainRenderer = this.rendererManager.getMainRenderer();\r\n        mainRenderer.xr.enabled = true;\r\n        // Set up the animation loop\r\n        var animate = function () {\r\n            _this.minimalRender();\r\n        };\r\n        mainRenderer.setAnimationLoop(animate);\r\n        // Set and initialize the VR session\r\n        this.vrManager.setVRSession(mainRenderer, onSessionEnded);\r\n    };\r\n    /**\r\n     * End the current VR session.\r\n     */\r\n    ThreeManager.prototype.endVRSession = function () {\r\n        this.sceneManager.getScene().remove(this.vrManager.getCameraGroup());\r\n        var mainRenderer = this.rendererManager.getMainRenderer();\r\n        mainRenderer.xr.enabled = false;\r\n        // Remove the animation loop\r\n        mainRenderer.setAnimationLoop(null);\r\n        this.vrManager.endVRSession();\r\n    };\r\n    return ThreeManager;\r\n}());\r\nexport { ThreeManager };\r\n//# sourceMappingURL=index.js.map","import * as Stats from 'stats-js';\r\nimport * as dat from 'dat.gui';\r\nimport { SceneManager } from '../three/scene-manager';\r\n/**\r\n * Manager for UI related operations including the dat.GUI menu, stats-js and theme settings.\r\n */\r\nvar UIManager = /** @class */ (function () {\r\n    /**\r\n     * Constructor for the UI manager.\r\n     * @param three Three manager to perform three.js related operations.\r\n     */\r\n    function UIManager(three) {\r\n        this.three = three;\r\n        /** Options for the dat.GUI menu. */\r\n        this.guiParameters = {\r\n            rotate: undefined,\r\n            axis: undefined,\r\n            lowRes: undefined,\r\n            eventData: undefined,\r\n            geometries: undefined\r\n        };\r\n        /** If the geometry folder is added or not */\r\n        this.geomFolderAdded = false;\r\n        /** Max changeable position of an object along the x-axis. */\r\n        this.maxPositionX = 4000;\r\n        /** Max changeable position of an object along the y-axis. */\r\n        this.maxPositionY = 4000;\r\n        /** Max changeable position of an object along the z-axis. */\r\n        this.maxPositionZ = 4000;\r\n    }\r\n    /**\r\n     * Show/load the UI including stats, the dat.GUI menu and theme.\r\n     * @param configuration Configuration options for preset views and event data loader.\r\n     */\r\n    UIManager.prototype.showUI = function (configuration) {\r\n        // Clear the existing UI\r\n        this.clearUI();\r\n        // Set the configuration\r\n        this.configuration = configuration;\r\n        // Shows a panel on screen with information about the performance (fps).\r\n        this.showStats(configuration.elementId);\r\n        // Shows the menu that contains the options to interact with the scene.\r\n        if (configuration.enableDatGUIMenu) {\r\n            this.showDatGUIMenu(configuration.elementId);\r\n        }\r\n        // Detect UI color scheme\r\n        this.detectColorScheme();\r\n        // Set root node of phoenix menu\r\n        if (configuration.phoenixMenuRoot) {\r\n            this.showPhoenixMenu(configuration.getPhoenixMenuRoot());\r\n        }\r\n    };\r\n    /**\r\n     * Show stats including FPS, milliseconds to render a frame, allocated memory etc.\r\n     * @param elementId ID of the wrapper element.\r\n     */\r\n    UIManager.prototype.showStats = function (elementId) {\r\n        this.stats = Stats();\r\n        this.stats.showPanel(0);\r\n        this.stats.dom.className = 'ui-element';\r\n        this.stats.domElement.style.cssText = 'position: absolute; left: 0px; cursor: pointer; opacity: 0.9; z-index: 10; bottom: 0px;';\r\n        var canvas = document.getElementById(elementId);\r\n        if (canvas == null) {\r\n            canvas = document.body;\r\n        }\r\n        canvas.appendChild(this.stats.dom);\r\n    };\r\n    /**\r\n     * Update the UI by updating stats for each frame.\r\n     */\r\n    UIManager.prototype.updateUI = function () {\r\n        this.stats.update();\r\n    };\r\n    /**\r\n     * Show dat.GUI menu with different controls related to detector geometry and event data.\r\n     * @param elementId ID of the wrapper element.\r\n     */\r\n    UIManager.prototype.showDatGUIMenu = function (elementId) {\r\n        this.hasDatGUIMenu = true;\r\n        this.gui = new dat.GUI();\r\n        this.gui.domElement.id = 'gui';\r\n        this.gui.domElement.style.cssText = 'position: absolute; right: 0; top: 2rem; z-index: 11;';\r\n        this.canvas = document.getElementById(elementId);\r\n        if (this.canvas == null) {\r\n            this.canvas = document.body;\r\n        }\r\n        this.canvas.appendChild(this.gui.domElement);\r\n        this.geomFolder = null;\r\n        this.eventFolder = null;\r\n    };\r\n    /**\r\n     * Show phoenix menu with different controls related to detector geometry and event data.\r\n     * @param phoenixMenuRoot Root node of the phoenix menu.\r\n     */\r\n    UIManager.prototype.showPhoenixMenu = function (phoenixMenuRoot) {\r\n        this.setPhoenixMenu(phoenixMenuRoot);\r\n        this.hasPhoenixMenu = true;\r\n        this.geomFolderPM = null;\r\n        this.eventFolderPM = null;\r\n    };\r\n    /**\r\n     * Clear the UI by removing the dat.GUI and phoenix menu(s).\r\n     */\r\n    UIManager.prototype.clearUI = function () {\r\n        this.clearDatGUI();\r\n        this.clearPhoenixMenu();\r\n    };\r\n    /**\r\n     * Clear the dat.GUI menu.\r\n     */\r\n    UIManager.prototype.clearDatGUI = function () {\r\n        var gui = document.getElementById('gui');\r\n        if (gui != null) {\r\n            gui.remove();\r\n        }\r\n        this.geomFolder = null;\r\n        this.geomFolderAdded = false;\r\n        this.hasDatGUIMenu = false;\r\n    };\r\n    /**\r\n     * Clear the phoenix menu.\r\n     */\r\n    UIManager.prototype.clearPhoenixMenu = function () {\r\n        if (this.phoenixMenu) {\r\n            this.phoenixMenu.truncate();\r\n            this.phoenixMenu = undefined;\r\n        }\r\n        this.geomFolderPM = null;\r\n        this.eventFolderPM = null;\r\n        this.geomFolderAdded = false;\r\n        this.hasPhoenixMenu = false;\r\n    };\r\n    /**\r\n     * Add geometry (detector geometry) folder to the dat.GUI menu.\r\n     */\r\n    UIManager.prototype.addGeomFolder = function () {\r\n        var _this = this;\r\n        this.geomFolderAdded = true;\r\n        if (this.hasDatGUIMenu) {\r\n            if (this.geomFolder == null) {\r\n                this.geomFolder = this.gui.addFolder(SceneManager.GEOMETRIES_ID);\r\n            }\r\n            this.guiParameters.geometries = { show: true, wireframe: false };\r\n            // A boolean toggle for showing/hiding the geometries is added to the 'Geometry' folder.\r\n            var showGeometriesMenu = this.geomFolder.add(this.guiParameters.geometries, 'show').name('Show').listen();\r\n            showGeometriesMenu.onChange(function (value) {\r\n                _this.three.getSceneManager().objectVisibility(SceneManager.GEOMETRIES_ID, value);\r\n            });\r\n            // A boolean toggle for enabling/disabling the geometries' wireframing.\r\n            var wireframeGeometriesMenu = this.geomFolder.add(this.guiParameters.geometries, 'wireframe').name('Wireframe').listen();\r\n            wireframeGeometriesMenu.onChange(function (value) {\r\n                _this.three.getSceneManager().wireframeGeometries(value);\r\n            });\r\n        }\r\n        if (this.hasPhoenixMenu) {\r\n            // Phoenix menu\r\n            if (this.geomFolderPM == null) {\r\n                this.geomFolderPM = this.phoenixMenu.addChild('Detector', function (value) {\r\n                    _this.three.getSceneManager().groupVisibility(SceneManager.GEOMETRIES_ID, value);\r\n                }, 'perspective');\r\n            }\r\n            this.geomFolderPM.addConfig('checkbox', {\r\n                label: 'Wireframe',\r\n                isChecked: false,\r\n                onChange: function (value) {\r\n                    _this.three.getSceneManager().wireframeGeometries(value);\r\n                }\r\n            }).addConfig('slider', {\r\n                label: 'Opacity',\r\n                min: 0, max: 1, step: 0.01,\r\n                allowCustomValue: true,\r\n                onChange: function (value) {\r\n                    _this.three.getSceneManager().setGeometryOpacity(SceneManager.GEOMETRIES_ID, value);\r\n                }\r\n            }).addConfig('slider', {\r\n                label: 'Scale',\r\n                min: 0, max: 20, step: 0.01,\r\n                allowCustomValue: true,\r\n                onChange: function (scale) {\r\n                    _this.three.getSceneManager().scaleObject(name, scale);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Sets the visibility of a geometry in the scene.\r\n     * @param name Name of the geometry in the scene\r\n     * @param visible Value for the visibility of the object\r\n     */\r\n    UIManager.prototype.geometryVisibility = function (name, visible) {\r\n        this.three.getSceneManager().objectVisibility(name, visible);\r\n    };\r\n    /**\r\n     * Adds geometry to the dat.GUI menu's geometry folder and sets up its configurable options.\r\n     * @param name Name of the geometry.\r\n     * @param colour Color of the geometry.\r\n     * @param initiallyVisible Whether the geometry is initially visible or not.\r\n     */\r\n    UIManager.prototype.addGeometry = function (name, colour, initiallyVisible) {\r\n        var _this = this;\r\n        if (initiallyVisible === void 0) { initiallyVisible = true; }\r\n        if (!this.geomFolderAdded) {\r\n            this.addGeomFolder();\r\n        }\r\n        if (this.hasDatGUIMenu) {\r\n            // A new folder for the object is added to the 'Geometry' folder\r\n            this.guiParameters[name] = {\r\n                show: initiallyVisible, color: colour, x: 0, y: 0, z: 0, detectorOpacity: 1.0, remove: this.removeOBJ(name), scale: 1\r\n            };\r\n            var objFolder = this.geomFolder.addFolder(name);\r\n            // A color picker is added to the object's folder\r\n            var colorMenu = objFolder.addColor(this.guiParameters[name], 'color').name('Color');\r\n            colorMenu.onChange(function (value) { return _this.three.getSceneManager().OBJGeometryColor(name, value); });\r\n            var opacity = objFolder.add(this.guiParameters[name], 'detectorOpacity', 0.0, 1.0).name('Opacity');\r\n            opacity.onFinishChange(function (newValue) { return _this.three.getSceneManager().setGeometryOpacity(name, newValue); });\r\n            // A boolean toggle for showing/hiding the object is added to its folder\r\n            var showMenu = objFolder.add(this.guiParameters[name], 'show').name('Show').listen();\r\n            showMenu.onChange(function (value) { return _this.three.getSceneManager().objectVisibility(name, value); });\r\n            // Scale slider\r\n            var scaleMenu = objFolder.add(this.guiParameters[name], 'scale', 0, 1000).name('Scale');\r\n            scaleMenu.onChange(function (value) {\r\n                _this.three.getSceneManager().scaleObject(name, value);\r\n            });\r\n            // Controls for positioning.\r\n            // const position = this.three.getObjectPosition(name);\r\n            objFolder.add(this.guiParameters[name], 'x', -this.maxPositionX, this.maxPositionX)\r\n                .name('X').onChange(function (value) { return _this.three.getSceneManager().getObjectPosition(name).setX(value); });\r\n            objFolder.add(this.guiParameters[name], 'y', -this.maxPositionY, this.maxPositionY)\r\n                .name('Y').onChange(function (value) { return _this.three.getSceneManager().getObjectPosition(name).setY(value); });\r\n            objFolder.add(this.guiParameters[name], 'z', -this.maxPositionZ, this.maxPositionZ)\r\n                .name('Z').onChange(function (value) { return _this.three.getSceneManager().getObjectPosition(name).setZ(value); });\r\n            // Controls for deleting the obj\r\n            objFolder.add(this.guiParameters[name], 'remove').name('Remove');\r\n        }\r\n        if (this.hasPhoenixMenu) {\r\n            // Phoenix menu\r\n            var objFolderPM = this.geomFolderPM.addChild(name, function (value) {\r\n                _this.three.getSceneManager().objectVisibility(name, value);\r\n            });\r\n            objFolderPM.toggleState = initiallyVisible;\r\n            objFolderPM.addConfig('color', {\r\n                label: 'Color',\r\n                onChange: function (value) {\r\n                    _this.three.getSceneManager().OBJGeometryColor(name, value);\r\n                }\r\n            }).addConfig('slider', {\r\n                label: 'Opacity',\r\n                min: 0, max: 1, step: 0.05,\r\n                allowCustomValue: true,\r\n                onChange: function (opacity) {\r\n                    _this.three.getSceneManager().setGeometryOpacity(name, opacity);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Remove object from the dat.GUI menu.\r\n     * @param name Name of the object to be removed.\r\n     */\r\n    UIManager.prototype.removeOBJ = function (name) {\r\n        var _this = this;\r\n        return function () {\r\n            var folder = _this.geomFolder.__folders[name];\r\n            if (folder) {\r\n                _this.geomFolder.removeFolder(folder);\r\n            }\r\n            _this.three.getSceneManager().removeGeometry(name);\r\n        };\r\n    };\r\n    /**\r\n     * Functions for event data toggles like show/hide and depthTest.\r\n     */\r\n    UIManager.prototype.addEventDataFolder = function () {\r\n        var _this = this;\r\n        if (this.hasDatGUIMenu) {\r\n            // If there is already an event data folder it is deleted and creates a new one.\r\n            if (this.eventFolder != null) {\r\n                this.gui.removeFolder(this.eventFolder);\r\n            }\r\n            // A new folder for the Event Data is added to the GUI.\r\n            this.eventFolder = this.gui.addFolder('Event Data');\r\n            this.guiParameters.eventData = { show: true, depthTest: true };\r\n            // A boolean toggle for showing/hiding the event data is added to the 'Event Data' folder.\r\n            var menu = this.eventFolder.add(this.guiParameters.eventData, 'show').name('Show').listen();\r\n            menu.onChange(function (value) { return _this.three.getSceneManager().objectVisibility(SceneManager.EVENT_DATA_ID, value); });\r\n            // A boolean toggle for enabling/disabling depthTest of event data.\r\n            var depthTestMenu = this.eventFolder.add(this.guiParameters.eventData, 'depthTest').name('Depth Test').listen();\r\n            depthTestMenu.onChange(function (value) { return _this.three.eventDataDepthTest(value); });\r\n        }\r\n        if (this.hasPhoenixMenu) {\r\n            // Phoenix menu\r\n            if (this.eventFolderPM != null) {\r\n                this.eventFolderPM.remove();\r\n            }\r\n            this.eventFolderPM = this.phoenixMenu.addChild('Event Data', function (value) {\r\n                _this.three.getSceneManager().groupVisibility(SceneManager.EVENT_DATA_ID, value);\r\n            }, 'event-folder');\r\n            this.eventFolderPM.addConfig('checkbox', {\r\n                label: 'Depth Test',\r\n                isChecked: true,\r\n                onChange: function (value) {\r\n                    _this.three.eventDataDepthTest(value);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Get the event data folder in dat.GUI menu.\r\n     * @returns Event data folder.\r\n     */\r\n    UIManager.prototype.getEventDataFolder = function () {\r\n        return this.eventFolder;\r\n    };\r\n    /**\r\n     * Add folder for event data type like tracks or hits to the dat.GUI menu.\r\n     * @param typeName Name of the type of event data.\r\n     * @param extendEventDataTypeUI A callback to add more options to event data type UI folder.\r\n     * @returns dat.GUI menu's folder for event data type.\r\n     */\r\n    UIManager.prototype.addEventDataTypeFolder = function (typeName, extendEventDataTypeUI) {\r\n        var _this = this;\r\n        if (this.hasDatGUIMenu) {\r\n            var typeFolder = this.eventFolder.addFolder(typeName);\r\n            this.guiParameters.eventData[typeName] = true;\r\n            var menu = typeFolder.add(this.guiParameters.eventData, typeName).name('Show').listen();\r\n            menu.onChange(function (value) { return _this.three.getSceneManager().objectVisibility(typeName, value); });\r\n            extendEventDataTypeUI === null || extendEventDataTypeUI === void 0 ? void 0 : extendEventDataTypeUI(typeFolder);\r\n            return typeFolder;\r\n        }\r\n        return undefined;\r\n    };\r\n    /**\r\n     * Add child for event data type like tracks or hits to the phoenix menu.\r\n     * @param typeName Name of the type of event data.\r\n     * @param extendEventDataTypeUI A callback to add more options to event data type UI folder.\r\n     * @returns Phoenix menu node for event data type.\r\n     */\r\n    UIManager.prototype.addEventDataTypeFolderPM = function (typeName, extendEventDataTypeUI) {\r\n        var _this = this;\r\n        // Phoenix menu\r\n        if (this.hasPhoenixMenu) {\r\n            var typeFolderPM = this.eventFolderPM.addChild(typeName, function (value) {\r\n                _this.three.getSceneManager().objectVisibility(typeName, value);\r\n            });\r\n            extendEventDataTypeUI === null || extendEventDataTypeUI === void 0 ? void 0 : extendEventDataTypeUI(undefined, typeFolderPM);\r\n            return typeFolderPM;\r\n        }\r\n        return undefined;\r\n    };\r\n    /**\r\n     * Add collection folder and its configurable options to the event data type (tracks, hits etc.) folder.\r\n     * @param typeFolder dat.GUI menu folder of an event data type.\r\n     * @param collectionName Name of the collection to be added in the type of event data (tracks, hits etc.).\r\n     * @param cuts Cuts to the collection of event data that are to be made configurable to filter event data.\r\n     */\r\n    UIManager.prototype.addCollection = function (typeFolder, collectionName, cuts) {\r\n        var _this = this;\r\n        if (typeFolder && this.hasDatGUIMenu) {\r\n            // A new folder for the collection is added to the 'Event Data' folder\r\n            this.guiParameters[collectionName] = {\r\n                show: true, color: 0x000000,\r\n                resetCut: function () { return _this.three.getSceneManager()\r\n                    .groupVisibility(collectionName, true, SceneManager.EVENT_DATA_ID); }\r\n            };\r\n            var collFolder = typeFolder.addFolder(collectionName);\r\n            // A boolean toggle for showing/hiding the collection is added to its folder\r\n            var showMenu = collFolder.add(this.guiParameters[collectionName], 'show').name('Show').listen();\r\n            showMenu.onChange(function (value) { return _this.three.getSceneManager()\r\n                .objectVisibility(collectionName, value, SceneManager.EVENT_DATA_ID); });\r\n            // A color picker is added to the collection's folder\r\n            var colorMenu = collFolder.addColor(this.guiParameters[collectionName], 'color').name('Color');\r\n            colorMenu.onChange(function (value) { return _this.three.getSceneManager().collectionColor(collectionName, value); });\r\n            // Cuts menu\r\n            if (cuts) {\r\n                var cutsFolder = collFolder.addFolder('Cuts');\r\n                cutsFolder.add(this.guiParameters[collectionName], 'resetCut').name('Reset cuts');\r\n                var _loop_1 = function (cut) {\r\n                    var minCut = cutsFolder.add(cut, 'minValue', cut.minValue, cut.maxValue).name('min ' + cut.field);\r\n                    minCut.onChange(function (value) {\r\n                        _this.three.getSceneManager().collectionFilter(collectionName, cut);\r\n                    });\r\n                    var maxCut = cutsFolder.add(cut, 'maxValue', cut.minValue, cut.maxValue).name('max ' + cut.field);\r\n                    maxCut.onChange(function (value) {\r\n                        _this.three.getSceneManager().collectionFilter(collectionName, cut);\r\n                    });\r\n                };\r\n                for (var _i = 0, cuts_1 = cuts; _i < cuts_1.length; _i++) {\r\n                    var cut = cuts_1[_i];\r\n                    _loop_1(cut);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Add collection node and its configurable options to the event data type (tracks, hits etc.) node.\r\n     * @param typeFolder Phoenix menu node of an event data type.\r\n     * @param collectionName Name of the collection to be added in the type of event data (tracks, hits etc.).\r\n     * @param cuts Cuts to the collection of event data that are to be made configurable to filter event data.\r\n     */\r\n    UIManager.prototype.addCollectionPM = function (typeFolderPM, collectionName, cuts) {\r\n        var _this = this;\r\n        // Phoenix menu\r\n        if (this.hasPhoenixMenu) {\r\n            var collectionNode = typeFolderPM.addChild(collectionName, function (value) {\r\n                _this.three.getSceneManager()\r\n                    .objectVisibility(collectionName, value, SceneManager.EVENT_DATA_ID);\r\n            });\r\n            collectionNode.addConfig('color', {\r\n                label: 'Color',\r\n                onChange: function (value) {\r\n                    _this.three.getSceneManager().collectionColor(collectionName, value);\r\n                }\r\n            });\r\n            if (cuts) {\r\n                collectionNode.addConfig('label', {\r\n                    label: 'Cuts'\r\n                }).addConfig('button', {\r\n                    label: 'Reset cuts',\r\n                    onClick: function () {\r\n                        _this.three.getSceneManager()\r\n                            .groupVisibility(collectionName, true, SceneManager.EVENT_DATA_ID);\r\n                    }\r\n                });\r\n                var _loop_2 = function (cut) {\r\n                    collectionNode.addConfig('slider', {\r\n                        label: 'Min ' + cut.field,\r\n                        min: cut.minValue, max: cut.maxValue,\r\n                        allowCustomValue: true,\r\n                        onChange: function (value) {\r\n                            cut.minValue = value;\r\n                            _this.three.getSceneManager().collectionFilter(collectionName, cut);\r\n                        }\r\n                    }).addConfig('slider', {\r\n                        label: 'Max ' + cut.field,\r\n                        min: cut.minValue, max: cut.maxValue,\r\n                        allowCustomValue: true,\r\n                        onChange: function (value) {\r\n                            cut.maxValue = value;\r\n                            _this.three.getSceneManager().collectionFilter(collectionName, cut);\r\n                        }\r\n                    });\r\n                };\r\n                for (var _i = 0, cuts_2 = cuts; _i < cuts_2.length; _i++) {\r\n                    var cut = cuts_2[_i];\r\n                    _loop_2(cut);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Rotate the clipping on detector geometry.\r\n     * @param angle Angle of rotation of the clipping.\r\n     */\r\n    UIManager.prototype.rotateClipping = function (angle) {\r\n        this.three.rotateClipping(angle);\r\n    };\r\n    /**\r\n     * Set if the detector geometry is to be clipped or not.\r\n     * @param value Set clipping to be true or false.\r\n     */\r\n    UIManager.prototype.setClipping = function (value) {\r\n        this.three.setClipping(value);\r\n    };\r\n    /**\r\n     * Detect the current theme and set it.\r\n     */\r\n    UIManager.prototype.detectColorScheme = function () {\r\n        var dark = false; // default to light\r\n        // local storage is used to override OS theme settings\r\n        if (localStorage.getItem('theme')) {\r\n            if (localStorage.getItem('theme') === 'dark') {\r\n                dark = true;\r\n            }\r\n        }\r\n        else if (!window.matchMedia) {\r\n            // matchMedia method not supported\r\n        }\r\n        else if (matchMedia('(prefers-color-scheme: dark)').matches) {\r\n            // OS theme setting detected as dark\r\n            dark = true;\r\n        }\r\n        this.darkTheme = dark;\r\n        // dark theme preferred, set document with a `data-theme` attribute\r\n        this.setDarkTheme(dark);\r\n    };\r\n    /**\r\n     * Set if the theme is to be dark or light.\r\n     * @param dark If the theme is to be dark or light. True for dark and false for light theme.\r\n     */\r\n    UIManager.prototype.setDarkTheme = function (dark) {\r\n        if (dark) {\r\n            localStorage.setItem('theme', 'dark');\r\n            document.documentElement.setAttribute('data-theme', 'dark');\r\n        }\r\n        else {\r\n            localStorage.setItem('theme', 'light');\r\n            document.documentElement.setAttribute('data-theme', 'light');\r\n        }\r\n        this.darkTheme = dark;\r\n        this.three.getSceneManager().darkBackground(dark);\r\n    };\r\n    /**\r\n     * Get if the theme is dark or not.\r\n     * @returns If the theme is dark or not.\r\n     */\r\n    UIManager.prototype.getDarkTheme = function () {\r\n        return this.darkTheme;\r\n    };\r\n    /**\r\n     * Set autorotate for the orbit controls.\r\n     * @param rotate If the autorotate is to be set or not.\r\n     */\r\n    UIManager.prototype.setAutoRotate = function (rotate) {\r\n        this.three.autoRotate(rotate);\r\n    };\r\n    /**\r\n     * Set whether to show the axis or not\r\n     * @param show If the axis is to be shown or not.\r\n     */\r\n    UIManager.prototype.setShowAxis = function (show) {\r\n        this.three.getSceneManager().setAxis(show);\r\n    };\r\n    /**\r\n     * Get preset views from the configuration.\r\n     * @returns Available preset views.\r\n     */\r\n    UIManager.prototype.getPresetViews = function () {\r\n        if (this.configuration) {\r\n            return this.configuration.presetViews;\r\n        }\r\n    };\r\n    /**\r\n     * Change camera view to a preset view.\r\n     * @param view Preset view to which the camera has to be transformed.\r\n     */\r\n    UIManager.prototype.displayView = function (view) {\r\n        this.three.animateCameraTransform(view.cameraPos, [0, 0, 0], 1000);\r\n    };\r\n    /**\r\n     * Toggle orthographic/perspective view.\r\n     * @param orthographic If the camera is to be orthographic or perspective.\r\n     */\r\n    UIManager.prototype.toggleOrthographicView = function (orthographic) {\r\n        this.three.swapCameras(orthographic);\r\n    };\r\n    /**\r\n     * Set the renderer for the secondary overlay canvas.\r\n     * @param overlayCanvas Canvas for which the overlay renderer is to be set.\r\n     */\r\n    UIManager.prototype.setOverlayRenderer = function (overlayCanvas) {\r\n        this.three.setOverlayRenderer(overlayCanvas);\r\n    };\r\n    /**\r\n     * Set the phoenix menu to be used by the UI manager.\r\n     * @param phoenixMenu The root node of phoenix menu.\r\n     */\r\n    UIManager.prototype.setPhoenixMenu = function (phoenixMenu) {\r\n        if (this.phoenixMenu) {\r\n            this.phoenixMenu.truncate();\r\n            this.phoenixMenu = undefined;\r\n        }\r\n        this.phoenixMenu = phoenixMenu;\r\n    };\r\n    /**\r\n     * Enable keyboard controls for some UI manager operations.\r\n     */\r\n    UIManager.prototype.enableKeyboardControls = function () {\r\n        var _this = this;\r\n        document.addEventListener(\"keydown\", function (e) {\r\n            if (e.shiftKey) {\r\n                switch (e.code) {\r\n                    case 'KeyT': // shift + \"t\"\r\n                        _this.setDarkTheme(!_this.getDarkTheme());\r\n                        break;\r\n                }\r\n                // Shortcut keys for preset views (shift + 1...9)\r\n                if (e.code.startsWith('Digit')) {\r\n                    var index = parseInt(e.code.slice(-1)) - 1;\r\n                    if (_this.configuration.presetViews[index]) {\r\n                        _this.displayView(_this.configuration.presetViews[index]);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    };\r\n    return UIManager;\r\n}());\r\nexport { UIManager };\r\n//# sourceMappingURL=index.js.map","/**\r\n * Logger for logging event display data\r\n */\r\nvar InfoLogger = /** @class */ (function () {\r\n    function InfoLogger() {\r\n        /** List that contains all the info logs */\r\n        this.infoLoggerList = [];\r\n        /** Max entries to be shown inside the information panel */\r\n        this.maxEntries = 10;\r\n    }\r\n    /**\r\n     * Add an entry to the info logger\r\n     * @param data Data of the info log\r\n     * @param label Label of the info log\r\n     */\r\n    InfoLogger.prototype.add = function (data, label) {\r\n        if (this.infoLoggerList.length > this.maxEntries) {\r\n            this.infoLoggerList.pop();\r\n        }\r\n        this.infoLoggerList.unshift(label ? (label + ': ' + data) : data);\r\n    };\r\n    /**\r\n     * Get the info logger list being used by the info logger service\r\n     * @returns The info logger list containing log data\r\n     */\r\n    InfoLogger.prototype.getInfoLoggerList = function () {\r\n        return this.infoLoggerList;\r\n    };\r\n    return InfoLogger;\r\n}());\r\nexport { InfoLogger };\r\n//# sourceMappingURL=info-logger.js.map","import { ThreeManager } from './three/index';\r\nimport { UIManager } from './ui/index';\r\nimport { InfoLogger } from './info-logger';\r\n/**\r\n * Phoenix event display class for managing detector geometries and event data.\r\n */\r\nvar EventDisplay = /** @class */ (function () {\r\n    /**\r\n     * Constructor for the phoenix event display.\r\n     */\r\n    function EventDisplay() {\r\n        /** Array containing callbacks to be called when events change. */\r\n        this.onEventsChange = [];\r\n        /** Array containing callbacks to be called when the displayed event changes. */\r\n        this.onDisplayedEventChange = [];\r\n        this.graphicsLibrary = new ThreeManager();\r\n        this.infoLogger = new InfoLogger();\r\n        this.ui = new UIManager(this.graphicsLibrary);\r\n    }\r\n    /**\r\n     * Initializes the components needed to later represent the geometries.\r\n     * @param configuration Configuration used to customize different aspects.\r\n     */\r\n    EventDisplay.prototype.init = function (configuration) {\r\n        var _this = this;\r\n        this.configuration = configuration;\r\n        this.graphicsLibrary.init(configuration, this.infoLogger);\r\n        // Showing the UI elements\r\n        this.ui.showUI(configuration);\r\n        if (this.frameID) {\r\n            cancelAnimationFrame(this.frameID);\r\n        }\r\n        // Animate loop\r\n        var animate = function () {\r\n            _this.frameID = requestAnimationFrame(animate);\r\n            _this.graphicsLibrary.updateControls();\r\n            _this.ui.updateUI();\r\n            _this.graphicsLibrary.render();\r\n        };\r\n        animate();\r\n        // Allow adding elements through console\r\n        this.enableEventDisplayConsole();\r\n        // Allow keyboard controls\r\n        this.enableKeyboardControls();\r\n    };\r\n    /**\r\n     * Initialize VR.\r\n     * @param onSessionEnded Callback when the VR session ends.\r\n     */\r\n    EventDisplay.prototype.initVR = function (onSessionEnded) {\r\n        this.graphicsLibrary.initVRSession(onSessionEnded);\r\n    };\r\n    /**\r\n     * End VR and remove VR settings.\r\n     */\r\n    EventDisplay.prototype.endVR = function () {\r\n        this.graphicsLibrary.endVRSession();\r\n    };\r\n    /**\r\n     * Receives an object containing all the eventKeys and saves it.\r\n     * Then it loads by default the first event.\r\n     * @param eventsData Object containing the event data.\r\n     * @returns Array of strings containing the keys of the eventsData object.\r\n     */\r\n    EventDisplay.prototype.parsePhoenixEvents = function (eventsData) {\r\n        this.eventsData = eventsData;\r\n        var eventKeys = this.configuration.getEventDataLoader().getEventsList(eventsData);\r\n        this.loadEvent(eventKeys[0]);\r\n        this.onEventsChange.forEach(function (callback) { return callback(eventKeys); });\r\n        return eventKeys;\r\n    };\r\n    /**\r\n     * Receives an object containing one event and builds the different collections\r\n     * of physics objects.\r\n     * @param eventData Object containing the event data.\r\n     */\r\n    EventDisplay.prototype.buildEventDataFromJSON = function (eventData) {\r\n        // Creating UI folder\r\n        this.ui.addEventDataFolder();\r\n        // Clearing existing event data\r\n        this.graphicsLibrary.clearEventData();\r\n        // Build data and add to scene\r\n        this.configuration.getEventDataLoader().buildEventData(eventData, this.graphicsLibrary, this.ui, this.infoLogger);\r\n        this.onDisplayedEventChange.forEach(function (callback) { return callback(eventData); });\r\n    };\r\n    /**\r\n     * Receives a string representing the key of an event and loads\r\n     * the event associated with that key.\r\n     * @param eventKey String that represents the event in the eventsData object.\r\n     */\r\n    EventDisplay.prototype.loadEvent = function (eventKey) {\r\n        var event = this.eventsData[eventKey];\r\n        if (event) {\r\n            this.buildEventDataFromJSON(event);\r\n        }\r\n    };\r\n    /**\r\n     * Get the three manager responsible for three.js functions.\r\n     * @returns The three.js manager.\r\n     */\r\n    EventDisplay.prototype.getThreeManager = function () {\r\n        return this.graphicsLibrary;\r\n    };\r\n    /**\r\n     * Get the UI manager responsible for UI related functions.\r\n     * @returns The UI manager.\r\n     */\r\n    EventDisplay.prototype.getUIManager = function () {\r\n        return this.ui;\r\n    };\r\n    /**\r\n     * Get the info logger containing event display logs.\r\n     * @returns The info logger instance being used by the event display.\r\n     */\r\n    EventDisplay.prototype.getInfoLogger = function () {\r\n        return this.infoLogger;\r\n    };\r\n    // **********************\r\n    // * LOADING GEOMETRIES *\r\n    // **********************\r\n    /**\r\n     * Loads an OBJ (.obj) geometry from the given filename\r\n     * and adds it to the dat.GUI menu.\r\n     * @param filename Path to the geometry.\r\n     * @param name Name given to the geometry.\r\n     * @param color Color to initialize the geometry.\r\n     * @param doubleSided Renders both sides of the material.\r\n     * @param initiallyVisible Whether the geometry is initially visible or not.\r\n     */\r\n    EventDisplay.prototype.loadOBJGeometry = function (filename, name, color, doubleSided, initiallyVisible) {\r\n        if (initiallyVisible === void 0) { initiallyVisible = true; }\r\n        this.graphicsLibrary.loadOBJGeometry(filename, name, color, doubleSided, initiallyVisible);\r\n        this.ui.addGeometry(name, color, initiallyVisible);\r\n        this.infoLogger.add(name, 'Loaded OBJ geometry');\r\n    };\r\n    /**\r\n     * Parses and loads an OBJ geometry from the given content\r\n     * and adds it to the dat.GUI menu.\r\n     * @param content Content of the OBJ geometry.\r\n     * @param name Name given to the geometry.\r\n     * @param initiallyVisible Whether the geometry is initially visible or not.\r\n     */\r\n    EventDisplay.prototype.parseOBJGeometry = function (content, name, initiallyVisible) {\r\n        if (initiallyVisible === void 0) { initiallyVisible = true; }\r\n        this.graphicsLibrary.parseOBJGeometry(content, name, initiallyVisible);\r\n        this.ui.addGeometry(name, 0x000fff, initiallyVisible);\r\n    };\r\n    /**\r\n     * Exports scene to OBJ file format.\r\n     */\r\n    EventDisplay.prototype.exportToOBJ = function () {\r\n        this.graphicsLibrary.exportSceneToOBJ();\r\n        this.infoLogger.add('Exported scene to OBJ');\r\n    };\r\n    /**\r\n     * Parse and load an event from the Phoenix file format (.phnx).\r\n     * @param input Content containing the JSON with event data\r\n     * and other configuration.\r\n     */\r\n    EventDisplay.prototype.parsePhoenixDisplay = function (input) {\r\n        var phoenixScene = JSON.parse(input);\r\n        if (phoenixScene.sceneConfiguration && phoenixScene.scene) {\r\n            // Creating UI folder\r\n            this.ui.addEventDataFolder();\r\n            // Clearing existing event data\r\n            this.graphicsLibrary.clearEventData();\r\n            // Add to scene\r\n            this.loadSceneConfiguration(phoenixScene.sceneConfiguration);\r\n            this.graphicsLibrary.parseGLTFGeometry(phoenixScene.scene);\r\n        }\r\n    };\r\n    /**\r\n     * Exports scene as phoenix format, allowing to load it later and recover the saved configuration.\r\n     */\r\n    EventDisplay.prototype.exportPhoenixDisplay = function () {\r\n        this.graphicsLibrary.exportPhoenixScene();\r\n    };\r\n    /**\r\n     * Parses and loads a geometry in GLTF (.gltf) format.\r\n     * @param input JSON containing the scene as in GLTF (.gltf) format.\r\n     */\r\n    EventDisplay.prototype.parseGLTFGeometry = function (input) {\r\n        var scene = JSON.parse(input);\r\n        this.graphicsLibrary.parseGLTFGeometry(scene);\r\n    };\r\n    /**\r\n     * Loads a GLTF (.gltf) scene/geometry from the given URL.\r\n     * and adds it to the dat.GUI menu.\r\n     * @param url URL to the GLTF (.gltf) file.\r\n     * @param name Name of the loaded scene/geometry.\r\n     * @param scale Scale of the geometry.\r\n     * @param initiallyVisible Whether the geometry is initially visible or not.\r\n     */\r\n    EventDisplay.prototype.loadGLTFGeometry = function (url, name, scale, initiallyVisible) {\r\n        if (initiallyVisible === void 0) { initiallyVisible = true; }\r\n        this.graphicsLibrary.loadGLTFGeometry(url, name, scale, initiallyVisible);\r\n        this.ui.addGeometry(name, 0xff0000, initiallyVisible);\r\n        this.infoLogger.add(name, 'Loaded GLTF geometry');\r\n    };\r\n    /**\r\n     * Loads geometries from JSON.\r\n     * @param json JSON or URL to JSON file of the geometry.\r\n     * @param name Name of the geometry or group of geometries.\r\n     * @param scale Scale of the geometry.\r\n     * @param doubleSided Renders both sides of the material.\r\n     * @param initiallyVisible Whether the geometry is initially visible or not.\r\n     */\r\n    EventDisplay.prototype.loadJSONGeometry = function (json, name, scale, doubleSided, initiallyVisible) {\r\n        if (initiallyVisible === void 0) { initiallyVisible = true; }\r\n        this.graphicsLibrary.loadJSONGeometry(json, name, scale, doubleSided, initiallyVisible);\r\n        this.ui.addGeometry(name, 0xff0000, initiallyVisible);\r\n        this.infoLogger.add(name, 'Loaded JSON geometry');\r\n    };\r\n    /**\r\n     * Load JSON geometry from JSRoot.\r\n     * @param JSROOT JSRoot object containing all the JSROOT functions.\r\n     * @param url URL of the JSRoot geometry file.\r\n     * @param name Name of the geometry.\r\n     * @param scale Scale of the geometry.\r\n     * @param doubleSided Renders both sides of the material.\r\n     * @param initiallyVisible Whether the geometry is initially visible or not.\r\n     */\r\n    EventDisplay.prototype.loadRootJSONGeometry = function (JSROOT, url, name, scale, doubleSided, initiallyVisible) {\r\n        var _this = this;\r\n        if (initiallyVisible === void 0) { initiallyVisible = true; }\r\n        JSROOT.NewHttpRequest(url, 'object', function (obj) {\r\n            _this.loadJSONGeometry(JSROOT.GEO.build(obj, { dflt_colors: true }).toJSON(), name, scale, doubleSided, initiallyVisible);\r\n        }).send();\r\n    };\r\n    /**\r\n     * Load ROOT geometry from JSRoot.\r\n     * @param JSROOT JSRoot object containing all the JSROOT functions.\r\n     * @param url URL of the JSRoot file.\r\n     * @param objectName Name of the object inside the \".root\" file.\r\n     * @param name Name of the geometry.\r\n     * @param scale Scale of the geometry.\r\n     * @param doubleSided Renders both sides of the material.\r\n     * @param initiallyVisible Whether the geometry is initially visible or not.\r\n     */\r\n    EventDisplay.prototype.loadRootGeometry = function (JSROOT, url, objectName, name, scale, doubleSided, initiallyVisible) {\r\n        var _this = this;\r\n        if (initiallyVisible === void 0) { initiallyVisible = true; }\r\n        if (url.indexOf('.root') > 0) {\r\n            JSROOT.OpenFile(url, function (file) {\r\n                file.ReadObject(objectName, function (obj) {\r\n                    _this.loadJSONGeometry(JSROOT.GEO.build(obj, { dflt_colors: true }).toJSON(), name, scale, doubleSided, initiallyVisible);\r\n                });\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Zoom all the cameras by a specific zoom factor.\r\n     * The factor may either be greater (zoom in) or smaller (zoom out) than 1.\r\n     * @param zoomFactor The factor to zoom by.\r\n     * @param zoomTime The time it takes for a zoom animation to complete.\r\n     */\r\n    EventDisplay.prototype.zoomTo = function (zoomFactor, zoomTime) {\r\n        this.graphicsLibrary.zoomTo(zoomFactor, zoomTime);\r\n    };\r\n    /**\r\n     * Processes event data and geometry for Loading the scene\r\n     * from Phoenix file format (.phnx).\r\n     * @param sceneConfiguration Scene configuration containingevent data and detector geometry.\r\n     */\r\n    EventDisplay.prototype.loadSceneConfiguration = function (sceneConfiguration) {\r\n        for (var _i = 0, _a = Object.keys(sceneConfiguration.eventData); _i < _a.length; _i++) {\r\n            var objectType = _a[_i];\r\n            var typeFolder = this.ui.addEventDataTypeFolder(objectType);\r\n            var collections = sceneConfiguration.eventData[objectType];\r\n            for (var _b = 0, collections_1 = collections; _b < collections_1.length; _b++) {\r\n                var collection = collections_1[_b];\r\n                this.ui.addCollection(typeFolder, collection);\r\n            }\r\n        }\r\n        for (var _c = 0, _d = sceneConfiguration.geometries; _c < _d.length; _c++) {\r\n            var geom = _d[_c];\r\n            this.ui.addGeometry(geom, '#ffffff');\r\n        }\r\n    };\r\n    /**\r\n     * Get all the objects inside a collection.\r\n     * @param collectionName Key of the collection that will be retrieved.\r\n     * @returns Object containing all physics objects from the desired collection.\r\n     */\r\n    EventDisplay.prototype.getCollection = function (collectionName) {\r\n        return this.configuration.getEventDataLoader().getCollection(collectionName);\r\n    };\r\n    /**\r\n     * Get the different collections for the current stored event.\r\n     * @returns List of strings, each representing a collection of the event displayed.\r\n     */\r\n    EventDisplay.prototype.getCollections = function () {\r\n        return this.configuration.getEventDataLoader().getCollections();\r\n    };\r\n    /**\r\n     * Add a callback to onDisplayedEventChange array to call\r\n     * the callback on changes to the displayed event.\r\n     * @param callback Callback to be added to the onDisplayedEventChange array.\r\n     */\r\n    EventDisplay.prototype.listenToDisplayedEventChange = function (callback) {\r\n        this.onDisplayedEventChange.push(callback);\r\n    };\r\n    /**\r\n     * Add a callback to onEventsChange array to call\r\n     * the callback on changes to the events.\r\n     * @param callback Callback to be added to the onEventsChange array.\r\n     */\r\n    EventDisplay.prototype.listenToLoadedEventsChange = function (callback) {\r\n        this.onEventsChange.push(callback);\r\n    };\r\n    /**\r\n     * Get metadata associated to the displayed event (experiment info, time, run, event...).\r\n     * @returns Metadata of the displayed event.\r\n     */\r\n    EventDisplay.prototype.getEventMetadata = function () {\r\n        return this.configuration.getEventDataLoader().getEventMetadata();\r\n    };\r\n    /**\r\n     * Enables calling specified event display methods in console.\r\n     */\r\n    EventDisplay.prototype.enableEventDisplayConsole = function () {\r\n        var _this = this;\r\n        // Defining an EventDisplay object in window to access methods through console\r\n        window.EventDisplay = {\r\n            loadGLTFGeometry: function (sceneUrl, name) {\r\n                _this.loadGLTFGeometry(sceneUrl, name);\r\n            },\r\n            loadOBJGeometry: function (filename, name, colour, doubleSided) {\r\n                _this.loadOBJGeometry(filename, name, colour, doubleSided);\r\n            },\r\n            loadJSONGeometry: function (json, name, scale, doubleSided, initiallyVisible) {\r\n                if (initiallyVisible === void 0) { initiallyVisible = true; }\r\n                _this.loadJSONGeometry(json, name, scale, doubleSided, initiallyVisible);\r\n            }\r\n        };\r\n    };\r\n    /**\r\n     * Sets the renderer to be used to render the event display on the overlayed canvas.\r\n     * @param overlayCanvas An HTML canvas on which the overlay renderer is to be set.\r\n     */\r\n    EventDisplay.prototype.renderOverlay = function (overlayCanvas) {\r\n        this.graphicsLibrary.setOverlayRenderer(overlayCanvas);\r\n    };\r\n    /**\r\n     * Initializes the object which will show information of the selected geometry/event data.\r\n     * @param selectedObject Object to display the data.\r\n     */\r\n    EventDisplay.prototype.allowSelection = function (selectedObject) {\r\n        this.graphicsLibrary.setSelectedObjectDisplay(selectedObject);\r\n    };\r\n    /**\r\n     * Toggles the ability of selecting geometries/event data by clicking on the screen.\r\n     * @param enable Value to enable or disable the functionality.\r\n     */\r\n    EventDisplay.prototype.enableSelecting = function (enable) {\r\n        this.graphicsLibrary.enableSelecting(enable);\r\n    };\r\n    /**\r\n     * Fixes the camera position of the overlay view.\r\n     * @param fixed Whether the overlay view is to be fixed or not.\r\n     */\r\n    EventDisplay.prototype.fixOverlayView = function (fixed) {\r\n        this.graphicsLibrary.fixOverlayView(fixed);\r\n    };\r\n    /**\r\n     * Get the uuid of the currently selected object.\r\n     * @returns uuid of the currently selected object.\r\n     */\r\n    EventDisplay.prototype.getActiveObjectId = function () {\r\n        return this.graphicsLibrary.getActiveObjectId();\r\n    };\r\n    /**\r\n     * Move the camera to look at the object with the given uuid\r\n     * and highlight it.\r\n     * @param uuid uuid of the object.\r\n     */\r\n    EventDisplay.prototype.lookAtObject = function (uuid) {\r\n        this.graphicsLibrary.lookAtObject(uuid);\r\n        this.graphicsLibrary.highlightObject(uuid);\r\n    };\r\n    /**\r\n     * Highlight the object with the given uuid by giving it an outline.\r\n     * @param uuid uuid of the object.\r\n     */\r\n    EventDisplay.prototype.highlightObject = function (uuid) {\r\n        this.graphicsLibrary.highlightObject(uuid);\r\n    };\r\n    /**\r\n     * Enable keyboard controls for the event display.\r\n     */\r\n    EventDisplay.prototype.enableKeyboardControls = function () {\r\n        this.ui.enableKeyboardControls();\r\n        this.graphicsLibrary.enableKeyboardControls();\r\n    };\r\n    /**\r\n     * Animate the camera through the event scene.\r\n     * @param startPos Start position of the translation animation.\r\n     * @param tweenDuration Duration of each tween in the translation animation.\r\n     * @param onAnimationEnd Callback when the last animation ends.\r\n     */\r\n    EventDisplay.prototype.animateThroughEvent = function (startPos, tweenDuration, onAnimationEnd) {\r\n        this.graphicsLibrary\r\n            .animateThroughEvent(startPos, tweenDuration, onAnimationEnd);\r\n    };\r\n    /**\r\n     * Animate the propagation and generation of event data with particle collison.\r\n     * @param tweenDuration Duration of the animation tween.\r\n     * @param onEnd Function to call when all animations have ended.\r\n     */\r\n    EventDisplay.prototype.animateEventWithCollision = function (tweenDuration, onEnd) {\r\n        this.graphicsLibrary.animateEventWithCollision(tweenDuration, onEnd);\r\n    };\r\n    /**\r\n     * Animate the propagation and generation of event data\r\n     * using clipping planes after particle collison.\r\n     * @param tweenDuration Duration of the animation tween.\r\n     * @param onEnd Function to call when all animations have ended.\r\n     */\r\n    EventDisplay.prototype.animateClippingWithCollision = function (tweenDuration, onEnd) {\r\n        this.graphicsLibrary.animateClippingWithCollision(tweenDuration, onEnd);\r\n    };\r\n    return EventDisplay;\r\n}());\r\nexport { EventDisplay };\r\n//# sourceMappingURL=event-display.js.map","/**\r\n * Cut for specifying filters on event data attribute.\r\n */\r\nvar Cut = /** @class */ (function () {\r\n    /**\r\n     * Create the cut to filter an event data attribute.\r\n     * @param field Name of the event data attribute to be filtered.\r\n     * @param minValue Minimum allowed value of the event data attribute.\r\n     * @param maxValue Maximum allowed value of the event data attribute.\r\n     */\r\n    function Cut(field, minValue, maxValue) {\r\n        this.field = field;\r\n        this.minValue = minValue;\r\n        this.maxValue = maxValue;\r\n    }\r\n    return Cut;\r\n}());\r\nexport { Cut };\r\n//# sourceMappingURL=cut.model.js.map","/**\r\n * A single node of phoenix menu item.\r\n */\r\nvar PhoenixMenuNode = /** @class */ (function () {\r\n    /**\r\n     * Create the phoenix menu node.\r\n     * @param name Name of the node.\r\n     * @param icon Icon of the node.\r\n     * @param onToggle Function on toggling the node.\r\n     * @param children Children of the node.\r\n     * @param configs Configuration options in the node.\r\n     * @param parent Parent of the node.\r\n     */\r\n    function PhoenixMenuNode(name, icon, onToggle, children, configs, parent) {\r\n        /** If the node toggle state is true or false. */\r\n        this.toggleState = true;\r\n        /** Children of the node. */\r\n        this.children = [];\r\n        /** Configuration options in the node. */\r\n        this.configs = [];\r\n        /** Level of the node. */\r\n        this.nodeLevel = 0;\r\n        /** If the node children are active or not. */\r\n        this.childrenActive = false;\r\n        /** If the node configuration options are active or not. */\r\n        this.configActive = false;\r\n        this.name = name;\r\n        this.icon = icon;\r\n        this.onToggle = onToggle;\r\n        if (children)\r\n            this.children = children;\r\n        if (configs)\r\n            this.configs = configs;\r\n        if (parent)\r\n            this.parent = parent;\r\n    }\r\n    /**\r\n     * Add a child to the phoenix menu item.\r\n     * @param name Name of the child.\r\n     * @param onToggle Function on toggling the child.\r\n     * @param icon Icon of the child.\r\n     * @returns The child node.\r\n     */\r\n    PhoenixMenuNode.prototype.addChild = function (name, onToggle, icon) {\r\n        var child = new PhoenixMenuNode(name, icon, onToggle);\r\n        child.parent = this;\r\n        child.nodeLevel = this.nodeLevel + 1;\r\n        this.children.push(child);\r\n        return child;\r\n    };\r\n    /**\r\n     * Remove a child node.\r\n     * @param child The child node to be removed.\r\n     * @returns The current node.\r\n     */\r\n    PhoenixMenuNode.prototype.removeChild = function (child) {\r\n        var childIndex = this.children.indexOf(child);\r\n        this.children.splice(childIndex, 1);\r\n        return this;\r\n    };\r\n    /**\r\n     * Remove the current node.\r\n     */\r\n    PhoenixMenuNode.prototype.remove = function () {\r\n        if (this.parent) {\r\n            this.parent.removeChild(this);\r\n        }\r\n        else {\r\n            console.error('Cannot delete root node of phoenix menu. Set it to undefined/null instead.');\r\n        }\r\n    };\r\n    /**\r\n     * Remove all children.\r\n     */\r\n    PhoenixMenuNode.prototype.truncate = function () {\r\n        this.children = [];\r\n    };\r\n    /**\r\n     * Add a config to the phoenix menu item.\r\n     * @param options Options for the config.\r\n     * @returns The current node.\r\n     */\r\n    PhoenixMenuNode.prototype.addConfig = function (type, options) {\r\n        var configOptions = { type: type };\r\n        Object.assign(configOptions, options);\r\n        this.configs.push(configOptions);\r\n        return this;\r\n    };\r\n    /**\r\n     * Function for toggling the current and all child nodes.\r\n     * @param value If the node itself and descendants are to be made true or false.\r\n     */\r\n    PhoenixMenuNode.prototype.toggleSelfAndDescendants = function (value) {\r\n        var _a;\r\n        (_a = this.onToggle) === null || _a === void 0 ? void 0 : _a.call(this, value);\r\n        this.toggleState = value;\r\n        for (var _i = 0, _b = this.children; _i < _b.length; _i++) {\r\n            var child = _b[_i];\r\n            child.toggleSelfAndDescendants(value);\r\n        }\r\n    };\r\n    return PhoenixMenuNode;\r\n}());\r\nexport { PhoenixMenuNode };\r\n//# sourceMappingURL=phoenix-menu-node.js.map","import { Vector3 } from 'three';\r\n/**\r\n * Class for performing Runge-Kutta operations.\r\n */\r\nvar RungeKutta = /** @class */ (function () {\r\n    function RungeKutta() {\r\n    }\r\n    /**\r\n     * Perform a Runge-Kutta step for the given state.\r\n     * @param state State at which the step is to be performed.\r\n     * @returns The computed step size.\r\n     */\r\n    RungeKutta.step = function (state) {\r\n        // Charge (q) to momentum (p) ratio in SI units\r\n        var qop = state.q / (state.unitC * state.p);\r\n        // Runge-Kutta integrator state\r\n        var h2, half_h, B_middle, B_last, k2, k3, k4;\r\n        // First Runge-Kutta point (at current position)\r\n        var B_first = Field.get(state.pos);\r\n        // state.dir.cross(B_first) * qop\r\n        var k1 = state.dir.clone().cross(B_first).multiplyScalar(qop);\r\n        // Try Runge-Kutta step with h as the step size\r\n        var tryRungeKuttaStep = function (h) {\r\n            h2 = h * h;\r\n            half_h = h / 2;\r\n            // Second Runge-Kutta point\r\n            // state.pos + state.dir * half_h + k1 * (h2 / 8)\r\n            var pos1 = state.pos.clone().add(state.dir.clone().multiplyScalar(half_h)).add(k1.clone().multiplyScalar(h2 / 8));\r\n            B_middle = Field.get(pos1);\r\n            // (state.dir + k1 * half_h).cross(B_middle) * qop\r\n            k2 = state.dir.clone().add(k1.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\r\n            // Third Runge-Kutta point\r\n            // (state.dir + k2 * half_h).cross(B_middle) * qop\r\n            k3 = state.dir.clone().add(k2.clone().multiplyScalar(half_h)).cross(B_middle).multiplyScalar(qop);\r\n            // Last Runge-Kutta point\r\n            // state.pos + state.dir * h + k3 * (h2 / 2)\r\n            var pos2 = state.pos.clone().add(state.dir.clone().multiplyScalar(h)).add(k3.clone().multiplyScalar(h2 / 2));\r\n            B_last = Field.get(pos2);\r\n            // (state.dir + k3 * h).cross(B_last) * qop\r\n            k4 = state.dir.clone().add(k3.clone().multiplyScalar(h)).cross(B_last).multiplyScalar(qop);\r\n            // (k1 - k2 - k3 + k4)\r\n            var returnVec = k1.clone().sub(k2).sub(k3).add(k4);\r\n            // h * (k1 - k2 - k3 + k4).lpNorm()\r\n            return h * (Math.abs(returnVec.x) + Math.abs(returnVec.y) + Math.abs(returnVec.z));\r\n        };\r\n        // Checking the error estimate\r\n        var error_estimate = tryRungeKuttaStep(state.stepSize);\r\n        while (error_estimate > 0.0002) {\r\n            state.stepSize *= 0.5;\r\n            error_estimate = tryRungeKuttaStep(state.stepSize);\r\n        }\r\n        var fh = state.stepSize;\r\n        var fh2 = Math.pow(fh, 2);\r\n        // Update position and momentum\r\n        // state.pos += state.dir * fh + (k1 + k2 + k3) * (fh2 /6)\r\n        state.pos.add(state.dir.clone().multiplyScalar(fh)).add(k1.clone().add(k2).add(k3).multiplyScalar(fh2 / 6));\r\n        // state.dir += (k1 + k2 * 2 + k3 * 2 + k4) * (fh / 6)\r\n        state.dir.add(k1.clone().add(k2.clone().multiplyScalar(2)).add(k3.clone().multiplyScalar(2)).add(k4).multiplyScalar(fh / 6));\r\n        state.dir.normalize();\r\n        return state.stepSize;\r\n    };\r\n    /**\r\n     * Propagate using the given properties by performing the Runge-Kutta steps.\r\n     * @param startPos Starting position in 3D space.\r\n     * @param startDir Starting direction in 3D space.\r\n     * @param p Momentum.\r\n     * @param q Charge.\r\n     * @param mss Max step size.\r\n     * @param plength Path length.\r\n     * @returns An array containing position and direction at that position calculated\r\n     * through the Runge-Kutta steps.\r\n     */\r\n    RungeKutta.propagate = function (startPos, startDir, p, q, mss, plength) {\r\n        if (mss === void 0) { mss = -1; }\r\n        if (plength === void 0) { plength = 1000; }\r\n        var rkState = new State();\r\n        rkState.pos = startPos;\r\n        rkState.dir = startDir;\r\n        rkState.p = p;\r\n        rkState.q = q;\r\n        rkState.maxStepSize = mss;\r\n        var result = [];\r\n        while (rkState.pathLength < plength) {\r\n            rkState.pathLength += RungeKutta.step(rkState);\r\n            // Cloning state to avoid using the reference\r\n            var copiedState = JSON.parse(JSON.stringify(rkState));\r\n            result.push({\r\n                pos: copiedState.pos,\r\n                dir: copiedState.dir\r\n            });\r\n        }\r\n        return result;\r\n    };\r\n    return RungeKutta;\r\n}());\r\nexport { RungeKutta };\r\n/**\r\n * State of the particle.\r\n */\r\nvar State = /** @class */ (function () {\r\n    function State() {\r\n        /** Position. */\r\n        this.pos = new Vector3(0, 0, 0);\r\n        /** Direction. */\r\n        this.dir = new Vector3(0, 0, 0);\r\n        /** Momentum. */\r\n        this.p = 0;\r\n        /** Charge. */\r\n        this.q = 1;\r\n        /** Unit. */\r\n        this.unitC = 3.3333;\r\n        /** Step size. */\r\n        this.stepSize = 1000;\r\n        /** Max step size. */\r\n        this.maxStepSize = 10;\r\n        /** Path length.. */\r\n        this.pathLength = 0;\r\n    }\r\n    return State;\r\n}());\r\nexport { State };\r\n/**\r\n *  Default class to define the field.\r\n */\r\nvar Field = /** @class */ (function () {\r\n    function Field() {\r\n    }\r\n    /**\r\n     * Returns field as a Vector3 in Tesla.\r\n     */\r\n    Field.get = function (field) {\r\n        return new Vector3(0, 0, 2);\r\n    };\r\n    return Field;\r\n}());\r\n//# sourceMappingURL=runge-kutta.js.map","import { RungeKutta } from \"./runge-kutta\";\r\nimport { Vector3 } from \"three\";\r\n/**\r\n * Helper methods for RungeKutta functions.\r\n */\r\nvar RKHelper = /** @class */ (function () {\r\n    function RKHelper() {\r\n    }\r\n    /**\r\n     * Get extrapolated tracks using RungeKutta.\r\n     * @param tracksCollectionsEvent Event containing tracks collections.\r\n     */\r\n    RKHelper.getTracksWithRungeKutta = function (tracksCollectionsEvent) {\r\n        var tracksCollections = Object.assign({}, tracksCollectionsEvent);\r\n        var Tracks = {};\r\n        for (var _i = 0, _a = Object.keys(tracksCollections); _i < _a.length; _i++) {\r\n            var tracksCollection = _a[_i];\r\n            for (var _b = 0, _c = tracksCollections[tracksCollection]; _b < _c.length; _b++) {\r\n                var track = _c[_b];\r\n                track.pos = RKHelper.extrapolateTrackPositions(track);\r\n            }\r\n        }\r\n        return Tracks;\r\n    };\r\n    /**\r\n     * Extrapolate tracks using RungeKutta propagator.\r\n     * @param track Track which is to be extrapolated.\r\n     * @returns An array of track positions.\r\n     */\r\n    RKHelper.extrapolateTrackPositions = function (track) {\r\n        var dparams = track.dparams;\r\n        // ATLAS uses mm, MeV\r\n        var d0 = dparams[0], z0 = dparams[1], phi = dparams[2], theta = dparams[3], qop = dparams[4];\r\n        var p;\r\n        if (qop !== 0) {\r\n            p = Math.abs(1 / qop);\r\n        }\r\n        else {\r\n            p = 0;\r\n        }\r\n        var q = Math.round(p * qop);\r\n        // ATLAS definition of momentum, so probably so move this calc there.\r\n        var globalMomentum = new Vector3(p * Math.cos(phi) * Math.sin(theta), p * Math.sin(phi) * Math.sin(theta), p * Math.cos(theta));\r\n        // Cannot use setFromSphericalCoordinates since ATLAS and threejs use\r\n        // different phi & theta definitions (though both are right-handed)\r\n        var startPos = new Vector3(-d0 * Math.sin(phi), d0 * Math.cos(phi), z0);\r\n        // Wipe existing positions\r\n        var positions = [];\r\n        positions.push([startPos.x, startPos.y, startPos.z]);\r\n        var startDir = globalMomentum.clone();\r\n        startDir.normalize();\r\n        var traj = RungeKutta.propagate(startPos, startDir, p, q, 10, 2500);\r\n        var extrapolatedPos = traj.map(function (val) { return [val.pos.x, val.pos.y, val.pos.z]; });\r\n        return positions.concat(extrapolatedPos);\r\n    };\r\n    return RKHelper;\r\n}());\r\nexport { RKHelper };\r\n//# sourceMappingURL=rk-helper.js.map","import * as THREE from 'three';\r\nimport { RKHelper } from '../../helpers/rk-helper';\r\n/**\r\n * Physics objects that make up an event in Phoenix.\r\n */\r\nvar PhoenixObjects = /** @class */ (function () {\r\n    function PhoenixObjects() {\r\n    }\r\n    /**\r\n     * Process the Track from the given parameters (and positions)\r\n     * and get it as a geometry.\r\n     * @param trackParams Parameters of the Track.\r\n     * @returns Track object.\r\n     */\r\n    PhoenixObjects.getTrack = function (trackParams) {\r\n        var positions = trackParams.pos;\r\n        // Track with no points\r\n        if (!positions) {\r\n            return;\r\n        }\r\n        // Track with too few points are extrapolated with RungeKutta\r\n        if (positions.length < 3) {\r\n            if (trackParams === null || trackParams === void 0 ? void 0 : trackParams.dparams) {\r\n                positions = RKHelper.extrapolateTrackPositions(trackParams);\r\n            }\r\n            else {\r\n                return;\r\n            }\r\n        }\r\n        // const length = 100;\r\n        var objectColor = 0xff0000;\r\n        if (trackParams.color) {\r\n            objectColor = parseInt(trackParams.color, 16);\r\n        }\r\n        // // Apply pT cut TODO - make this configurable.\r\n        // const momentum = trackParams.mom;\r\n        // if (momentum) {\r\n        //   if (momentum[0] * momentum[0] + momentum[1] * momentum[1] + momentum[2] * momentum[2] < 0.25) {\r\n        //     // console.log('Track mom<0.5 GeV. Skipping. Positions are: ' + positions + ' particle_id: ' + track.particle_id);\r\n        //     return;\r\n        //   }\r\n        // }\r\n        var points = [];\r\n        for (var i = 0; i < positions.length; i++) {\r\n            points.push(new THREE.Vector3(positions[i][0], positions[i][1], positions[i][2]));\r\n        }\r\n        // attributes\r\n        var curve = new THREE.CatmullRomCurve3(points);\r\n        // TubeGeometry\r\n        var geometry = new THREE.TubeBufferGeometry(curve, undefined, 2);\r\n        var material = new THREE.MeshToonMaterial({ color: objectColor });\r\n        var tubeObject = new THREE.Mesh(geometry, material);\r\n        // Line - Creating a Line to put inside the tube to show tracks even on zoom out\r\n        var vertices = curve.getPoints(50);\r\n        var lineGeometry = new THREE.BufferGeometry().setFromPoints(vertices);\r\n        var lineMaterial = new THREE.LineBasicMaterial({\r\n            color: objectColor,\r\n            linewidth: 2\r\n        });\r\n        var lineObject = new THREE.Line(lineGeometry, lineMaterial);\r\n        lineObject.name = 'Track';\r\n        // Creating a group to add both the Tube curve and the Line\r\n        var trackObject = new THREE.Group();\r\n        trackObject.add(tubeObject);\r\n        trackObject.add(lineObject);\r\n        // Setting info to the tubeObject and trackObject for selection and cuts\r\n        for (var _i = 0, _a = [tubeObject, trackObject]; _i < _a.length; _i++) {\r\n            var object = _a[_i];\r\n            object.userData = trackParams;\r\n            object.name = 'Track';\r\n        }\r\n        // Setting uuid for selection from collections info\r\n        trackParams.uuid = tubeObject.uuid;\r\n        return trackObject;\r\n    };\r\n    /**\r\n     * Process the Jet from the given parameters and get it as a geometry.\r\n     * @param jetParams Parameters for the Jet.\r\n     * @returns Jet object.\r\n     */\r\n    PhoenixObjects.getJet = function (jetParams) {\r\n        var eta = jetParams.eta;\r\n        var phi = jetParams.phi;\r\n        // If theta is given then use that else calculate from eta\r\n        var theta = jetParams.theta ? jetParams.theta : (2 * Math.atan(Math.pow(Math.E, eta)));\r\n        // Jet energy parameter can either be 'energy' or 'et'\r\n        var length = (jetParams.energy ? jetParams.energy : jetParams.et) * 0.2;\r\n        // Ugh - We don't want the Jets to go out of the event display\r\n        if (length > 3000) {\r\n            length = 3000;\r\n        }\r\n        var width = length * 0.1;\r\n        var sphi = Math.sin(phi);\r\n        var cphi = Math.cos(phi);\r\n        var stheta = Math.sin(theta);\r\n        var ctheta = Math.cos(theta);\r\n        //\r\n        var translation = new THREE.Vector3(0.5 * length * cphi * stheta, 0.5 * length * sphi * stheta, 0.5 * length * ctheta);\r\n        var x = cphi * stheta;\r\n        var y = sphi * stheta;\r\n        var z = ctheta;\r\n        var v1 = new THREE.Vector3(0, 1, 0);\r\n        var v2 = new THREE.Vector3(x, y, z);\r\n        var quaternion = new THREE.Quaternion();\r\n        quaternion.setFromUnitVectors(v1, v2);\r\n        var geometry = new THREE.CylinderBufferGeometry(width, 1, length, 50, 50, false); // Cone\r\n        var material = new THREE.MeshBasicMaterial({ color: 0x2194CE, opacity: 0.3, transparent: true });\r\n        material.opacity = 0.5;\r\n        var mesh = new THREE.Mesh(geometry, material);\r\n        mesh.position.copy(translation);\r\n        mesh.quaternion.copy(quaternion);\r\n        mesh.userData = jetParams;\r\n        mesh.name = 'Jet';\r\n        // Setting uuid for selection from collections info\r\n        jetParams.uuid = mesh.uuid;\r\n        return mesh;\r\n    };\r\n    /**\r\n     * Process the Hits from the given parameters and get them as a geometry.\r\n     * @param hitsParams Parameters for the Hits.\r\n     * @returns Hits object.\r\n     */\r\n    PhoenixObjects.getHits = function (hitsParams) {\r\n        var positions;\r\n        var hitsParamsClone;\r\n        // If the parameters is an object then take out 'pos' for hits positions\r\n        if (typeof hitsParams === 'object' && !Array.isArray(hitsParams)) {\r\n            positions = [hitsParams.pos];\r\n            hitsParamsClone = hitsParams;\r\n        }\r\n        else {\r\n            positions = hitsParams;\r\n            hitsParamsClone = { pos: hitsParams };\r\n        }\r\n        // attributes\r\n        var pointPos = new Float32Array(positions.length * 3);\r\n        var i = 0;\r\n        for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\r\n            var hit = positions_1[_i];\r\n            pointPos[i] = hit[0];\r\n            pointPos[i + 1] = hit[1];\r\n            pointPos[i + 2] = hit[2];\r\n            i += 3;\r\n        }\r\n        // geometry\r\n        var geometry = new THREE.BufferGeometry();\r\n        geometry.setAttribute('position', new THREE.BufferAttribute(pointPos, 3));\r\n        geometry.computeBoundingSphere();\r\n        // material\r\n        var material = new THREE.PointsMaterial({ size: 10 });\r\n        material.color.set('#ff0000');\r\n        // object\r\n        var pointsObj = new THREE.Points(geometry, material);\r\n        pointsObj.userData = hitsParamsClone;\r\n        pointsObj.userData.uuid = pointsObj.uuid;\r\n        pointsObj.name = 'Hit';\r\n        // Setting uuid for selection from collections info\r\n        hitsParams.uuid = pointsObj.uuid;\r\n        return pointsObj;\r\n    };\r\n    /**\r\n     * Process the CLuster from the given parameters and get it as a geometry.\r\n     * @param clusterParams Parameters for the Cluster.\r\n     * @returns Cluster object.\r\n     */\r\n    PhoenixObjects.getCluster = function (clusterParams) {\r\n        var maxR = 1100.0;\r\n        var maxZ = 3200.0;\r\n        var length = clusterParams.energy * 0.003;\r\n        // geometry\r\n        var geometry = new THREE.BoxBufferGeometry(30, 30, length);\r\n        // material\r\n        var material = new THREE.MeshPhongMaterial({ color: 0xFFD166 });\r\n        // object\r\n        var cube = new THREE.Mesh(geometry, material);\r\n        var theta = 2 * Math.atan(Math.pow(Math.E, clusterParams.eta));\r\n        var pos = new THREE.Vector3(4000.0 * Math.cos(clusterParams.phi) * Math.sin(theta), 4000.0 * Math.sin(clusterParams.phi) * Math.sin(theta), 4000.0 * Math.cos(theta));\r\n        cube.position.x = pos.x;\r\n        cube.position.y = pos.y;\r\n        if (pos.x * pos.x + pos.y * pos.y > maxR * maxR) {\r\n            cube.position.x = maxR * Math.cos(clusterParams.phi);\r\n            cube.position.y = maxR * Math.sin(clusterParams.phi);\r\n        }\r\n        cube.position.z = Math.max(Math.min(pos.z, maxZ), -maxZ); // keep in maxZ range.\r\n        cube.lookAt(new THREE.Vector3(0, 0, 0));\r\n        cube.userData = clusterParams;\r\n        cube.name = 'Cluster';\r\n        // Setting uuid for selection from collections info\r\n        clusterParams.uuid = cube.uuid;\r\n        return cube;\r\n    };\r\n    return PhoenixObjects;\r\n}());\r\nexport { PhoenixObjects };\r\n//# sourceMappingURL=phoenix-objects.js.map","import { Group } from 'three';\r\nimport { Cut } from '../extras/cut.model';\r\nimport { PhoenixObjects } from './objects/phoenix-objects';\r\n/**\r\n * Loader for processing and loading an event.\r\n */\r\nvar PhoenixLoader = /** @class */ (function () {\r\n    function PhoenixLoader() {\r\n    }\r\n    /**\r\n     * Takes an object that represents ONE event and takes care of adding\r\n     * the different objects to the graphic library and the UI controls.\r\n     * @param eventData Object representing the event.\r\n     * @param graphicsLibrary Service containing functionality to draw the 3D objects.\r\n     * @param ui Service for showing menus and controls to manipulate the geometries.\r\n     * @param infoLogger Service for logging data to the information panel.\r\n     */\r\n    PhoenixLoader.prototype.buildEventData = function (eventData, graphicsLibrary, ui, infoLogger) {\r\n        this.graphicsLibrary = graphicsLibrary;\r\n        this.ui = ui;\r\n        this.eventData = eventData;\r\n        // Replacing tracks with tracks through Runge-Kutta\r\n        // TODO - make this configurable? Or possibly automatic if tracks have <2 positions to draw?\r\n        // Object.assign(this.eventData.Tracks, this.getTracksWithRungeKutta(this.eventData['Tracks']));\r\n        // initiate load\r\n        this.loadObjectTypes(eventData);\r\n        var eventNumber = eventData['event number'] ? eventData['event number'] : eventData['eventNumber'];\r\n        var runNumber = eventData['run number'] ? eventData['run number'] : eventData['runNumber'];\r\n        infoLogger.add('Event#' + eventNumber + ' from run#' + runNumber, 'Loaded');\r\n    };\r\n    /**\r\n     * Get the list of event names from the event data.\r\n     * @param eventsData Object containing all event data.\r\n     * @returns List of event names.\r\n     */\r\n    PhoenixLoader.prototype.getEventsList = function (eventsData) {\r\n        var eventsList = [];\r\n        for (var _i = 0, _a = Object.keys(eventsData); _i < _a.length; _i++) {\r\n            var eventName = _a[_i];\r\n            if (eventsData[eventName] !== null) {\r\n                eventsList.push(eventName);\r\n            }\r\n        }\r\n        return eventsList;\r\n    };\r\n    /**\r\n     * Get list of collections in the event data.\r\n     * @returns List of all collection names.\r\n     */\r\n    PhoenixLoader.prototype.getCollections = function () {\r\n        if (!this.eventData) {\r\n            return null;\r\n        }\r\n        var collections = [];\r\n        for (var _i = 0, _a = Object.keys(this.eventData); _i < _a.length; _i++) {\r\n            var objectType = _a[_i];\r\n            if (this.eventData[objectType] && typeof this.eventData[objectType] === 'object') {\r\n                for (var _b = 0, _c = Object.keys(this.eventData[objectType]); _b < _c.length; _b++) {\r\n                    var collection = _c[_b];\r\n                    collections.push(collection);\r\n                }\r\n            }\r\n        }\r\n        return collections;\r\n    };\r\n    /**\r\n     * Get the collection with the given collection name from the event data.\r\n     * @param collectionName Name of the collection to get.\r\n     * @returns An object containing the collection.\r\n     */\r\n    PhoenixLoader.prototype.getCollection = function (collectionName) {\r\n        if (!this.eventData) {\r\n            return null;\r\n        }\r\n        for (var _i = 0, _a = Object.keys(this.eventData); _i < _a.length; _i++) {\r\n            var objectType = _a[_i];\r\n            if (this.eventData[objectType]) {\r\n                for (var _b = 0, _c = Object.keys(this.eventData[objectType]); _b < _c.length; _b++) {\r\n                    var collection = _c[_b];\r\n                    if (collection === collectionName) {\r\n                        return this.eventData[objectType][collection];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Receives an object containing the data from an event and parses it\r\n     * to reconstruct the different collections of physics objects.\r\n     * @param eventData Representing ONE event (expressed in the Phoenix format).\r\n     */\r\n    PhoenixLoader.prototype.loadObjectTypes = function (eventData) {\r\n        var _this = this;\r\n        if (eventData.Tracks) {\r\n            // (Optional) Cuts can be added to any physics object.\r\n            var cuts = [\r\n                new Cut('chi2', 0, 50),\r\n                new Cut('dof', 0, 100),\r\n                new Cut('mom', 0, 500)\r\n            ];\r\n            this.addObjectType(eventData.Tracks, PhoenixObjects.getTrack, 'Tracks', cuts);\r\n            // infoLogger.add('Got ' + Object.keys(eventData.Tracks).length + ' Track collections.');\r\n        }\r\n        if (eventData.Jets) {\r\n            // (Optional) Cuts can be added to any physics object.\r\n            var cuts = [\r\n                new Cut('phi', -Math.PI, Math.PI),\r\n                new Cut('eta', 0, 100),\r\n                new Cut('energy', 2000, 10000)\r\n            ];\r\n            var addJetsSizeOption = function (typeFolder, typeFolderPM) {\r\n                if (typeFolder) {\r\n                    var sizeMenu = typeFolder.add({ jetsScale: 100 }, 'jetsScale', 1, 200)\r\n                        .name('Jets Size (%)');\r\n                    sizeMenu.onChange(function (value) {\r\n                        _this.graphicsLibrary.getSceneManager().scaleJets(value);\r\n                    });\r\n                }\r\n                // Phoenix menu\r\n                if (typeFolderPM) {\r\n                    typeFolderPM.addConfig('slider', {\r\n                        label: 'Jets Size (%)',\r\n                        min: 1, max: 200,\r\n                        allowCustomValue: true,\r\n                        onChange: function (value) {\r\n                            _this.graphicsLibrary.getSceneManager().scaleJets(value);\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n            this.addObjectType(eventData.Jets, PhoenixObjects.getJet, 'Jets', cuts, addJetsSizeOption);\r\n        }\r\n        if (eventData.Hits) {\r\n            this.addObjectType(eventData.Hits, PhoenixObjects.getHits, 'Hits');\r\n        }\r\n        if (eventData.CaloClusters) {\r\n            // (Optional) Cuts can be added to any physics object.\r\n            var cuts = [\r\n                new Cut('phi', -Math.PI, Math.PI),\r\n                new Cut('eta', 0, 100),\r\n                new Cut('energy', 2000, 10000)\r\n            ];\r\n            this.addObjectType(eventData.CaloClusters, PhoenixObjects.getCluster, 'CaloClusters', cuts);\r\n        }\r\n        if (eventData.Muons) {\r\n            this.addObjectType(eventData.Muons, this.getMuon, 'Muons');\r\n        }\r\n    };\r\n    /**\r\n     * Adds to the event display all collections of a given object type.\r\n     * @param object Contains all collections of a given type (Tracks, Jets, CaloClusters...).\r\n     * @param getObject Function that handles of reconstructing objects of the given type.\r\n     * @param typeName Label for naming the object type.\r\n     * @param cuts Filters that can be applied to the objects.\r\n     * @param extendEventDataTypeUI A callback to add more options to event data type UI folder.\r\n     */\r\n    PhoenixLoader.prototype.addObjectType = function (object, getObject, typeName, cuts, extendEventDataTypeUI) {\r\n        var typeFolder = this.ui.addEventDataTypeFolder(typeName, extendEventDataTypeUI);\r\n        var typeFolderPM = this.ui.addEventDataTypeFolderPM(typeName, extendEventDataTypeUI);\r\n        var objectGroup = this.graphicsLibrary.addEventDataTypeGroup(typeName);\r\n        var collectionsList = this.getObjectTypeCollections(object);\r\n        var _loop_1 = function (collectionName) {\r\n            var objectCollection = object[collectionName];\r\n            // console.log(typeName+\" collection \"+collectionName+\" has \"+objectCollection.length+\" constituents.\")\r\n            this_1.addCollection(objectCollection, collectionName, getObject, objectGroup);\r\n            cuts = cuts === null || cuts === void 0 ? void 0 : cuts.filter(function (cut) { return objectCollection[0][cut.field]; });\r\n            this_1.ui.addCollection(typeFolder, collectionName, cuts);\r\n            this_1.ui.addCollectionPM(typeFolderPM, collectionName, cuts);\r\n        };\r\n        var this_1 = this;\r\n        for (var _i = 0, collectionsList_1 = collectionsList; _i < collectionsList_1.length; _i++) {\r\n            var collectionName = collectionsList_1[_i];\r\n            _loop_1(collectionName);\r\n        }\r\n    };\r\n    /**\r\n     * Adds to the event display all the objects inside a collection.\r\n     * @param objectCollection Contains the params for every object of the collection.\r\n     * @param collectionName Label to UNIQUELY identify the collection.\r\n     * @param getObject Handles reconstructing the objects of the collection.\r\n     * @param objectGroup Group containing the collections of the same object type.\r\n     */\r\n    PhoenixLoader.prototype.addCollection = function (objectCollection, collectionName, getObject, objectGroup) {\r\n        var collscene = new Group();\r\n        collscene.name = collectionName;\r\n        for (var _i = 0, objectCollection_1 = objectCollection; _i < objectCollection_1.length; _i++) {\r\n            var objectParams = objectCollection_1[_i];\r\n            var object = getObject.bind(this)(objectParams);\r\n            if (object) {\r\n                collscene.add(object);\r\n            }\r\n        }\r\n        objectGroup.add(collscene);\r\n        // console.log(\"-> Adding a threejs group called \"+collscene.name+\" with \"+collscene.children.length+\" children to the group called \"+objectGroup.name);\r\n    };\r\n    /**\r\n     * Get collection names of a given object type.\r\n     * @param object Contains all collections of a given type (Tracks, Jets, CaloClusters etc.).\r\n     * @returns List of collection names of an object type (Tracks, Jets, CaloClusters etc.).\r\n     */\r\n    PhoenixLoader.prototype.getObjectTypeCollections = function (object) {\r\n        var collectionsList = [];\r\n        for (var _i = 0, _a = Object.keys(object); _i < _a.length; _i++) {\r\n            var collectionName = _a[_i];\r\n            if (object[collectionName] !== null) {\r\n                collectionsList.push(collectionName);\r\n            }\r\n        }\r\n        return collectionsList;\r\n    };\r\n    /**\r\n     * Process the Muon from the given parameters and get it as a group.\r\n     * @param muonParams Parameters of the Muon.\r\n     * @returns Muon group containing Clusters and Tracks.\r\n     */\r\n    PhoenixLoader.prototype.getMuon = function (muonParams) {\r\n        var muonScene = new Group();\r\n        for (var _i = 0, _a = muonParams.LinkedClusters; _i < _a.length; _i++) {\r\n            var clusterID = _a[_i];\r\n            var clusterColl = clusterID.split(':')[0];\r\n            var clusterIndex = clusterID.split(':')[1];\r\n            if (clusterColl && clusterIndex && this.eventData.CaloClusters && this.eventData.CaloClusters[clusterColl]) {\r\n                var clusterParams = this.eventData.CaloClusters[clusterColl][clusterIndex];\r\n                if (clusterParams) {\r\n                    var cluster = PhoenixObjects.getCluster(clusterParams);\r\n                    muonScene.add(cluster);\r\n                }\r\n            }\r\n        }\r\n        for (var _b = 0, _c = muonParams.LinkedTracks; _b < _c.length; _b++) {\r\n            var trackID = _c[_b];\r\n            var trackColl = trackID.split(':')[0];\r\n            var trackIndex = trackID.split(':')[1];\r\n            if (trackColl && trackIndex && this.eventData.Tracks && this.eventData.Tracks[trackColl]) {\r\n                var trackParams = this.eventData.Tracks[trackColl][trackIndex];\r\n                if (trackParams) {\r\n                    var track = PhoenixObjects.getTrack(trackParams);\r\n                    muonScene.add(track);\r\n                }\r\n            }\r\n        }\r\n        // uuid for selection of muons from the collections info panel\r\n        muonParams.uuid = muonScene.uuid;\r\n        muonScene.name = 'Muon';\r\n        // add to scene\r\n        return muonScene;\r\n    };\r\n    /**\r\n     * Get metadata associated to the event (experiment info, time, run, event...).\r\n     * @returns Metadata of the event.\r\n     */\r\n    PhoenixLoader.prototype.getEventMetadata = function () {\r\n        var metadata = [];\r\n        // Dividing event meta data into groups by keys and label\r\n        // For example, the first array group is for \"Run / Event / LS\"\r\n        var eventDataPropGroups = [\r\n            [\r\n                { keys: ['runNumber', 'run number'], label: 'Run' },\r\n                { keys: ['eventNumber', 'event number'], label: 'Event' },\r\n                { keys: ['ls'], label: 'LS' },\r\n                { keys: ['lumiBlock'], label: 'LumiBlock' }\r\n            ],\r\n            [\r\n                { keys: ['time'], label: 'Data recorded' }\r\n            ]\r\n        ];\r\n        var eventDataKeys = Object.keys(this.eventData);\r\n        // Iterating the group\r\n        for (var _i = 0, eventDataPropGroups_1 = eventDataPropGroups; _i < eventDataPropGroups_1.length; _i++) {\r\n            var eventDataPropGroup = eventDataPropGroups_1[_i];\r\n            var combinedProps = {};\r\n            // Iterating the props inside a group\r\n            for (var _a = 0, eventDataPropGroup_1 = eventDataPropGroup; _a < eventDataPropGroup_1.length; _a++) {\r\n                var eventDataProp = eventDataPropGroup_1[_a];\r\n                // Iterating each possible key of a prop\r\n                for (var _b = 0, _c = eventDataProp.keys; _b < _c.length; _b++) {\r\n                    var eventDataPropKey = _c[_b];\r\n                    if (eventDataKeys.includes(eventDataPropKey) && this.eventData[eventDataPropKey]) {\r\n                        combinedProps[eventDataProp.label] = this.eventData[eventDataPropKey];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (Object.keys(combinedProps).length > 0) {\r\n                // Joining and pushing the collected combined properties to the actual metadata\r\n                metadata.push({\r\n                    label: Object.keys(combinedProps).join(' / '),\r\n                    value: Object.values(combinedProps).join(' / ')\r\n                });\r\n            }\r\n        }\r\n        return metadata;\r\n    };\r\n    return PhoenixLoader;\r\n}());\r\nexport { PhoenixLoader };\r\n//# sourceMappingURL=phoenix-loader.js.map","import { PhoenixLoader } from '../loaders/phoenix-loader';\r\n/**\r\n * Configuration for preset views and event data loader.\r\n */\r\nvar Configuration = /** @class */ (function () {\r\n    /**\r\n     * Constructor for the Configuration.\r\n     * @param elementId ID of the wrapper element.\r\n     * @param enableDatGUIMenu Whether to enable dat.GUI menu or not.\r\n     */\r\n    function Configuration(elementId, enableDatGUIMenu) {\r\n        if (elementId === void 0) { elementId = 'eventDisplay'; }\r\n        if (enableDatGUIMenu === void 0) { enableDatGUIMenu = false; }\r\n        this.elementId = elementId;\r\n        this.presetViews = [];\r\n        this.eventDataLoader = new PhoenixLoader();\r\n        this.enableDatGUIMenu = enableDatGUIMenu;\r\n    }\r\n    /**\r\n     * Get if there are any preset views.\r\n     * @returns If there are any preset views.\r\n     */\r\n    Configuration.prototype.anyPresetView = function () {\r\n        return this.presetViews.length > 0;\r\n    };\r\n    /**\r\n     * Set the event data loader to be used.\r\n     * @param eventDataLoader Event data loader responsible for\r\n     * processing and loading event data.\r\n     */\r\n    Configuration.prototype.setEventDataLoader = function (eventDataLoader) {\r\n        this.eventDataLoader = eventDataLoader;\r\n    };\r\n    /**\r\n     * Get the event data loader responsible for processing and loading event data.\r\n     * @returns The event data loader.\r\n     */\r\n    Configuration.prototype.getEventDataLoader = function () {\r\n        return this.eventDataLoader;\r\n    };\r\n    /**\r\n     * Set he root node for phoenix menu.\r\n     * @param phoenixMenuNode The phoenix menu node to be set as the root node.\r\n     */\r\n    Configuration.prototype.setPhoenixMenuRoot = function (phoenixMenuNode) {\r\n        this.phoenixMenuRoot = phoenixMenuNode;\r\n    };\r\n    /**\r\n     * Get he root node for phoenix menu.\r\n     * @return The root node of phoenix menu.\r\n     */\r\n    Configuration.prototype.getPhoenixMenuRoot = function () {\r\n        return this.phoenixMenuRoot;\r\n    };\r\n    return Configuration;\r\n}());\r\nexport { Configuration };\r\n//# sourceMappingURL=configuration.model.js.map","import { Vector3, Geometry, Face3, Group, Mesh, MeshBasicMaterial, EdgesGeometry, LineBasicMaterial, DoubleSide, LineSegments, BufferGeometry } from \"three\";\r\n/**\r\n * Physics objects that make up an event in CMS that are not a part of {@link PhoenixObjects}.\r\n */\r\nvar CMSObjects = /** @class */ (function () {\r\n    function CMSObjects() {\r\n    }\r\n    /**\r\n     * Process the Muon Chamber from the given parameters.\r\n     * and get it as a geometry.\r\n     * @param muonChamberParams Parameters of the Muon Chamber.\r\n     * @returns Muon Chamber object.\r\n     */\r\n    CMSObjects.getMuonChamber = function (muonChamberParams) {\r\n        var faces = [];\r\n        var backs = [];\r\n        for (var _i = 0, _a = Object.keys(muonChamberParams); _i < _a.length; _i++) {\r\n            var param = _a[_i];\r\n            if (param.startsWith('front')) {\r\n                faces.push(new Vector3().fromArray(muonChamberParams[param]));\r\n            }\r\n            else if (param.startsWith('back')) {\r\n                backs.push(new Vector3().fromArray(muonChamberParams[param]));\r\n            }\r\n        }\r\n        var box = new Geometry();\r\n        box.vertices = faces.concat(backs);\r\n        // front\r\n        box.faces.push(new Face3(0, 1, 2));\r\n        box.faces.push(new Face3(2, 3, 0));\r\n        // back\r\n        box.faces.push(new Face3(4, 5, 6));\r\n        box.faces.push(new Face3(6, 7, 4));\r\n        // top\r\n        box.faces.push(new Face3(4, 5, 1));\r\n        box.faces.push(new Face3(1, 0, 4));\r\n        // bottom\r\n        box.faces.push(new Face3(7, 6, 2));\r\n        box.faces.push(new Face3(2, 3, 7));\r\n        // left\r\n        box.faces.push(new Face3(0, 3, 7));\r\n        box.faces.push(new Face3(7, 4, 0));\r\n        // right\r\n        box.faces.push(new Face3(1, 5, 6));\r\n        box.faces.push(new Face3(6, 2, 1));\r\n        box.computeFaceNormals();\r\n        box.computeVertexNormals();\r\n        var boxBuffer = new BufferGeometry().fromGeometry(box);\r\n        var boxObject = new Mesh(boxBuffer, new MeshBasicMaterial({\r\n            color: 0xff0000,\r\n            transparent: true,\r\n            opacity: 0.1,\r\n            side: DoubleSide\r\n        }));\r\n        boxObject.userData = muonChamberParams;\r\n        boxObject.name = 'MuonChamber';\r\n        // These are the lines along the box edges\r\n        var boxEdges = new EdgesGeometry(boxBuffer);\r\n        var lineBoxObject = new LineSegments(boxEdges, new LineBasicMaterial({\r\n            color: 0xffffff,\r\n            transparent: true,\r\n            opacity: 0.7\r\n        }));\r\n        var muonChamber = new Group();\r\n        muonChamber.add(boxObject);\r\n        muonChamber.add(lineBoxObject);\r\n        muonChamberParams.uuid = boxObject.uuid;\r\n        return muonChamber;\r\n    };\r\n    return CMSObjects;\r\n}());\r\nexport { CMSObjects };\r\n//# sourceMappingURL=cms-objects.js.map","/**\r\n * Preset view for easily transforming/changing camera position to a specified position.\r\n */\r\nvar PresetView = /** @class */ (function () {\r\n    /**\r\n     * Create a preset view.\r\n     * @param name Name of the preset view.\r\n     * @param cameraPos Position to which the camera is to be set.\r\n     * @param icon Icon of the preset view (to describe the view angle).\r\n     */\r\n    function PresetView(name, cameraPos, icon) {\r\n        this.name = name;\r\n        this.cameraPos = cameraPos;\r\n        this.icon = icon;\r\n    }\r\n    /**\r\n     * Get the URL of the preset view icon.\r\n     * @returns Icon URL.\r\n     */\r\n    PresetView.prototype.getIconURL = function () {\r\n        return 'assets/preset-views/' + this.icon + '.svg#' + this.icon;\r\n    };\r\n    return PresetView;\r\n}());\r\nexport { PresetView };\r\n//# sourceMappingURL=preset-view.model.js.map","var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { PhoenixLoader } from './phoenix-loader';\r\nimport { Vector3, QuadraticBezierCurve3 } from 'three';\r\nimport { CMSObjects } from './objects/cms-objects';\r\nimport JSZip from 'jszip';\r\n/**\r\n * PhoenixLoader for processing and loading a CMS event.\r\n */\r\nvar CMSLoader = /** @class */ (function (_super) {\r\n    __extends(CMSLoader, _super);\r\n    /**\r\n     * Constructor for the CMS loader.\r\n     */\r\n    function CMSLoader() {\r\n        var _this = _super.call(this) || this;\r\n        /** Scale factor for resizing geometry to fit Phoenix event display. */\r\n        _this.geometryScale = 1000;\r\n        _this.data = {};\r\n        return _this;\r\n    }\r\n    /**\r\n     * Loads all the object types and collections of event data.\r\n     * Overridden from {@link PhoenixLoader}.\r\n     * @param eventData Event data of a CMS event containing all collections.\r\n     */\r\n    CMSLoader.prototype.loadObjectTypes = function (eventData) {\r\n        _super.prototype.loadObjectTypes.call(this, eventData);\r\n        if (eventData.MuonChambers) {\r\n            this.addObjectType(eventData.MuonChambers, CMSObjects.getMuonChamber, 'MuonChambers');\r\n        }\r\n    };\r\n    /**\r\n     * Read an \".ig\" archive file and access the event data through a callback.\r\n     * @param path Path to the \".ig\" file.\r\n     * @param onFileRead Callback called with an array of event data when the file is read.\r\n     * @param eventPathName Complete event path or event number as in the \".ig\" archive.\r\n     */\r\n    CMSLoader.prototype.readIgArchive = function (path, onFileRead, eventPathName) {\r\n        var igArchive = new JSZip();\r\n        var eventsDataInIg = [];\r\n        fetch(path).then(function (res) { return res.arrayBuffer(); }).then(function (res) {\r\n            igArchive.loadAsync(res).then(function () {\r\n                var allFilesPath = Object.keys(igArchive.files);\r\n                // If the event path or name is given then filter all data to get the required events\r\n                if (eventPathName) {\r\n                    allFilesPath = allFilesPath.filter(function (filePath) { return filePath.includes(eventPathName); });\r\n                }\r\n                var i = 1;\r\n                var _loop_1 = function (filePathInIg) {\r\n                    // If the files are in the \"Events\" folder then process them.\r\n                    if (filePathInIg.toLowerCase().startsWith('events')) {\r\n                        igArchive.file(filePathInIg).async('string')\r\n                            .then(function (singleEvent) {\r\n                            // The data has some inconsistencies which need to be removed to properly parse JSON\r\n                            singleEvent = singleEvent\r\n                                .replace(/'/g, '\"').replace(/\\(/g, '[')\r\n                                .replace(/\\)/g, ']').replace(/nan/g, '0');\r\n                            var eventJSON = JSON.parse(singleEvent);\r\n                            eventJSON.eventPath = filePathInIg;\r\n                            eventsDataInIg.push(eventJSON);\r\n                            if (i === allFilesPath.length) {\r\n                                onFileRead(eventsDataInIg);\r\n                            }\r\n                            i++;\r\n                        });\r\n                    }\r\n                    else {\r\n                        if (i === allFilesPath.length) {\r\n                            onFileRead(eventsDataInIg);\r\n                        }\r\n                        i++;\r\n                    }\r\n                };\r\n                for (var _i = 0, allFilesPath_1 = allFilesPath; _i < allFilesPath_1.length; _i++) {\r\n                    var filePathInIg = allFilesPath_1[_i];\r\n                    _loop_1(filePathInIg);\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Load event data from an \".ig\" archive.\r\n     * @param filePath Path to the \".ig\" archive file.\r\n     * @param eventPathName Complete event path or event number as in the \".ig\" archive.\r\n     * @param onEventRead Callback called when the event data is read.\r\n     */\r\n    CMSLoader.prototype.loadEventDataFromIg = function (filePath, eventPathName, onEventRead) {\r\n        this.readIgArchive(filePath, function (allEvents) {\r\n            onEventRead(allEvents[0]);\r\n        }, eventPathName);\r\n    };\r\n    /**\r\n     * Get all event data.\r\n     * @returns Event data with Hits, Tracks, Jets and CaloClusters.\r\n     */\r\n    CMSLoader.prototype.getEventData = function () {\r\n        var eventInfo = this.data['Collections']['Event_V2'][0];\r\n        var eventData = {\r\n            runNumber: eventInfo[0],\r\n            eventNumber: eventInfo[1],\r\n            ls: eventInfo[2],\r\n            time: eventInfo[5],\r\n            Hits: {},\r\n            Tracks: {},\r\n            Jets: {},\r\n            CaloClusters: {},\r\n            MuonChambers: {}\r\n        };\r\n        // Getting Hits\r\n        eventData.Hits = this.getTrackingClusters(eventData.Hits);\r\n        // Getting Tracks\r\n        eventData.Tracks = this.getTracks();\r\n        // Getting Jets\r\n        eventData.Jets = this.getJets();\r\n        // Getting CaloClusters\r\n        eventData.CaloClusters = this.getCaloClusters();\r\n        // Getting MuonChambers\r\n        eventData.MuonChambers = this.getMuonChambers();\r\n        // Undefining object types if there is no event data\r\n        for (var _i = 0, _a = ['Hits', 'Tracks', 'Jets', 'CaloClusters', 'MuonChambers']; _i < _a.length; _i++) {\r\n            var objectType = _a[_i];\r\n            if (Object.keys(eventData[objectType]).length === 0) {\r\n                eventData[objectType] = undefined;\r\n            }\r\n        }\r\n        return eventData;\r\n    };\r\n    /**\r\n     * Get event data of all events.\r\n     * @param allEventsDataFromIg An array containing data of all events from \".ig\" file.\r\n     * @returns An object containing event data for all events.\r\n     */\r\n    CMSLoader.prototype.getAllEventsData = function (allEventsDataFromIg) {\r\n        var allEventsData = {};\r\n        for (var _i = 0, allEventsDataFromIg_1 = allEventsDataFromIg; _i < allEventsDataFromIg_1.length; _i++) {\r\n            var eventData = allEventsDataFromIg_1[_i];\r\n            this.data = eventData;\r\n            allEventsData[eventData.eventPath] = this.getEventData();\r\n        }\r\n        return allEventsData;\r\n    };\r\n    /**\r\n     * Get all tracking clusters from the event data.\r\n     * @param Hits Hits object in which all cluster collections are to be put.\r\n     * @returns Hits object containing all Cluster collections.\r\n     */\r\n    CMSLoader.prototype.getTrackingClusters = function (Hits) {\r\n        var _this = this;\r\n        // These are the collections with point cloud geometries\r\n        var clusterCollections = [\r\n            'TrackingRecHits_V1',\r\n            'SiStripClusters_V1',\r\n            'SiPixelClusters_V1',\r\n            'CSCLCTDigis_V1'\r\n        ];\r\n        var newHits = this.getObjectCollections(clusterCollections, function (objectParams) {\r\n            if (objectParams['pos']) {\r\n                // Increasing the scale to fit Phoenix's event display\r\n                objectParams['pos'] = objectParams['pos']\r\n                    .map(function (point) { return point * _this.geometryScale; });\r\n            }\r\n        });\r\n        Object.assign(Hits, newHits);\r\n        return Hits;\r\n    };\r\n    /**\r\n     * Get all CaloClusters from the event data.\r\n     * @returns CaloClusters object containing all CaloClusters collections.\r\n     */\r\n    CMSLoader.prototype.getCaloClusters = function () {\r\n        var _this = this;\r\n        var caloClustersCollections = [\r\n            'SuperClusters_V1'\r\n        ];\r\n        var CaloClusters = this.getObjectCollections(caloClustersCollections, function (objectParams) {\r\n            if (objectParams['energy']) {\r\n                // If the attribute of Calo Cluster is energy then scale it to a higher value\r\n                objectParams['energy'] *= _this.geometryScale;\r\n            }\r\n        });\r\n        //! TO BE REVIEWED - Not using extras and assocs - output might be different\r\n        // let ri = 0;\r\n        // for (let i = 0; i < assocs.length; i++) {\r\n        //     ri = assocs[ri][1][1];\r\n        //     CaloClusters[caloClusterCollection].push(extras[ri]);\r\n        // }\r\n        return CaloClusters;\r\n    };\r\n    /**\r\n     * Get all Jets from the event data.\r\n     * @returns Jets object containing all Jets collections.\r\n     */\r\n    CMSLoader.prototype.getJets = function () {\r\n        var _this = this;\r\n        var Jets = {};\r\n        // Filtering collections to get all Jets collections\r\n        var jetsCollections = Object.keys(this.data['Collections'])\r\n            .filter(function (key) { return key.toLowerCase().includes('jets'); });\r\n        var cuts = [\r\n            { attribute: 'et', min: 10 },\r\n            { attribute: 'energy', min: 10 }\r\n        ];\r\n        Jets = this.getObjectCollections(jetsCollections, function (objectParams) {\r\n            for (var _i = 0, _a = ['et', 'energy']; _i < _a.length; _i++) {\r\n                var energyAttribute = _a[_i];\r\n                if (objectParams[energyAttribute]) {\r\n                    objectParams[energyAttribute] *= _this.geometryScale;\r\n                    break;\r\n                }\r\n            }\r\n        }, cuts);\r\n        return Jets;\r\n    };\r\n    /**\r\n     * Get all Muon Chambers from the event data.\r\n     * @returns MuonChambers object containing all Muon Chambers collections.\r\n     */\r\n    CMSLoader.prototype.getMuonChambers = function () {\r\n        var _this = this;\r\n        var muonChambersCollections = [\r\n            'MatchingCSCs_V1',\r\n            'MuonChambers_V1'\r\n        ];\r\n        var MuonChambers = this.getObjectCollections(muonChambersCollections, function (muonChamberParams) {\r\n            for (var _i = 0, _a = Object.keys(muonChamberParams); _i < _a.length; _i++) {\r\n                var muonChamberParam = _a[_i];\r\n                if (muonChamberParam.startsWith('front') || muonChamberParam.startsWith('back')) {\r\n                    muonChamberParams[muonChamberParam] = muonChamberParams[muonChamberParam]\r\n                        .map(function (val) { return val * _this.geometryScale; });\r\n                }\r\n            }\r\n        });\r\n        return MuonChambers;\r\n    };\r\n    /**\r\n     * Common function for linearly getting event data of collections of an object type.\r\n     * @param collections Keys for collections to be iterated.\r\n     * @param processObject Callback for applying a custom logic to object params.\r\n     * @param cuts Cuts for defining a minimum and maximum value of an attribute.\r\n     * @returns An object containing all event data from the given collections.\r\n     */\r\n    CMSLoader.prototype.getObjectCollections = function (collections, processObject, cuts) {\r\n        var _this = this;\r\n        var ObjectType = {};\r\n        // Filter to check if the provided collections are indeed inside the data\r\n        collections = collections.filter(function (key) { return _this.data['Collections'][key]; });\r\n        // Iterating all collections\r\n        for (var _i = 0, collections_1 = collections; _i < collections_1.length; _i++) {\r\n            var collection = collections_1[_i];\r\n            ObjectType[collection] = [];\r\n            var objectAttributes = this.data['Types'][collection];\r\n            var _loop_2 = function (physicsObject) {\r\n                var objectParams = {};\r\n                // Filling object params using the given types\r\n                objectAttributes.forEach(function (attribute, attributeIndex) {\r\n                    objectParams[attribute[0]] = physicsObject[attributeIndex];\r\n                });\r\n                // Applying cuts to object (if any)\r\n                if (cuts) {\r\n                    var maxPass = true;\r\n                    var minPass = true;\r\n                    for (var _i = 0, cuts_1 = cuts; _i < cuts_1.length; _i++) {\r\n                        var cut = cuts_1[_i];\r\n                        // Check if the attribute actually exists\r\n                        if (objectParams[cut.attribute]) {\r\n                            if (cut.max && objectParams[cut.attribute] > cut.max) {\r\n                                maxPass = false;\r\n                                break;\r\n                            }\r\n                            if (cut.min && objectParams[cut.attribute] < cut.min) {\r\n                                minPass = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (maxPass && minPass) {\r\n                        // Custom processing of object (if any)\r\n                        processObject === null || processObject === void 0 ? void 0 : processObject(objectParams);\r\n                        ObjectType[collection].push(objectParams);\r\n                    }\r\n                }\r\n                else {\r\n                    // Custom processing of object (if any)\r\n                    processObject === null || processObject === void 0 ? void 0 : processObject(objectParams);\r\n                    ObjectType[collection].push(objectParams);\r\n                }\r\n            };\r\n            // Iterating a single object collection to process all objects\r\n            for (var _a = 0, _b = this.data['Collections'][collection]; _a < _b.length; _a++) {\r\n                var physicsObject = _b[_a];\r\n                _loop_2(physicsObject);\r\n            }\r\n            // If the object collection has no data then remove it\r\n            if (ObjectType[collection].length === 0) {\r\n                delete ObjectType[collection];\r\n            }\r\n        }\r\n        return ObjectType;\r\n    };\r\n    /**\r\n     * Get all Tracks from the event data.\r\n     * @returns Tracks object containing all Tracks collections.\r\n     */\r\n    CMSLoader.prototype.getTracks = function () {\r\n        var _this = this;\r\n        var Tracks = {};\r\n        // All collections with tracks\r\n        var tracksCollections = [\r\n            {\r\n                collection: 'Tracks_V1', extras: 'Extras_V1',\r\n                assocs: 'TrackExtras_V1', color: '0xff0000', min_pt: 1\r\n            },\r\n            {\r\n                collection: 'Tracks_V2', extras: 'Extras_V1',\r\n                assocs: 'TrackExtras_V1', color: '0xff0000', min_pt: 1\r\n            },\r\n            {\r\n                collection: 'Tracks_V3', extras: 'Extras_V1',\r\n                assocs: 'TrackExtras_V1', color: '0xff0000', min_pt: 1\r\n            },\r\n            {\r\n                collection: 'StandaloneMuons_V2', extras: 'Extras_V1',\r\n                assocs: 'MuonTrackExtras_V1', color: '0xf57842', min_pt: 1\r\n            },\r\n            {\r\n                collection: 'PATStandaloneMuons_V1', extras: 'Extras_V1',\r\n                assocs: 'PATMuonTrackExtras_V1', color: '0xf5aa42', min_pt: 1\r\n            },\r\n            {\r\n                collection: 'TrackerMuons_V2', extras: 'Extras_V1',\r\n                assocs: 'MuonTrackerExtras_V1', color: '0xe8d546', min_pt: 2\r\n            },\r\n            {\r\n                collection: 'GsfElectrons_V1', extras: 'Extras_V1',\r\n                assocs: 'GsfElectronExtras_V1', color: '0x1CFF1A', min_pt: 10\r\n            },\r\n            {\r\n                collection: 'GsfElectrons_V2', extras: 'Extras_V1',\r\n                assocs: 'GsfElectronExtras_V1', color: '0x1bcf9f', min_pt: 10\r\n            },\r\n            {\r\n                collection: 'GsfElectrons_V3', extras: 'Extras_V1',\r\n                assocs: 'GsfElectronExtras_V1', color: '0x1ad9ff', min_pt: 10\r\n            },\r\n            {\r\n                collection: 'PATElectrons_V1', extras: 'Extras_V1',\r\n                assocs: 'PATElectronExtras_V1', color: '0x1a40ff', min_pt: 1\r\n            }\r\n        ];\r\n        // Filtering to check if data actually exists in collections\r\n        tracksCollections = tracksCollections\r\n            .filter(function (obj) { return _this.data['Collections'][obj.collection]; });\r\n        var _loop_3 = function (tracksCollection) {\r\n            Tracks[tracksCollection.collection] = [];\r\n            // Processing tracks using associations and extras\r\n            var tracks = this_1.data['Collections'][tracksCollection.collection];\r\n            var extras = this_1.data['Collections'][tracksCollection.extras];\r\n            var assocs = this_1.data['Associations'][tracksCollection.assocs];\r\n            // Properties/attributes of tracks\r\n            var trackTypes = this_1.data['Types'][tracksCollection.collection];\r\n            // Variables to be used inside the loop\r\n            var ti = void 0, ei = void 0, p1 = void 0, d1 = void 0, p2 = void 0, d2 = void 0, distance = void 0, scale = void 0, cp1 = void 0, cp2 = void 0, curve = void 0, trackParams;\r\n            var _loop_4 = function (i) {\r\n                // Current track info\r\n                trackParams = {};\r\n                // Set properties/attributes of track\r\n                trackTypes.forEach(function (attribute, attributeIndex) {\r\n                    trackParams[attribute[0]] = tracks[i][attributeIndex];\r\n                });\r\n                // SKIPPING TRACKS WITH pt < min_pt\r\n                if (trackParams.pt < tracksCollection.min_pt) {\r\n                    return \"continue\";\r\n                }\r\n                trackParams.color = tracksCollection.color;\r\n                // Track i - location in assocs\r\n                ti = assocs[i][0][1];\r\n                // Extras i - location in assocs\r\n                ei = assocs[i][1][1];\r\n                // Position 1 of current track\r\n                p1 = new Vector3(extras[ei][0][0], extras[ei][0][1], extras[ei][0][2]);\r\n                // Direction of position 1 of current track\r\n                d1 = new Vector3(extras[ei][1][0], extras[ei][1][1], extras[ei][1][2]);\r\n                d1.normalize();\r\n                // Position 2 of current track\r\n                p2 = new Vector3(extras[ei][2][0], extras[ei][2][1], extras[ei][2][2]);\r\n                // Direction of position 2 of current track\r\n                d2 = new Vector3(extras[ei][3][0], extras[ei][3][1], extras[ei][3][2]);\r\n                d2.normalize();\r\n                // Calculate the distance from position 1 to position 2\r\n                distance = p1.distanceTo(p2);\r\n                scale = distance * 0.25;\r\n                // Calculating the control points to generate a bezier curve\r\n                cp1 = new Vector3(p1.x + scale * d1.x, p1.y + scale * d1.y, p1.z + scale * d1.z);\r\n                cp2 = new Vector3(p2.x + scale * d2.x, p2.y + scale * d2.y, p2.z + scale * d2.z);\r\n                // Create the track curve\r\n                curve = new QuadraticBezierCurve3(p1, cp1, p2);\r\n                var positions = [];\r\n                // Divide the curve into points to put into positions array\r\n                for (var _i = 0, _a = curve.getPoints(24); _i < _a.length; _i++) {\r\n                    var position = _a[_i];\r\n                    // Increasing the scale to fit Phoenix's event display\r\n                    position.multiplyScalar(this_1.geometryScale);\r\n                    positions.push([position.x, position.y, position.z]);\r\n                }\r\n                trackParams.pos = positions;\r\n                Tracks[tracksCollection.collection].push(trackParams);\r\n            };\r\n            for (var i = 0; i < assocs.length; i++) {\r\n                _loop_4(i);\r\n            }\r\n            if (Tracks[tracksCollection.collection].length === 0) {\r\n                delete Tracks[tracksCollection.collection];\r\n            }\r\n        };\r\n        var this_1 = this;\r\n        for (var _i = 0, tracksCollections_1 = tracksCollections; _i < tracksCollections_1.length; _i++) {\r\n            var tracksCollection = tracksCollections_1[_i];\r\n            _loop_3(tracksCollection);\r\n        }\r\n        return Tracks;\r\n    };\r\n    /**\r\n     * Get CMS specific metadata associated to the event.\r\n     * @returns Metadata of the event.\r\n     */\r\n    CMSLoader.prototype.getEventMetadata = function () {\r\n        var metadata = _super.prototype.getEventMetadata.call(this);\r\n        var eventInfo = this.data['Collections']['Event_V2'][0];\r\n        if (eventInfo[3]) {\r\n            metadata.push({\r\n                label: 'Orbit',\r\n                value: eventInfo[3]\r\n            });\r\n        }\r\n        return metadata;\r\n    };\r\n    return CMSLoader;\r\n}(PhoenixLoader));\r\nexport { CMSLoader };\r\n//# sourceMappingURL=cms-loader.js.map","var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { PhoenixLoader } from './phoenix-loader';\r\n/**\r\n * PhoenixLoader for processing and loading an event from the JiveXML data format.\r\n */\r\nvar JiveXMLLoader = /** @class */ (function (_super) {\r\n    __extends(JiveXMLLoader, _super);\r\n    /**\r\n     * Constructor for the JiveXMLLoader.\r\n     */\r\n    function JiveXMLLoader() {\r\n        var _this = _super.call(this) || this;\r\n        _this.data = {};\r\n        return _this;\r\n    }\r\n    /**\r\n     * Process JiveXML data to be used by the class.\r\n     * @param data Event data in JiveXML data format.\r\n     */\r\n    JiveXMLLoader.prototype.process = function (data) {\r\n        console.log('Processing JiveXML event data');\r\n        this.data = data;\r\n    };\r\n    /**\r\n     * Get the event data from the JiveXML data format.\r\n     * @returns An object containing all the event data.\r\n     */\r\n    JiveXMLLoader.prototype.getEventData = function () {\r\n        var parser = new DOMParser();\r\n        var xmlDoc = parser.parseFromString(this.data, 'text/xml');\r\n        // Handle multiple events later (if JiveXML even supports this?)\r\n        var firstEvent = xmlDoc.getElementsByTagName('Event')[0];\r\n        var eventData = {\r\n            eventNumber: firstEvent.getAttribute('eventNumber'),\r\n            runNumber: firstEvent.getAttribute('runNumber'),\r\n            lumiBlock: firstEvent.getAttribute('lumiBlock'),\r\n            time: firstEvent.getAttribute('dateTime'),\r\n            Hits: undefined,\r\n            Tracks: {},\r\n            Jets: {},\r\n            CaloClusters: {}\r\n        };\r\n        // Tracks\r\n        this.getTracks(firstEvent, eventData);\r\n        // Hits\r\n        this.getPixelClusters(firstEvent, eventData);\r\n        this.getSCTClusters(firstEvent, eventData);\r\n        // Jets\r\n        this.getJets(firstEvent, eventData);\r\n        this.getCaloClusters(firstEvent, eventData);\r\n        // console.log('Got this eventdata', eventData);\r\n        return eventData;\r\n    };\r\n    /**\r\n     * Extract Tracks from the JiveXML data format and process them.\r\n     * @param firstEvent First \"Event\" element in the XML DOM of the JiveXML data format.\r\n     * @param eventData Event data object to be updated with Tracks.\r\n     */\r\n    JiveXMLLoader.prototype.getTracks = function (firstEvent, eventData) {\r\n        var tracksHTML = firstEvent.getElementsByTagName('Track');\r\n        var trackCollections = Array.from(tracksHTML);\r\n        var nameOfCollection = 'Tracks';\r\n        for (var _i = 0, trackCollections_1 = trackCollections; _i < trackCollections_1.length; _i++) {\r\n            var trackColl = trackCollections_1[_i];\r\n            // Extract the only collection we (currently) care about\r\n            // if (trackColl.getAttribute(\"storeGateKey\")==nameOfCollection){\r\n            var numOfTracks = Number(trackColl.getAttribute('count'));\r\n            var jsontracks = [];\r\n            // The nodes are big strings of numbers, and contain carriage returns. So need to strip all of this, make to array of strings,\r\n            // then convert to array of numbers\r\n            var tmp = trackColl.getElementsByTagName('numPolyline');\r\n            if (tmp.length === 0) {\r\n                console.log(\"WARNING the track collection \" + trackColl.getAttribute(\"storeGateKey\") + \" has no line information. Skipping.\");\r\n                continue;\r\n            }\r\n            var numPolyline = trackColl.getElementsByTagName('numPolyline')[0].innerHTML\r\n                .replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n            var chi2 = trackColl.getElementsByTagName('chi2')[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n            var numDoF = trackColl.getElementsByTagName('numDoF')[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n            var polyLineXHTML = trackColl.getElementsByTagName('polylineX');\r\n            if (polyLineXHTML.length === 0) {\r\n                continue;\r\n            } // Probably a trackparticle.\r\n            var polylineX = polyLineXHTML[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n            var polylineY = trackColl.getElementsByTagName('polylineY')[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n            var polylineZ = trackColl.getElementsByTagName('polylineZ')[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n            var pT = trackColl.getElementsByTagName('pt')[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n            var d0 = trackColl.getElementsByTagName('d0')[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n            var z0 = trackColl.getElementsByTagName('z0')[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n            var phi0 = trackColl.getElementsByTagName('phi0')[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n            var cotTheta = trackColl.getElementsByTagName('cotTheta')[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n            var author = trackColl.getElementsByTagName('trackAuthor')[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n            var polylineCounter = 0;\r\n            for (var i = 0; i < numOfTracks; i++) {\r\n                var track = { chi2: 0.0, dof: 0.0, pos: [], dparams: [] };\r\n                track.chi2 = chi2[i];\r\n                track.dof = numDoF[i];\r\n                track.dparams = [d0[i], z0[i], phi0[i], Math.tan(cotTheta[i]), 1 / pT[i]];\r\n                var pos = [];\r\n                for (var p = 0; p < numPolyline[i]; p++) {\r\n                    pos.push([polylineX[polylineCounter + p], polylineY[polylineCounter + p], polylineZ[polylineCounter + p]]);\r\n                }\r\n                polylineCounter += numPolyline[i];\r\n                track.pos = pos;\r\n                jsontracks.push(track);\r\n            }\r\n            var trackCollectionName = trackColl.getAttribute('storeGateKey');\r\n            if (trackCollectionName === \"Tracks\") {\r\n                // Okay, this is not so nice, but right now this causes big problems because there is an object type called tracks\r\n                trackCollectionName = \"Tracks.\";\r\n            }\r\n            eventData.Tracks[trackCollectionName] = jsontracks;\r\n            // }\r\n        }\r\n    };\r\n    /**\r\n     * Extract Pixel Clusters (type of Hits) from the JiveXML data format and process them.\r\n     * @param firstEvent First \"Event\" element in the XML DOM of the JiveXML data format.\r\n     * @param eventData Event data object to be updated with Pixel Clusters.\r\n     */\r\n    JiveXMLLoader.prototype.getPixelClusters = function (firstEvent, eventData) {\r\n        eventData.Hits = {};\r\n        if (firstEvent.getElementsByTagName('PixCluster').length === 0) {\r\n            return;\r\n        }\r\n        var pixClustersHTML = firstEvent.getElementsByTagName('PixCluster')[0];\r\n        var numOfClusters = Number(pixClustersHTML.getAttribute('count'));\r\n        var x0 = pixClustersHTML.getElementsByTagName('x0')[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n        var y0 = pixClustersHTML.getElementsByTagName('y0')[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n        var z0 = pixClustersHTML.getElementsByTagName('z0')[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n        eventData.Hits.Pixel = [];\r\n        var temp = []; // Ugh\r\n        for (var i = 0; i < numOfClusters; i++) {\r\n            temp.push([x0[i] * 10.0, y0[i] * 10.0, z0[i] * 10.0]);\r\n        }\r\n        eventData.Hits.Pixel.push(temp);\r\n    };\r\n    /**\r\n     * Extract SCT Clusters (type of Hits) from the JiveXML data format and process them.\r\n     * @param firstEvent First \"Event\" element in the XML DOM of the JiveXML data format.\r\n     * @param eventData Event data object to be updated with SCT Clusters.\r\n     */\r\n    JiveXMLLoader.prototype.getSCTClusters = function (firstEvent, eventData) {\r\n        if (firstEvent.getElementsByTagName('STC').length === 0) {\r\n            return;\r\n        }\r\n        var sctClustersHTML = firstEvent.getElementsByTagName('STC')[0]; // No idea why this is not SCT!\r\n        var numOfSCTClusters = Number(sctClustersHTML.getAttribute('count'));\r\n        var x0 = sctClustersHTML.getElementsByTagName('x0')[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n        var y0 = sctClustersHTML.getElementsByTagName('y0')[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n        var z0 = sctClustersHTML.getElementsByTagName('z0')[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n        eventData.Hits.SCT = [];\r\n        var temp = []; // Ugh\r\n        for (var i = 0; i < numOfSCTClusters; i++) {\r\n            temp.push([x0[i] * 10.0, y0[i] * 10.0, z0[i] * 10.0]);\r\n        }\r\n        eventData.Hits.SCT.push(temp);\r\n    };\r\n    /**\r\n     * Extract TRT Drift Circles (type of Hits) from the JiveXML data format and process them.\r\n     * @param firstEvent First \"Event\" element in the XML DOM of the JiveXML data format.\r\n     * @param eventData Event data object to be updated with TRT Drift Circles.\r\n     */\r\n    JiveXMLLoader.prototype.getTRT_DriftCircles = function (firstEvent, eventData) {\r\n        if (firstEvent.getElementsByTagName('TRT').length === 0) {\r\n            return;\r\n        }\r\n        // const dcHTML = firstEvent.getElementsByTagName(\"TRT\")[0];\r\n        // const numOfDC  = Number(dcHTML.getAttribute(\"count\"));\r\n        // const phi = dcHTML.getElementsByTagName(\"phi\")[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm,\" \").trim().split(\" \").map(Number);\r\n        // const r = dcHTML.getElementsByTagName(\"y0\")[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm,\" \").trim().split(\" \").map(Number);\r\n        // eventData.Hits.TRT=[];\r\n        // let temp = []; // Ugh\r\n        // for (let i = 0; i < numOfDC; i++) {\r\n        //   temp.push ( [ Math.cos(phi[i])*r[i]*10.0, Math.sin(phi[i])*r[i]*10.0, z0[i]*10.0 ] );\r\n        // }\r\n        // eventData.Hits.SCT.push (temp);\r\n    };\r\n    /**\r\n     * Extract Jets from the JiveXML data format and process them.\r\n     * @param firstEvent First \"Event\" element in the XML DOM of the JiveXML data format.\r\n     * @param eventData Event data object to be updated with Jets.\r\n     */\r\n    JiveXMLLoader.prototype.getJets = function (firstEvent, eventData) {\r\n        var jetsHTML = firstEvent.getElementsByTagName('Jet');\r\n        var jetCollections = Array.from(jetsHTML);\r\n        var nameOfCollection = 'AntiKt4TopoJets';\r\n        for (var _i = 0, jetCollections_1 = jetCollections; _i < jetCollections_1.length; _i++) {\r\n            var jetColl = jetCollections_1[_i];\r\n            // Extract the only collection we (currently) care about\r\n            // if (jetColl.getAttribute(\"storeGateKey\")==nameOfCollection){\r\n            var numOfJets = Number(jetColl.getAttribute('count'));\r\n            var jsontracks = [];\r\n            // The nodes are big strings of numbers, and contain carriage returns. So need to strip all of this, make to array of strings,\r\n            // then convert to array of numbers\r\n            var phi = jetColl.getElementsByTagName('phi')[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n            var eta = jetColl.getElementsByTagName('eta')[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n            var energy = jetColl.getElementsByTagName('et')[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n            var temp = []; // Ugh\r\n            for (var i = 0; i < numOfJets; i++) {\r\n                temp.push({ coneR: 0.4, phi: phi[i], eta: eta[i], energy: energy[i] * 1000.0 });\r\n            }\r\n            eventData.Jets[jetColl.getAttribute('storeGateKey')] = temp;\r\n            // }\r\n        }\r\n    };\r\n    /**\r\n     * Extract Calo Clusters from the JiveXML data format and process them.\r\n     * @param firstEvent First \"Event\" element in the XML DOM of the JiveXML data format.\r\n     * @param eventData Event data object to be updated with Calo Clusters.\r\n     */\r\n    JiveXMLLoader.prototype.getCaloClusters = function (firstEvent, eventData) {\r\n        var clustersHTML = firstEvent.getElementsByTagName('Cluster');\r\n        var clusterCollections = Array.from(clustersHTML);\r\n        var nameOfCollection = 'CaloTopoCluster_ESD';\r\n        for (var _i = 0, clusterCollections_1 = clusterCollections; _i < clusterCollections_1.length; _i++) {\r\n            var clusterColl = clusterCollections_1[_i];\r\n            // Extract the only collection we (currently) care about\r\n            // if (clusterColl.getAttribute(\"storeGateKey\")==nameOfCollection){\r\n            var numOfClusters = Number(clusterColl.getAttribute('count'));\r\n            var jsontracks = [];\r\n            // The nodes are big strings of numbers, and contain carriage returns. So need to strip all of this, make to array of strings,\r\n            // then convert to array of numbers\r\n            var phi = clusterColl.getElementsByTagName('phi')[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n            var eta = clusterColl.getElementsByTagName('eta')[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n            var energy = clusterColl.getElementsByTagName('et')[0].innerHTML.replace(/\\r\\n|\\n|\\r/gm, ' ').trim().split(' ').map(Number);\r\n            var temp = []; // Ugh\r\n            for (var i = 0; i < numOfClusters; i++) {\r\n                temp.push({ phi: phi[i], eta: eta[i], energy: energy[i] * 1000.0 });\r\n            }\r\n            eventData.CaloClusters[clusterColl.getAttribute('storeGateKey')] = temp;\r\n            // }\r\n        }\r\n    };\r\n    return JiveXMLLoader;\r\n}(PhoenixLoader));\r\nexport { JiveXMLLoader };\r\n//# sourceMappingURL=jivexml-loader.js.map","var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { PhoenixLoader } from \"./phoenix-loader\";\r\n/**\r\n * PhoenixLoader for processing and loading an event from \".root\".\r\n */\r\nvar JSRootEventLoader = /** @class */ (function (_super) {\r\n    __extends(JSRootEventLoader, _super);\r\n    /**\r\n     * Constructor for the JSRoot event loader.\r\n     * @param JSROOT JSROOT object containing all JSROOT functions.\r\n     * @param rootFileURL URL of the \".root\" file to be processed.\r\n     */\r\n    function JSRootEventLoader(JSROOT, rootFileURL) {\r\n        var _this = _super.call(this) || this;\r\n        _this.JSROOT = JSROOT;\r\n        _this.rootFileURL = rootFileURL;\r\n        _this.fileEventData = {\r\n            Hits: {},\r\n            Tracks: {},\r\n            Jets: {},\r\n            CaloClusters: {}\r\n        };\r\n        return _this;\r\n    }\r\n    /**\r\n     * Get event data of the given objects (e.g ['tracks;1', 'hits;1'])\r\n     * from the currently loaded \".root\" file.\r\n     * @param objects An array identifying objects inside the \".root\" file.\r\n     * @param onEventData Callback when event data is extracted and available for use.\r\n     */\r\n    JSRootEventLoader.prototype.getEventData = function (objects, onEventData) {\r\n        var _this = this;\r\n        this.JSROOT.OpenFile(this.rootFileURL, function (file) {\r\n            var i = 0;\r\n            for (var _i = 0, objects_1 = objects; _i < objects_1.length; _i++) {\r\n                var objectName = objects_1[_i];\r\n                file.ReadObject(objectName, function (object) {\r\n                    i++;\r\n                    if (object) {\r\n                        _this.processItemsList(object);\r\n                    }\r\n                    if (i === objects.length) {\r\n                        for (var _i = 0, _a = ['Hits', 'Tracks', 'Jets', 'CaloClusters']; _i < _a.length; _i++) {\r\n                            var objectType = _a[_i];\r\n                            if (Object.keys(_this.fileEventData[objectType]).length === 0) {\r\n                                _this.fileEventData[objectType] = undefined;\r\n                            }\r\n                        }\r\n                        onEventData(_this.fileEventData);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Process the list of items inside the JSROOT files for relevant event data.\r\n     * @param obj Object containing the event data in the form of JSROOT classes.\r\n     */\r\n    JSRootEventLoader.prototype.processItemsList = function (obj) {\r\n        if ((obj._typename === 'TObjArray') || obj._typename === 'TList') {\r\n            if (!obj.arr)\r\n                return;\r\n            for (var n = 0; n < obj.arr.length; ++n) {\r\n                var sobj = obj.arr[n];\r\n                this.processItemsList(sobj);\r\n            }\r\n        }\r\n        else if (obj._typename === 'THREE.Mesh') {\r\n            // Three.js object - we only want event data\r\n        }\r\n        else if (obj._typename === 'TGeoTrack') {\r\n            if (!this.fileEventData.Tracks['TGeoTracks']) {\r\n                this.fileEventData.Tracks['TGeoTracks'] = [];\r\n            }\r\n            var tGeoTrack = this.getTGeoTrack(obj);\r\n            if (tGeoTrack) {\r\n                this.fileEventData.Tracks['TGeoTracks'].push(tGeoTrack);\r\n            }\r\n        }\r\n        else if ((obj._typename === 'TEveTrack') || (obj._typename === 'ROOT::Experimental::TEveTrack')) {\r\n            if (!this.fileEventData.Tracks[obj._typename + '(s)']) {\r\n                this.fileEventData.Tracks[obj._typename + '(s)'] = [];\r\n            }\r\n            var tEveTrack = this.getTEveTrack(obj);\r\n            if (tEveTrack) {\r\n                this.fileEventData.Tracks[obj._typename + '(s)'].push(tEveTrack);\r\n            }\r\n        }\r\n        else if ((obj._typename === 'TEvePointSet') || (obj._typename === 'ROOT::Experimental::TEvePointSet') || (obj._typename === 'TPolyMarker3D')) {\r\n            if (!this.fileEventData.Hits[obj._typename + '(s)']) {\r\n                this.fileEventData.Hits[obj._typename + '(s)'] = [];\r\n            }\r\n            var hit = this.getHit(obj);\r\n            if (hit) {\r\n                this.fileEventData.Hits[obj._typename + '(s)'].push(hit);\r\n            }\r\n        }\r\n        else if ((obj._typename === 'TEveGeoShapeExtract') || (obj._typename === 'ROOT::Experimental::TEveGeoShapeExtract')) {\r\n            // Some extra shape - we only want event data\r\n        }\r\n    };\r\n    /**\r\n     * Process and get the TGeoTrack in phoenix format.\r\n     * @param track Track object containing the track information.\r\n     * @returns Track object in the phoenix format.\r\n     */\r\n    JSRootEventLoader.prototype.getTGeoTrack = function (track) {\r\n        if (!track || !track.fNpoints)\r\n            return false;\r\n        var npoints = Math.round(track.fNpoints / 4);\r\n        var positions = [];\r\n        for (var k = 0; k < npoints - 1; ++k) {\r\n            positions.push([\r\n                track.fPoints[k * 4],\r\n                track.fPoints[k * 4 + 1],\r\n                track.fPoints[k * 4 + 2]\r\n            ]);\r\n        }\r\n        return {\r\n            pos: positions\r\n        };\r\n    };\r\n    /**\r\n     * Process and get the TEveTrack in phoenix format.\r\n     * @param track Track object containing the track information.\r\n     * @returns Track object in the phoenix format.\r\n     */\r\n    JSRootEventLoader.prototype.getTEveTrack = function (track) {\r\n        if (!track || (track.fN <= 0))\r\n            return false;\r\n        var trackObj = {};\r\n        var positions = [];\r\n        for (var i = 0; i < track.fN - 1; i++) {\r\n            positions.push([\r\n                track.fP[i * 3],\r\n                track.fP[i * 3 + 1],\r\n                track.fP[i * 3 + 2]\r\n            ]);\r\n        }\r\n        for (var _i = 0, _a = track.fTitle.split('\\n'); _i < _a.length; _i++) {\r\n            var trackParamLine = _a[_i];\r\n            for (var _b = 0, _c = trackParamLine.split(/(?!\\(.*), (?!.*\\))/g); _b < _c.length; _b++) {\r\n                var trackParam = _c[_b];\r\n                var trackParamData = trackParam.split('=');\r\n                trackObj[trackParamData[0]] = trackParamData[1];\r\n            }\r\n        }\r\n        trackObj['pos'] = positions;\r\n        return trackObj;\r\n    };\r\n    /**\r\n     * Process and get the Hit in phoenix format.\r\n     * @param hit Hit object containing the hit information.\r\n     * @returns Hit in phoenix format.\r\n     */\r\n    JSRootEventLoader.prototype.getHit = function (hit) {\r\n        if (!hit || !hit.fN || (hit.fN < 0))\r\n            return false;\r\n        var hitArray = [];\r\n        for (var i = 0; i < hit.fN; i += 3) {\r\n            hitArray.push([hit.fP[i * 3], hit.fP[i * 3 + 1], hit.fP[i * 3 + 2]]);\r\n        }\r\n        return hitArray;\r\n    };\r\n    return JSRootEventLoader;\r\n}(PhoenixLoader));\r\nexport { JSRootEventLoader };\r\n//# sourceMappingURL=jsroot-event-loader.js.map","var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { PhoenixLoader } from './phoenix-loader';\r\n/**\r\n * PhoenixLoader for processing and loading an LHCb event.\r\n */\r\nvar LHCbLoader = /** @class */ (function (_super) {\r\n    __extends(LHCbLoader, _super);\r\n    /**\r\n     * Constructor for the LHCb loader.\r\n     */\r\n    function LHCbLoader() {\r\n        var _this = _super.call(this) || this;\r\n        _this.data = {};\r\n        return _this;\r\n    }\r\n    /**\r\n     * Set the event data for the loader.\r\n     * @param data Event data as JSON.\r\n     */\r\n    LHCbLoader.prototype.process = function (data) {\r\n        console.log('Processing event data');\r\n        this.data = data;\r\n    };\r\n    /**\r\n     * Process and get the event data.\r\n     * @returns The processed event data.\r\n     */\r\n    LHCbLoader.prototype.getEventData = function () {\r\n        var eventData = {\r\n            eventNumber: this.data.eventNumber,\r\n            runNumber: this.data.runNumber,\r\n            Hits: {},\r\n            Tracks: {}\r\n        };\r\n        var part_list = [];\r\n        var pdata_list = this.data.PARTICLES;\r\n        if (pdata_list) {\r\n            for (var j = 0; j < pdata_list.length; j++) {\r\n                var pdata = pdata_list[j];\r\n                var mom = Math.pow(pdata.px, 2) + Math.pow(pdata.py, 2) + Math.pow(pdata.pz, 2);\r\n                var part = {\r\n                    particle_id: pdata.name,\r\n                    pos: pdata.track,\r\n                    mom: mom\r\n                };\r\n                part_list.push(part);\r\n            }\r\n        }\r\n        eventData.Tracks = { Particles: part_list };\r\n        return eventData;\r\n    };\r\n    /**\r\n     * Get LHCb specific metadata associated to the event (experiment info, time, run, event...).\r\n     * @returns Metadata of the event.\r\n     */\r\n    LHCbLoader.prototype.getEventMetadata = function () {\r\n        var metadata = _super.prototype.getEventMetadata.call(this);\r\n        if (this.data['time']) {\r\n            metadata.push({\r\n                label: 'Data recorded',\r\n                value: this.data['time']\r\n            });\r\n        }\r\n        return metadata;\r\n    };\r\n    return LHCbLoader;\r\n}(PhoenixLoader));\r\nexport { LHCbLoader };\r\n//# sourceMappingURL=lhcb-loader.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\n/**\r\n * Script loader for dynamically loading external scripts.\r\n */\r\nvar ScriptLoader = /** @class */ (function () {\r\n    function ScriptLoader() {\r\n    }\r\n    /**\r\n     * Synchronously load all JSRoot scripts. ONLY CALL ONCE.\r\n     * @param onScriptsLoaded Callback when all the JSRoot scripts have loaded.\r\n     */\r\n    ScriptLoader.loadJSRootScripts = function (onScriptsLoaded) {\r\n        var _this = this;\r\n        (function () { return __awaiter(_this, void 0, void 0, function () {\r\n            var allScripts, _i, allScripts_1, script;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        allScripts = [\r\n                            'JSRootCore.js', 'three.min.js', 'three.extra.min.js',\r\n                            'ThreeCSG.js', 'd3.min.js', 'JSRootPainter.js', 'JSRoot3DPainter.js',\r\n                            'JSRootGeoBase.js', 'JSRootGeoPainter.js'\r\n                        ];\r\n                        _i = 0, allScripts_1 = allScripts;\r\n                        _a.label = 1;\r\n                    case 1:\r\n                        if (!(_i < allScripts_1.length)) return [3 /*break*/, 4];\r\n                        script = allScripts_1[_i];\r\n                        return [4 /*yield*/, ScriptLoader.loadScript('assets/jsroot/' + script, 'JSROOT')];\r\n                    case 2:\r\n                        _a.sent();\r\n                        _a.label = 3;\r\n                    case 3:\r\n                        _i++;\r\n                        return [3 /*break*/, 1];\r\n                    case 4:\r\n                        onScriptsLoaded(JSROOT);\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        }); })();\r\n    };\r\n    /**\r\n     * Load a script dynamically from a URL.\r\n     * @param scriptURL URL of the script to be loaded.\r\n     * @param scriptFor Optional data attribute to identify what the script is for. `[data-scriptFor]`\r\n     * @param parentElement Parent element to which the script is to be appended.\r\n     * Defaults to `<head>` tag.\r\n     * @returns Promise for the script load.\r\n     */\r\n    ScriptLoader.loadScript = function (scriptURL, scriptFor, parentElement) {\r\n        if (parentElement === void 0) { parentElement = document.getElementsByTagName('head')[0]; }\r\n        return new Promise(function (resolve, reject) {\r\n            var scriptExists = document\r\n                .querySelectorAll('script[src=\"' + scriptURL + '\"]');\r\n            // If no script exists - add one\r\n            if (scriptExists.length === 0) {\r\n                var scriptElement_1 = document.createElement('script');\r\n                scriptElement_1.type = 'text/javascript';\r\n                scriptElement_1.src = scriptURL;\r\n                if (scriptFor) {\r\n                    scriptElement_1.setAttribute('data-scriptfor', scriptFor);\r\n                }\r\n                scriptElement_1.addEventListener('load', function () {\r\n                    scriptElement_1.setAttribute('data-loaded', 'true');\r\n                    resolve();\r\n                });\r\n                scriptElement_1.onerror = function (event) {\r\n                    console.error('ERROR LOADING SCRIPT: ', event);\r\n                    reject();\r\n                };\r\n                parentElement.appendChild(scriptElement_1);\r\n            }\r\n            else {\r\n                // If script has already loaded then resolve else wait for it to load\r\n                if (scriptExists[0].dataset.loaded === 'true') {\r\n                    resolve();\r\n                }\r\n                else {\r\n                    scriptExists[0].addEventListener('load', function () {\r\n                        resolve();\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    };\r\n    return ScriptLoader;\r\n}());\r\nexport { ScriptLoader };\r\n//# sourceMappingURL=script-loader.js.map","var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { PhoenixLoader } from './phoenix-loader';\r\n/**\r\n * PhoenixLoader for processing and loading an event from TrackML.\r\n */\r\nvar TrackmlLoader = /** @class */ (function (_super) {\r\n    __extends(TrackmlLoader, _super);\r\n    /**\r\n     * Instiantiate the TrackML loader.\r\n     */\r\n    function TrackmlLoader() {\r\n        var _this = _super.call(this) || this;\r\n        _this.hitData = [];\r\n        _this.particleData = [];\r\n        _this.truthData = {};\r\n        return _this;\r\n    }\r\n    /**\r\n     * Process Hits to format and store them.\r\n     * @param hits Hits to be processed.\r\n     */\r\n    TrackmlLoader.prototype.processHits = function (hits) {\r\n        var data = hits.split('\\n');\r\n        console.log('Event has this many hits:', data.length);\r\n        var values;\r\n        // format is: hit_id,x,y,z,volume_id,layer_id,module_id\r\n        for (var line = 1; line < data.length; line++) {\r\n            values = data[line].split(',');\r\n            this.hitData[values[0]] = [parseFloat(values[1]), parseFloat(values[2]), parseFloat(values[3])];\r\n        }\r\n    };\r\n    /**\r\n     * Process Particles to format and store them.\r\n     * @param particles Particles to be processed.\r\n     */\r\n    TrackmlLoader.prototype.processParticles = function (particles) {\r\n        var data = particles.split('\\n');\r\n        console.log('Event has this many particles:', data.length);\r\n        var values;\r\n        // format is: particle_id,vx,vy,vz,px,py,pz,q,nhits\r\n        for (var line = 1; line < data.length; line++) {\r\n            values = data[line].split(',');\r\n            this.particleData.push({\r\n                // tslint:disable-next-line:radix\r\n                particle_id: parseInt(values[0]),\r\n                vertex_pos: [parseFloat(values[1]), parseFloat(values[2]), parseFloat(values[3])],\r\n                mom: [parseFloat(values[4]), parseFloat(values[5]), parseFloat(values[6])]\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Process Truth data to format and store it.\r\n     * @param truth Truth data to be processed.\r\n     */\r\n    TrackmlLoader.prototype.processTruth = function (truth) {\r\n        var data = truth.split('\\n');\r\n        console.log('Event has this many truth: ', data.length);\r\n        var values;\r\n        // format is: hit_id,particle_id,tx,ty,tz,tpx,tpy,tpz,weight\r\n        for (var line = 1; line < data.length; line++) {\r\n            values = data[line].split(',');\r\n            this.truthData[values[0]] = [values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8]];\r\n        }\r\n    };\r\n    /**\r\n     * Get structured event data from the processed Hits, Truth data and Particles.\r\n     * @param eventNum Event number.\r\n     */\r\n    TrackmlLoader.prototype.getEventData = function (eventNum) {\r\n        var eventData = {\r\n            eventNumber: eventNum,\r\n            runNumber: 0,\r\n            Hits: undefined,\r\n            Tracks: undefined\r\n        };\r\n        if (this.hitData) {\r\n            eventData.Hits = {};\r\n            eventData.Hits.Reconstructed = [];\r\n            var mod = Math.round(this.hitData.length / 5000);\r\n            if (mod < 1) {\r\n                mod = 1;\r\n            }\r\n            var count = 0;\r\n            for (var i = 1; i < this.hitData.length; i++) {\r\n                if (i % mod) {\r\n                    continue;\r\n                }\r\n                eventData.Hits.Reconstructed[count++] = [[this.hitData[i][0], this.hitData[i][1], this.hitData[i][2]]];\r\n            }\r\n        }\r\n        console.log('Will show this many hits', eventData.Hits.Reconstructed.length);\r\n        if (this.truthData) {\r\n            eventData.Tracks = { Particles: [] };\r\n            if (this.particleData) {\r\n                for (var i = 0; i < this.particleData.length; i++) {\r\n                    // Add the relevant data from particle, such as first hit position - we'll add the particle_id because we need it later.\r\n                    eventData.Tracks.Particles[i]\r\n                        = {\r\n                            particle_id: this.particleData[i].particle_id,\r\n                            pos: [this.particleData[i].vertex_pos],\r\n                            mom: this.particleData[i].mom\r\n                        };\r\n                    // console.log('Just added: ', event_data.Tracks.Particles[i-1]);\r\n                }\r\n            }\r\n            var hitId = void 0;\r\n            var particleId = void 0;\r\n            // tslint:disable-next-line:radix\r\n            var stepSize = parseInt(String(this.truthData.length / 10));\r\n            for (var i = 1; i < this.truthData.length; i++) {\r\n                // Now add the truth data - i.e. add the truth hits which match a particle to the particle (unsorted for the moment)\r\n                hitId = i;\r\n                // tslint:disable-next-line:radix\r\n                particleId = parseInt(this.truthData[i][0]);\r\n                for (var j = 0; j < eventData.Tracks.Particles.length; j++) {\r\n                    // console.log(event_data.Tracks.Particles[j]);\r\n                    if (eventData.Tracks.Particles[j].particle_id === particleId) {\r\n                        // Found matching particle - add the truth hit position to the particles positions\r\n                        eventData.Tracks.Particles[j].pos.push([parseFloat(this.truthData[i][1]), parseFloat(this.truthData[i][2]), parseFloat(this.truthData[i][3])]);\r\n                    }\r\n                }\r\n                if (i % stepSize === 0) {\r\n                    document.getElementById('info').innerHTML = 'Processed ' + 100 * i / this.truthData.length + '% of event data.';\r\n                }\r\n            }\r\n        }\r\n        var numParticleStubs = 0;\r\n        for (var j = 0; j < eventData.Tracks.Particles.length; j++) {\r\n            if (eventData.Tracks.Particles[j].pos.length < 3) {\r\n                // console.log ('Track has less than 3 positions');\r\n                // console.log(event_data.Tracks.Particles[j]);\r\n                numParticleStubs++;\r\n            }\r\n        }\r\n        var events = {};\r\n        events[eventNum] = eventData;\r\n        return eventData;\r\n    };\r\n    return TrackmlLoader;\r\n}(PhoenixLoader));\r\nexport { TrackmlLoader };\r\n//# sourceMappingURL=trackml-loader.js.map","import React, { useEffect } from 'react';\nimport { EventDisplay, Configuration } from '@phoenix/event-display';\nimport './App.css';\n\nfunction App() {\n  // Creating the event display\n  const eventDisplay = new EventDisplay();\n\n  const initEventDisplay = () => {\n    // Define the configuration\n    const configuration = new Configuration('eventDisplay', true);\n    \n    // Initialize the event display\n    eventDisplay.init(configuration);\n\n    fetch('./phoenix-data/ATLAS/event-data.json').then(res => res.json())\n      .then((res) => {\n        // Parse the JSON to extract events and their data\n        eventDisplay.parsePhoenixEvents(res);\n      });\n\n    // Load detector geometries\n    eventDisplay.loadOBJGeometry('./phoenix-data/ATLAS/geometries/toroids.obj', 'Toroids', 0x8c8c8c, false, false);\n    eventDisplay.loadOBJGeometry('./phoenix-data/ATLAS/geometries/TRT.obj', 'TRT', 0x356aa5, false);\n    eventDisplay.loadOBJGeometry('./phoenix-data/ATLAS/geometries/SCT.obj', 'SCT', 0xfff400, false);\n    eventDisplay.loadOBJGeometry('./phoenix-data/ATLAS/geometries/pixel.obj', 'Pixel', 0x356aa5, false);\n    eventDisplay.loadOBJGeometry('./phoenix-data/ATLAS/geometries/LAR_Bar.obj', 'LAr Barrel', 0x19CCD2, true, false);\n    eventDisplay.loadOBJGeometry('./phoenix-data/ATLAS/geometries/LAR_EC1.obj', 'LAr EC1', 0x19CCD2, true, false);\n    eventDisplay.loadOBJGeometry('./phoenix-data/ATLAS/geometries/LAR_EC2.obj', 'LAr EC2', 0x19CCD2, true, false);\n    eventDisplay.loadOBJGeometry('./phoenix-data/ATLAS/geometries/TileCal.obj', 'Tile Cal', 0xc14343, true, false);\n  }\n\n  useEffect(() => {\n    initEventDisplay();\n  });\n\n  let clipping = false;\n\n  const clipGeometries = () => {\n    const uiManager = eventDisplay.getUIManager();\n    clipping = !clipping;\n    uiManager.setClipping(clipping);\n    if (clipping) {\n      uiManager.rotateClipping(180);\n    } else {\n      uiManager.rotateClipping(0);\n    }\n  }\n\n  return (\n    <div id=\"eventDisplay\">\n      <button id=\"clipGeometries\" onClick={clipGeometries}>Clip Geometries</button>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}